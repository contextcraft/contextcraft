Method Name,Description
winfo pixels,Rounded integer value of winfo_fpixels.
winfo height,Return height of this widget.
register buffer,Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. 
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
get submodule,"Returns the submodule given by ``target`` if it exists,"
 partial date slice,"Parameters
----------
reso : Resolution
parsed : datetime

Returns
-------
slice or ndarray[intp]"
tag sents,"Applies the tag method over a list of sentences. This method will return
for each sentence a list of tuples of (word, tag)."
do pdoc,"Print the docstring for an object.

The debugger interface to %pdoc."
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
selection clear,"Clear the selection

If the selection isn't in this widget then the
command has no effect."
 asdict,Return a new dict which maps field names to their values.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo interps,Return the name of all Tcl interpreters for this display.
score ngram,"Returns the score for a given bigram using the given scoring
function.  Following Church and Hanks (1990), counts are scaled by
a factor of 1/(window_size - 1)."
 is memory usage qualified,Return a boolean if we need a qualified .info display.
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. "
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
register forward hook,Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. 
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
complex float,Casts this storage to complex float type
get synsets,"Return a list of Synset objects for this word.

:param pos: A part-of-speech tag to filter upon. If ``None``, all
    synsets for all parts of speech will be loaded.

:rtype: list of Synsets

.. versionadded:: 0.7.0"
winfo reqheight,Return requested height of this widget.
is simple,"Tells whether the argument(args[0]) of DiracDelta is a linear
expression in *x*.

Examples
========

>>> from sympy import DiracDelta, cos
>>> from sympy.abc import x, y

>>> DiracDelta(x*y).is_simple(x)
True
>>> DiracDelta(x*y).is_simple(y)
True

>>> DiracDelta(x**2 + x - 2).is_simple(x)
False

>>> DiracDelta(cos(x)).is_simple(x)
False

Parameters
==========

x : can be a symbol

See Also
========

sympy.simplify.simplify.simplify, DiracDelta"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
winfo colormapfull,Return True if at the last color request the colormap was full.
grid info,"Return information about the options
for positioning this widget in a grid."
 map values,"An internal function that maps values using the input
correspondence (which can be a dict, Series, or function).

Parameters
----------
mapper : function, dict, or Series
    The input correspondence object
na_action : {None, 'ignore'}
    If 'ignore', propagate NA values, without passing them to the
    mapping function

Returns
-------
Union[Index, MultiIndex], inferred
    The output of the mapping function applied to the index.
    If the function returns a tuple with more than one element
    a MultiIndex will be returned."
winfo visualsavailable,"Return a list of all visuals available for the screen
of this widget.

Each item in the list consists of a visual name (see winfo_visual), a
depth and if includeids is true is given also the X identifier."
singular values,"Compute the singular values of a Matrix

Examples
========

>>> from sympy import Matrix, Symbol
>>> x = Symbol('x', real=True)
>>> M = Matrix([[0, 1, 0], [0, x, 0], [-1, 0, 0]])
>>> M.singular_values()
[sqrt(x**2 + 1), 1, 0]

See Also
========

condition_number"
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
 items,"Return an iterable of (fid,fval) pairs, where fid is a
feature identifier and fval is the corresponding feature
value, for all features defined by this FeatStruct."
share memory ,"Moves the storage to shared memory.

This is a no-op for storages already in shared memory and for CUDA
storages, which do not need to be moved for sharing across processes.
Storages in shared memory cannot be resized.

Returns: self"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
span tokenize,"Identify the tokens using integer offsets ``(start_i, end_i)``,
where ``s[start_i:end_i]`` is the corresponding token.

:rtype: iter(tuple(int, int))"
is categorical,Check if the Index holds categorical data. Returns ------- bool True if the Index is categorical. See Also -------- CategoricalIndex : Index for categorical data. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples --------
rename ,In-place version of :meth:`~Tensor.rename`.
most informative features,"Return a list of the 'most informative' features used by this
classifier.  For the purpose of this function, the
informativeness of a feature ``(fname,fval)`` is equal to the
highest value of P(fname=fval|label), for any label, divided by
the lowest value of P(fname=fval|label), for any label:

|  max[ P(fname=fval|label1) / P(fname=fval|label2) ]"
 lazy load hook,"load_state_dict pre-hook function for lazy buffers and parameters.

The purpose of this hook is to adjust the current state and/or
``state_dict`` being loaded so that a module instance serialized in
both un/initialized state can be deserialized onto both un/initialized
module instance.
See comment in ``torch.nn.Module._register_load_state_dict_pre_hook``
for the details of the hook specification."
 get grouper for level,"Get index grouper corresponding to an index level

Parameters
----------
mapper: Group mapping function or None
    Function mapping index values to groups
level : int or None
    Index level, positional
dropna : bool
    dropna from groupby

Returns
-------
grouper : Index
    Index of values to group on.
labels : ndarray of int or None
    Array of locations in level_index.
uniques : Index or None
    Index of unique values for level."
wm transient,"Instruct the window manager that this widget is transient
with regard to widget MASTER."
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 get indexer strict,Analogue to get_indexer that raises if any elements are missing.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
winfo exists,Return true if this widget exists.
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
share memory,See :meth:`torch.Tensor.share_memory_`
template filter,"A decorator that is used to register custom template filter.
You can specify a name for the filter, otherwise the function
name will be used. Example::

  @app.template_filter()
  def reverse(s):
      return s[::-1]

:param name: the optional name of the filter, otherwise the
             function name will be used."
 memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
 maybe promote,"When dealing with an object-dtype Index and a non-object Index, see
if we can upcast the object-dtype one to improve performance."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
to dense,"Return my 'dense' representation

For internal compatibility with numpy arrays.

Returns
-------
dense : array"
grab current,"Return widget which has currently the grab in this application
or None."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
 keys,"Return an iterable of the feature identifiers used by this
FeatStruct."
selection clear,Clear the current X selection.
 replace,Return a new _VersionInfo object replacing specified fields with new values
open resource,"Open a resource file relative to :attr:`root_path` for
reading.

For example, if the file ``schema.sql`` is next to the file
``app.py`` where the ``Flask`` app is defined, it can be opened
with:

.. code-block:: python

    with app.open_resource(""schema.sql"") as f:
        conn.executescript(f.read())

:param resource: Path to the resource relative to
    :attr:`root_path`.
:param mode: Open the file in this mode. Only reading is
    supported, valid values are ""r"" (or ""rt"") and ""rb"".

Note this is a duplicate of the same method in the Flask
class."
 memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
equal levels,Return True if the levels of both MultiIndex objects are the same
verb t5,stem the future tense prefixes
 invalid indexer,Consistent invalid indexer message.
place forget,Unmap this widget.
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
parse all,:rtype: list(Tree)
value counts,"Return a Series containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default. Parameters ---------- normalize : bool, default False If True then the object returned will contain the relative frequencies of the unique values. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. bins : int, optional Rather than count values, group them into half-open bins, a convenience for ``pd.cut``, only works with numeric data. dropna : bool, default True Don't include counts"
get uint info,"Get unsigned integer property from the DMatrix.

Parameters
----------
field: str
    The field name of the information

Returns
-------
info : array
    a numpy array of unsigned integer information of the data"
winfo visualid,Return the X identifier for the visual for this widget.
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
grid size,Return a tuple of the number of column and rows in the grid.
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 check is chained assignment possible,"Check if we are a view, have a cacher, and are of mixed type.
If so, then force a setitem_copy check.

Should be called just near setting a value

Will return a boolean if it we are a view and are cached, but a
single-dtype meaning that the cacher should be updated following
setting."
 intersection via get indexer,"Find the intersection of two Indexes using get_indexer.

Returns
-------
np.ndarray or ExtensionArray
    The returned array will be unique."
 should compare,Check if `self == other` can ever have non-False entries.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
wm state,"Query or set the state of this widget as one of normal, icon,
iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only)."
frac field,"Returns a fraction field, i.e. `K(X)`. "
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
find enclosed,"Return all items in rectangle defined
by X1,Y1,X2,Y2."
 get agg axis,Let's be explicit about this.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
insert command,Add command menu item at INDEX.
pack slaves,"Return a list of all slaves of this widget
in its packing order."
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
retract assumptions,"Retract assumptions from the assumption list.

:param debug: If True, give warning when ``retracted`` is not present on
assumptions list.
:type debug: bool
:param retracted: assumptions to be retracted
:type retracted: list(sem.Expression)"
prepare method,Prepares the given HTTP method.
winfo height,Return height of this widget.
place slaves,"Return a list of all slaves of this widget
in its packing order."
 get fill indexer searchsorted,"Fallback pad/backfill get_indexer that works for monotonic decreasing
indexes and non-monotonic targets."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
image names,Return a list of all existing image names.
to native types,"Format specified values of `self` and return them.

.. deprecated:: 1.2.0

Parameters
----------
slicer : int, array-like
    An indexer into `self` that specifies which values
    are used in the formatting process.
kwargs : dict
    Options for specifying how the values should be formatted.
    These options include the following:

    1) na_rep : str
        The value that serves as a placeholder for NULL values
    2) quoting : bool or None
        Whether or not there are quoted values in `self`
    3) date_format : str
        The format used to represent date-like values.

Returns
-------
numpy.ndarray
    Formatted values."
wm aspect,"Instruct the window manager to set the aspect ratio (width/height)
of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
of the actual values if no argument is given."
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
grid forget,Unmap this widget.
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
 get nearest indexer,"Get the indexer for the nearest index labels; requires an index with
values that can be subtracted from each other (e.g., not strings or
tuples)."
 contains vowel,"Returns True if stem contains a vowel, else False"
add mwe,"Add a multi-word expression to the lexicon (stored as a word trie)

We use ``util.Trie`` to represent the trie. Its form is a dict of dicts.
The key True marks the end of a valid MWE.

:param mwe: The multi-word expression we're adding into the word trie
:type mwe: tuple(str) or list(str)

:Example:

>>> tokenizer = MWETokenizer()
>>> tokenizer.add_mwe(('a', 'b'))
>>> tokenizer.add_mwe(('a', 'b', 'c'))
>>> tokenizer.add_mwe(('a', 'x'))
>>> expected = {'a': {'x': {True: None}, 'b': {True: None, 'c': {True: None}}}}
>>> tokenizer._mwes == expected
True"
 check grammar,"Check to make sure that all of the CFG productions are
potentially useful.  If any productions can never be used,
then print a warning.

:rtype: None"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
 get grouper for level,"Get index grouper corresponding to an index level

Parameters
----------
mapper: Group mapping function or None
    Function mapping index values to groups
level : int or None
    Index level, positional
dropna : bool
    dropna from groupby

Returns
-------
grouper : Index
    Index of values to group on.
labels : ndarray of int or None
    Array of locations in level_index.
uniques : Index or None
    Index of unique values for level."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
open instance resource,"Opens a resource from the application's instance folder
(:attr:`instance_path`).  Otherwise works like
:meth:`open_resource`.  Instance resources can also be opened for
writing.

:param resource: the name of the resource.  To access resources within
                 subfolders use forward slashes as separator.
:param mode: resource file opening mode, default is 'rb'."
slave envs,"get enviroment variables for slaves
can be passed in as args or envs"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
 can hold identifiers and holds name,"Faster check for ``name in self`` when we know `name` is a Python
identifier (e.g. in NDFrame.__getattr__, which hits this to support
. key lookup). For indexes that can't hold identifiers (everything
but object & categorical) we just return False.

https://github.com/pandas-dev/pandas/issues/19764"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 get level names,Return a name or list of names with None replaced by the level number.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 build index,"Build a list self._index such that self._index[i] is a list
of the alignments originating from word i."
tk focusNext,"Return the next widget in the focus order which follows
widget which has currently the focus.

The focus order first goes to the next child, then to
the children of the child recursively and then to the
next sibling which is higher in the stacking order.  A
widget is omitted if it has the takefocus resource set
to 0."
treeposition spanning leaves,":return: The tree position of the lowest descendant of this
    tree that dominates ``self.leaves()[start:end]``.
:raise ValueError: if ``end <= start``"
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
register module,Alias for :func:`add_module`.
prepare method,Prepares the given HTTP method.
union many,A bit of a hack to accelerate unioning a collection of indexes.
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
prepare body,Prepares the given HTTP body data.
create global jinja loader,"Creates the loader for the Jinja2 environment.  Can be used to
override just the loader and keeping the rest unchanged.  It's
discouraged to override this function.  Instead one should override
the :meth:`jinja_loader` function instead.

The global loader dispatches between the loaders of the application
and the individual blueprints.

.. versionadded:: 0.7"
 validate data,"Validate input data and set or check the `n_features_in_` attribute. Parameters ---------- X : {array-like, sparse matrix, dataframe} of shape (n_samples, n_features), default='no validation' The input samples. If `'no_validation'`, no validation is performed on `X`. This is useful for meta-estimator which can delegate input validation to their underlying estimator(s). In that case `y` must be passed and the only accepted `check_params` are `multi_output` and `y_numeric`. y : array-like of shape (n_samples,), default='no_validation' The targets. - If `None`, `check_array` is called on `X`. If the estimator's requires_y tag is True, then an error will be raised. - If `'no_validation'`, `check_array` is"
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
 sort,"Sort sections using the currently defined sort order. Sort
sections by index on section order, if available, then alphabetic, and
account for subsections, which should always follow their parent."
 get fill indexer searchsorted,"Fallback pad/backfill get_indexer that works for monotonic decreasing
indexes and non-monotonic targets."
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
reorder levels,"Rearrange index levels using input order. May not drop or duplicate levels. Parameters ---------- order : list of int or list of str List representing new level order. Reference level by number (position) or by key (label). axis : {0 or 'index', 1 or 'columns'}, default 0 Where to reorder levels. Returns ------- DataFrame Examples -------- >>> data = { ... ""class"": [""Mammals"", ""Mammals"", ""Reptiles""], ... ""diet"": [""Omnivore"", ""Carnivore"", ""Carnivore""], ... ""species"": [""Humans"", ""Dogs"", ""Snakes""], ... } >>> df = pd.DataFrame(data, columns=[""class"", ""diet"", ""species""]) >>> df = df.set_index([""class"", ""diet""]) >>> df species class diet Mammals Omnivore Humans Carnivore Dogs Reptiles"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
info patchlevel,Returns the exact version of the Tcl library.
register module,Alias for :func:`add_module`.
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
winfo height,Return height of this widget.
sort values,"Sort by the values along either axis. Parameters ---------- by : str or list of str Name or list of names to sort by. - if `axis` is 0 or `'index'` then `by` may contain index levels and/or column labels. - if `axis` is 1 or `'columns'` then `by` may contain column levels and/or index labels. axis : {0 or 'index', 1 or 'columns'}, default 0 Axis to be sorted. ascending : bool or list of bool, default True Sort ascending vs. descending. Specify list for multiple sort orders. If this is a list of bools, must match the length"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
clipboard get,"Retrieve data from the clipboard on window's display.

The window keyword defaults to the root window of the Tkinter
application.

The type keyword specifies the form in which the data is
to be returned and should be an atom name such as STRING
or FILE_NAME.  Type defaults to STRING, except on X11, where the default
is to try UTF8_STRING and fall back to STRING.

This command is equivalent to:

selection_get(CLIPBOARD)"
register module,Alias for :func:`add_module`.
tk focusNext,"Return the next widget in the focus order which follows
widget which has currently the focus.

The focus order first goes to the next child, then to
the children of the child recursively and then to the
next sibling which is higher in the stacking order.  A
widget is omitted if it has the takefocus resource set
to 0."
pretty format,":return: A multi-line string representation of this confusion matrix.
:type truncate: int
:param truncate: If specified, then only show the specified
    number of values.  Any sorting (e.g., sort_by_count)
    will be performed before truncation.
:param sort_by_count: If true, then sort by the count of each
    label in the reference data.  I.e., labels that occur more
    frequently in the reference label will be towards the left
    edge of the matrix, and labels that occur less frequently
    will be towards the right edge.

@todo: add marginals?"
 dataclass schema,Generate schema for a dataclass.
 maybe promote,"When dealing with an object-dtype Index and a non-object Index, see
if we can upcast the object-dtype one to improve performance."
select pipes,"Disable one or more pipeline components. If used as a context
manager, the pipeline will be restored to the initial state at the end
of the block. Otherwise, a DisabledPipes object is returned, that has
a `.restore()` method you can use to undo your changes.

disable (str or iterable): The name(s) of the pipes to disable
enable (str or iterable): The name(s) of the pipes to enable - all others will be disabled

DOCS: https://spacy.io/api/language#select_pipes"
has predecessor,"Returns True if node u has predecessor v.

This is true if graph has the edge u<-v."
is lexical,Return True if all productions are lexicalised.
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
 dir deletions,Delete unwanted __dir__ for this object.
 maybe update cacher,See NDFrame._maybe_update_cacher.__doc__
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
 union,"Form the union of two Index objects and sorts if possible

Parameters
----------
other : Index or array-like

sort : False or None, default None
    Whether to sort (monotonically increasing) the resulting index.
    ``sort=None`` returns a ``RangeIndex`` if possible or a sorted
    ``Int64Index`` if not.
    ``sort=False`` can return a ``RangeIndex`` if self is monotonically
    increasing and other is fully contained in self. Otherwise, returns
    an unsorted ``Int64Index``

    .. versionadded:: 0.25.0

Returns
-------
union : Index"
 context,"One left & one right token, both case-normalized.  Skip over
non-sentence-final punctuation.  Used by the ``ContextIndex``
that is created for ``similar()`` and ``common_contexts()``."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
pack forget,Unmap this widget and do not use it for the packing order.
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
is integer,Check if the Index only consists of integers. Returns ------- bool Whether or not the Index only consists of integers. See Also -------- is_boolean : Check if the Index only consists of booleans. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
trace remove,"Delete the trace callback for a variable.

Mode is one of ""read"", ""write"", ""unset"" or a list or tuple of
such strings.  Must be same as were specified in trace_add().
cbname is the name of the callback returned from trace_add()."
require group,"Return a group, creating it if it doesn't exist.

TypeError is raised if something with that name already exists that
isn't a group."
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
refine names,"Refines the dimension names of :attr:`self` according to :attr:`names`. Refining is a special case of renaming that ""lifts"" unnamed dimensions. A ``None`` dim can be refined to have any name; a named dim can only be refined to have the same name. Because named tensors can coexist with unnamed tensors, refining names gives a nice way to write named-tensor-aware code that works with both named and unnamed tensors. :attr:`names` may contain up to one Ellipsis (``...``). The Ellipsis is expanded greedily; it is expanded in-place to fill :attr:`names` to the same length as ``self.dim()`` using names from the corresponding indices"
retract assumptions,"Retract assumptions from the assumption list.

:param debug: If True, give warning when ``retracted`` is not present on
assumptions list.
:type debug: bool
:param retracted: assumptions to be retracted
:type retracted: list(sem.Expression)"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
to pydatetime,"Return an ndarray of datetime.datetime objects.

Returns
-------
datetimes : ndarray[object]"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 lemmatize,Use morphy from WordNet to find the base form of verbs.
share memory,See :meth:`torch.Tensor.share_memory_`
 view,"fastpath to make a shallow copy, i.e. new object with same data."
 asdict,Return a new dict which maps field names to their values.
is atom,"Is this expression an atom (as opposed to a lambda expression applied
to a term)?"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
bigram finder,"Constructs a bigram collocation finder with the bigram and unigram
data from this finder. Note that this does not include any filtering
applied to this finder."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo pathname,Return the pathname of the widget given by ID.
is binarised,"Return True if all productions are at most binary.
Note that there can still be empty and unary productions."
complex double,Casts this storage to complex double type
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
save for backward,"Saves given tensors for a future call to :func:`~Function.backward`. ``save_for_backward`` should be called at most once, only from inside the :func:`forward` method, and only with tensors. All tensors intended to be used in the backward pass should be saved with ``save_for_backward`` (as opposed to directly on ``ctx``) to prevent incorrect gradients and memory leaks, and enable the application of saved tensor hooks. See :class:`torch.autograd.graph.saved_tensors_hooks`. Note that if intermediary tensors, tensors that are neither inputs nor outputs of :func:`forward`, are saved for backward, your custom Function may not support double backward. Custom Functions that do not support double backward should decorate"
winfo children,Return a list of all widgets which are children of this widget.
 prove,":return: Whether the proof was successful or not, along with the proof
:rtype: tuple: (bool, str)"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
record once,"Works like :meth:`record` but wraps the function in another
function that will ensure the function is only called once.  If the
blueprint is registered a second time on the application, the
function passed is not called."
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
initialize parameters,"Initialize parameters according to the input batch properties.
This adds an interface to isolate parameter initialization from the
forward pass when doing parameter shape inference."
get adapter,"Returns the appropriate connection adapter for the given URL.

:rtype: requests.adapters.BaseAdapter"
 ne,"This just assumes that words in all caps or titles are
named entities.

:type token: str"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 cmp method,Wrapper used to dispatch comparison operations.
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
winfo reqwidth,Return requested width of this widget.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 convert slice indexer,"Convert a slice indexer.

By definition, these are labels unless 'iloc' is passed in.
Floats are not allowed as the start, step, or stop of the slice.

Parameters
----------
key : label of the slice bound
kind : {'loc', 'getitem'}"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 init dict,"Derive the ""_mgr"" and ""index"" attributes of a new Series from a
dictionary input.

Parameters
----------
data : dict or dict-like
    Data used to populate the new Series.
index : Index or None, default None
    Index for the new Series: if None, use dict keys.
dtype : np.dtype, ExtensionDtype, or None, default None
    The dtype for the new Series: if None, infer from data.

Returns
-------
_data : BlockManager for the new Series
index : index for the new Series"
tk focusPrev,Return previous widget in the focus order. See tk_focusNext for details.
share memory,See :meth:`torch.Tensor.share_memory_`
to csv,"Write object to a comma-separated values (csv) file. Parameters ---------- path_or_buf : str, path object, file-like object, or None, default None String, path object (implementing os.PathLike[str]), or file-like object implementing a write() function. If None, the result is returned as a string. If a non-binary file object is passed, it should be opened with `newline=''`, disabling universal newlines. If a binary file object is passed, `mode` might need to contain a `'b'`. .. versionchanged:: 1.2.0 Support for binary file objects was introduced. sep : str, default ',' String of length 1. Field delimiter for the output file. na_rep : str,"
parse all,:rtype: list(Tree)
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
is suburi,"Check if test is below base in a URI tree

Both args must be URIs in reduced form."
 set item,"Add series to DataFrame in specified column.

If series is a numpy-array (not a Series/TimeSeries), it must be the
same length as the DataFrames index or an error will be thrown.

Series/TimeSeries will be conformed to the DataFrames index to
ensure homogeneity."
share memory,See :meth:`torch.Tensor.share_memory_`
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 convert slice indexer,"Convert a slice indexer.

By definition, these are labels unless 'iloc' is passed in.
Floats are not allowed as the start, step, or stop of the slice.

Parameters
----------
key : label of the slice bound
kind : {'loc', 'getitem'}"
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
winfo reqheight,Return requested height of this widget.
 get item by idx,Get the idx-th item of the iterator
option get,"Return the value for an option NAME for this widget
with CLASSNAME.

Values with higher priority override lower values."
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
find closest,"Return item which is closest to pixel at X, Y.
If several match take the top-most.
All items closer than HALO are considered overlapping (all are
closest). If START is specified the next below this tag is taken."
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
parse all,:rtype: list(Tree)
set axis,"Assign desired index to given axis. Indexes for column or row labels can be changed by assigning a list-like or Index. Parameters ---------- labels : list-like, Index The values for the new index. axis : {0 or 'index', 1 or 'columns'}, default 0 The axis to update. The value 0 identifies the rows. For `Series` this parameter is unused and defaults to 0. inplace : bool, default False Whether to return a new DataFrame instance. .. deprecated:: 1.5.0 copy : bool, default True Whether to make a copy of the underlying data. .. versionadded:: 1.5.0 Returns ------- renamed : DataFrame"
 to unicode,"Given a string and its encoding, decodes the string into Unicode.

:param encoding: The name of an encoding."
retract bindings,:see: ``nltk.featstruct.retract_bindings()``
enable pipe,"Enable a previously disabled pipeline component so it's run as part
of the pipeline. Does nothing if the component is already enabled.

name (str): The name of the component to enable."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
rebuild proxies,"This method re-evaluates the proxy configuration by considering the
environment variables. If we are redirected to a URL covered by
NO_PROXY, we strip the proxy configuration. Otherwise, we set missing
proxy keys for this URL (in case they were stripped by a previous
redirect).

This method also replaces the Proxy-Authorization header where
necessary.

:rtype: dict"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
winfo depth,Return the number of bits per pixel.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 train,"Build a new classifier, based on the given training data
*tagged_corpus*."
trace info,Return all trace callback information.
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
info patchlevel,Returns the exact version of the Tcl library.
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
select as multiple,"Retrieve pandas objects from multiple tables. .. warning:: Pandas uses PyTables for reading and writing HDF5 files, which allows serializing object-dtype data with pickle when using the ""fixed"" format. Loading pickled data received from untrusted sources can be unsafe. See: https://docs.python.org/3/library/pickle.html for more. Parameters ---------- keys : a list of the tables selector : the table to apply the where criteria (defaults to keys[0] if not supplied) columns : the columns I want back start : integer (defaults to None), row number to start selection stop : integer (defaults to None), row number to stop selection iterator : bool, return"
 set node,Outdated method to set the node value; use the set_label() method instead.
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
winfo colormapfull,Return True if at the last color request the colormap was full.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
set flags,"Return a new object with updated flags. Parameters ---------- allows_duplicate_labels : bool, optional Whether the returned object allows duplicate labels. Returns ------- Series or DataFrame The same type as the caller. See Also -------- DataFrame.attrs : Global metadata applying to this dataset. DataFrame.flags : Global flags applying to this object. Notes ----- This method returns a new object that's a view on the same data as the input. Mutating the input or the output values will be reflected in the other. This method is intended to be used in method chains. ""Flags"" differ from ""metadata"". Flags reflect properties of the"
grid remove,Unmap this widget but remember the grid options.
memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
winfo id,Return identifier ID for this widget.
winfo toplevel,Return the toplevel widget of this widget.
winfo class,Return window class name of this widget.
 more tags,Tags used for scikit-learn data validation.
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
winfo pointerx,Return the x coordinate of the pointer on the root window.
create group,"Create and return a new subgroup.

Name may be absolute or relative.  Fails if the target name already
exists.

track_order
    Track dataset/group/attribute creation order under this group
    if True. If None use global default h5.get_config().track_order."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 call interpformat,"Call the ``interpformat`` binary with the given input.

:param input_str: A string whose contents are used as stdin.
:param args: A list of command-line arguments.
:return: A tuple (stdout, returncode)
:see: ``config_prover9``"
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
unbind all,Unbind for all widgets for event SEQUENCE all functions.
weighted kappa,Cohen 1968
 needs reindex multi,"Check if we do need a multi reindex; this is for compat with
higher dims."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
get score,Get feature importance of each feature. Importance type can be defined as: * 'weight': the number of times a feature is used to split the data across all trees. * 'gain': the average gain across all splits the feature is used in. * 'cover': the average coverage across all splits the feature is used in. * 'total_gain': the total gain across all splits the feature is used in. * 'total_cover': the total coverage across all splits the feature is used in. .. note:: Feature importance is defined only for tree boosters Feature importance is only defined when the decision tree
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
to str,Write the config to a string.
select adjust,Adjust the end of the selection near the cursor to INDEX.
place slaves,"Return a list of all slaves of this widget
in its packing order."
 union,"Specific union logic should go here. In subclasses, union behavior
should be overwritten here rather than in `self.union`.

Parameters
----------
other : Index or array-like
sort : False or None, default False
    Whether to sort the resulting index.

    * False : do not sort the result.
    * None : sort the result, except when `self` and `other` are equal
      or when the values cannot be compared.

Returns
-------
Index"
raw tag sents,"Tag multiple sentences.

Takes multiple sentences as a list where each sentence is a string.

:param sentences: Input sentences to tag
:type sentences: list(str)
:rtype: list(list(list(tuple(str, str)))"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
 add constituents spanning,"Find any constituents that might cover ``span``, and add them to the most likely constituents table. :rtype: None :type span: tuple(int, int) :param span: The section of the text for which we are trying to find possible constituents. The span is specified as a pair of integers, where the first integer is the index of the first token that should be included in the constituent; and the second integer is the index of the first token that should not be included in the constituent. I.e., the constituent should cover ``text[span[0]:span[1]]``, where ``text`` is the text that we are parsing. :type"
winfo visualid,Return the X identifier for the visual for this widget.
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
add url rule,"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for
full documentation.

The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,
used with :func:`url_for`, is prefixed with the blueprint's name."
 from join target,"Cast the ndarray returned from one of the libjoin.foo_indexer functions
back to type(self)._data."
 span test,"Test whether the point `other` lies in the positive span of `self`.
A point x is 'in front' of a point y if x.dot(y) >= 0.  Return
-1 if `other` is behind `self.p1`, 0 if `other` is `self.p1` and
and 1 if `other` is in front of `self.p1`."
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 from join target,"Cast the ndarray returned from one of the libjoin.foo_indexer functions
back to type(self)._data."
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 find reentrances,"Return a dictionary that maps from the ``id`` of each feature
structure contained in ``self`` (including ``self``) to a
boolean value, indicating whether it is reentrant or not."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
 drop level numbers,"Drop MultiIndex levels by level _number_, not name."
 named members,Helper method for yielding various names + members of modules.
 validate indexer,"If we are positional indexer, validate that we have appropriate
typed bounds must be an integer."
after app request,"Like :meth:`after_request`, but after every request, not only those handled
by the blueprint. Equivalent to :meth:`.Flask.after_request`."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
option get,"Return the value for an option NAME for this widget
with CLASSNAME.

Values with higher priority override lower values."
 get data as items,"return a list of tuples of start, stop, step"
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
get link map,"get the link map, this is a bit hacky, call for better algorithm
to place similar nodes together"
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
tk focusPrev,Return previous widget in the focus order. See tk_focusNext for details.
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
 setup,Internal function. Sets up information about children.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 baseAssertEqual,"The default assertEqual implementation, not type specific."
state dict,"Returns the state of the optimizer as a :class:`dict`.

It contains two entries:

* state - a dict holding current optimization state. Its content
    differs between optimizer classes.
* param_groups - a list containing all parameter groups where each
    parameter group is a dict"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
winfo pixels,Rounded integer value of winfo_fpixels.
 check indexing method,Raise if we have a get_indexer `method` that is not supported or valid.
 named members,Helper method for yielding various names + members of modules.
prob classify,":return: a probability distribution over labels for the given
    featureset.
:rtype: ProbDistI"
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
 generate alias,"Generate an alias of the specified kind. Returns None if the alias generator is None.

Raises:
    TypeError: If the alias generator produces an invalid type."
 match rhs,":rtype: bool :return: true if the right hand side of a CFG production matches the rightmost elements of the stack. ``rhs`` matches ``rightmost_stack`` if they are the same length, and each element of ``rhs`` matches the corresponding element of ``rightmost_stack``. A nonterminal element of ``rhs`` matches any Tree whose node value is equal to the nonterminal's symbol. A terminal element of ``rhs`` matches any string whose type is equal to the terminal. :type rhs: list(terminal and Nonterminal) :param rhs: The right hand side of a CFG production. :type rightmost_stack: list(string and Tree) :param rightmost_stack: The rightmost elements of the parser's"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
rename ,In-place version of :meth:`~Tensor.rename`.
 reindex non unique,"Create a new index with target's values (move/add/delete values as
necessary) use with non-unique Index and a possibly non-unique target.

Parameters
----------
target : an iterable

Returns
-------
new_index : pd.Index
    Resulting index.
indexer : np.ndarray[np.intp]
    Indices of output values in original index.
new_indexer : np.ndarray[np.intp] or None"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 ensure sequence,"This method can be called by methods that need a sequence.  If
`mutable` is true, it will also ensure that the response sequence
is a standard Python list.

.. versionadded:: 0.6"
do q,"q(uit)
exit
Quit from the debugger. The program being executed is aborted."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 get nearest indexer,"Get the indexer for the nearest index labels; requires an index with
values that can be subtracted from each other (e.g., not strings or
tuples)."
 create training examples arc std,"Create the training example in the libsvm format and write it to the input_file.
Reference : Page 32, Chapter 3. Dependency Parsing by Sandra Kubler, Ryan McDonal and Joakim Nivre (2009)"
pack forget,Unmap this widget and do not use it for the packing order.
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
is file,"Whether this path is a regular file (also True for symlinks pointing
to regular files)."
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
 load form data,"Method used internally to retrieve submitted data.  After calling
this sets `form` and `files` on the request object to multi dicts
filled with the incoming form data.  As a matter of fact the input
stream will be empty afterwards.  You can also call this method to
force the parsing of the form data.

.. versionadded:: 0.8"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
principal value,"Compute the Cauchy Principal Value of the definite integral of a real function in the given interval on the real axis. Explanation =========== In mathematics, the Cauchy principal value, is a method for assigning values to certain improper integrals which would otherwise be undefined. Examples ======== >>> from sympy import oo >>> from sympy.integrals.integrals import Integral >>> from sympy.abc import x >>> Integral(x+1, (x, -oo, oo)).principal_value() oo >>> f = 1 / (x**3) >>> Integral(f, (x, -oo, oo)).principal_value() 0 >>> Integral(f, (x, -10, 10)).principal_value() 0 >>> Integral(f, (x, -10, oo)).principal_value() + Integral(f, (x, -oo, 10)).principal_value() 0 References ========== .. [1]"
 create training examples arc eager,"Create the training example in the libsvm format and write it to the input_file.
Reference : 'A Dynamic Oracle for Arc-Eager Dependency Parsing' by Joav Goldberg and Joakim Nivre"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
drop duplicates,"Return Index with duplicate values removed. Parameters ---------- keep : {'first', 'last', ``False``}, default 'first' - 'first' : Drop duplicates except for the first occurrence. - 'last' : Drop duplicates except for the last occurrence. - ``False`` : Drop all duplicates. Returns ------- deduplicated : Index See Also -------- Series.drop_duplicates : Equivalent method on Series. DataFrame.drop_duplicates : Equivalent method on DataFrame. Index.duplicated : Related method on Index, indicating duplicate Index values. Examples -------- Generate an pandas.Index with duplicate values. >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo']) The `keep` parameter controls which duplicate values are removed. The value 'first'"
 dir additions,Add additional __dir__ for this object.
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
 get node,Outdated method to access the node value; use the label() method instead.
remove unused categories,"Remove categories which are not used. Parameters ---------- inplace : bool, default False Whether or not to drop unused categories inplace or return a copy of this categorical with unused categories dropped. .. deprecated:: 1.2.0 Returns ------- cat : Categorical or None Categorical with unused categories dropped or None if ``inplace=True``. See Also -------- rename_categories : Rename categories. reorder_categories : Reorder categories. add_categories : Add new categories. remove_categories : Remove the specified categories. set_categories : Set the categories to the specified ones. Examples -------- >>> c = pd.Categorical(['a', 'c', 'b', 'c', 'd']) >>> c ['a', 'c', 'b', 'c', 'd'] Categories"
register module,Alias for :func:`add_module`.
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
wm transient,"Instruct the window manager that this widget is transient
with regard to widget MASTER."
share memory ,"Moves the storage to shared memory.

This is a no-op for storages already in shared memory and for CUDA
storages, which do not need to be moved for sharing across processes.
Storages in shared memory cannot be resized.

Returns: self"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 find common type compat,"Implementation of find_common_type that adjusts for Index-specific
special cases."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
storage type,"storage_type() -> type

Returns the type of the underlying storage."
winfo name,Return the name of this widget.
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
to numpy,"A NumPy ndarray representing the values in this Series or Index. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that a copy is made, even if not strictly necessary. na_value : Any, optional The value to use for missing values. The default value depends on `dtype` and the type of the array. .. versionadded:: 1.0.0 **kwargs Additional keywords passed through to the"
winfo pathname,Return the pathname of the widget given by ID.
parse all,:rtype: list(Tree)
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
build virtual dataset,"Assemble a virtual dataset in this group.

This is used as a context manager::

    with f.build_virtual_dataset('virt', (10, 1000), np.uint32) as layout:
        layout[0] = h5py.VirtualSource('foo.h5', 'data', (1000,))

name
    (str) Name of the new dataset
shape
    (tuple) Shape of the dataset
dtype
    A numpy dtype for data read from the virtual dataset
maxshape
    (tuple, optional) Maximum dimensions if the dataset can grow.
    Use None for unlimited dimensions.
fillvalue
    The value used where no data is available."
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
span tokenize,"Identify the tokens using integer offsets ``(start_i, end_i)``,
where ``s[start_i:end_i]`` is the corresponding token.

:rtype: iter(tuple(int, int))"
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
raw tag sents,"Tag multiple sentences.

Takes multiple sentences as a list where each sentence is a string.

:param sentences: Input sentences to tag
:type sentences: list(str)
:rtype: list(list(list(tuple(str, str)))"
app url value preprocessor,"Like :meth:`url_value_preprocessor`, but for every request, not only those
handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`."
is type compatible,Whether the index type is compatible with the provided type.
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo visualid,Return the X identifier for the visual for this widget.
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
is categorical,Check if the Index holds categorical data. Returns ------- bool True if the Index is categorical. See Also -------- CategoricalIndex : Index for categorical data. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples --------
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
do u,"u(p) [count]
Move the current frame count (default one) levels up in the
stack trace (to an older frame).

Will skip hidden frames."
pack info,"Return information about the packing options
for this widget."
get slice bound,"Calculate slice bound that corresponds to given label.

Returns leftmost (one-past-the-rightmost if ``side=='right'``) position
of given label.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.4.0

Returns
-------
int
    Index of label."
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
winfo atomname,Return name of atom with identifier ID.
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
 getitem slice,Fastpath for __getitem__ when we know we have a slice.
register module,Alias for :func:`add_module`.
tag bind,"Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.

An additional boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or whether it will
replace the previous function. See bind for the return value."
winfo visualid,Return the X identifier for the visual for this widget.
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
 expand,":rtype: iter(Tree) :return: An iterator of all parses that can be generated by expanding the first element of ``frontier`` with ``production``. In particular, if the first element of ``frontier`` is a subtree whose node type is equal to ``production``'s left hand side, then add a child to that subtree for each element of ``production``'s right hand side; and return all parses that can be generated by matching and expanding the remaining elements of ``frontier``. If the first element of ``frontier`` is not a subtree whose node type is equal to ``production``'s left hand side, then return an empty list. If"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 intersection via get indexer,"Find the intersection of two Indexes using get_indexer.

Returns
-------
np.ndarray or ExtensionArray
    The returned array will be unique."
find overlapping,"Return all items which overlap the rectangle
defined by X1,Y1,X2,Y2."
on event,"Add an event handler for the router.

`on_event` is deprecated, use `lifespan` event handlers instead.

Read more about it in the
[FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated)."
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
set label,"Set the node label.  This will only succeed the first time the
node label is set, which should occur in ImmutableTree.__init__()."
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
 reduce,Perform the reduction type operation if we can.
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 getconfigure,Call Tcl configure command and return the result as a dict.
handle endtag,"Called by the tree builder when an ending tag is encountered.

:param name: Name of the tag.
:param nsprefix: Namespace prefix for the tag."
winfo id,Return identifier ID for this widget.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 get agg axis,Let's be explicit about this.
to orc,"Write a DataFrame to the ORC format. .. versionadded:: 1.5.0 Parameters ---------- path : str, file-like object or None, default None If a string, it will be used as Root Directory path when writing a partitioned dataset. By file-like object, we refer to objects with a write() method, such as a file handle (e.g. via builtin open function). If path is None, a bytes object is returned. engine : str, default 'pyarrow' ORC library to use. Pyarrow must be >= 7.0.0. index : bool, optional If ``True``, include the dataframe's index(es) in the file output. If ``False``, they will not"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
winfo parent,Return the name of the parent of this widget.
wm resizable,"Instruct the window manager whether this width can be resized
in WIDTH or HEIGHT. Both values are boolean values."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
 reduce,"Return a scalar result of performing the reduction operation.

Parameters
----------
name : str
    Name of the function, supported values are:
    { any, all, min, max, sum, mean, median, prod,
    std, var, sem, kurt, skew }.
skipna : bool, default True
    If True, skip NaN values.
**kwargs
    Additional keyword arguments passed to the reduction function.
    Currently, `ddof` is the only supported kwarg.

Returns
-------
scalar

Raises
------
TypeError : subclass does not define reductions"
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
is block device,Whether this path is a block device.
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
 intersection,intersection specialized to the case with matching dtypes.
 info repr,True if the repr should show the info view.
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
get dump,"Returns the model dump as a list of strings.  Unlike `save_model`, the
output format is primarily used for visualization or interpretation,
hence it's more human readable but cannot be loaded back to XGBoost.

Parameters
----------
fmap : string or os.PathLike, optional
    Name of the file containing feature map names.
with_stats : bool, optional
    Controls whether the split statistics are output.
dump_format : string, optional
    Format of model dump. Can be 'text', 'json' or 'dot'."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
construct array type,"Return the array type associated with this dtype.

Returns
-------
type"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
to flat index,"Identity method.

This is implemented for compatibility with subclass implementations
when chaining.

Returns
-------
pd.Index
    Caller.

See Also
--------
MultiIndex.to_flat_index : Subclass implementation."
 second pass annotation,"Performs token-based classification over a pair of contiguous tokens
updating the first."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
is nonlexical,"Return True if the right-hand side only contains ``Nonterminals``

:rtype: bool"
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
pin memory,"Coppies the  storage to pinned memory, if it's not already pinned."
winfo visualid,Return the X identifier for the visual for this widget.
winfo toplevel,Return the toplevel widget of this widget.
 drop level numbers,"Drop MultiIndex levels by level _number_, not name."
winfo cells,Return number of cells in the colormap for this widget.
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
 maybe disable logical methods,raise if this Index subclass does not support any or all.
 lazy load hook,"load_state_dict pre-hook function for lazy buffers and parameters.

The purpose of this hook is to adjust the current state and/or
``state_dict`` being loaded so that a module instance serialized in
both un/initialized state can be deserialized onto both un/initialized
module instance.
See comment in ``torch.nn.Module._register_load_state_dict_pre_hook``
for the details of the hook specification."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
make config,"Used to create the config attribute by the Flask constructor.
The `instance_relative` parameter is passed in from the constructor
of Flask (there named `instance_relative_config`) and indicates if
the config should be relative to the instance path or the root path
of the application.

.. versionadded:: 0.8"
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
select column,"return a single column from the table. This is generally only useful to select an indexable .. warning:: Pandas uses PyTables for reading and writing HDF5 files, which allows serializing object-dtype data with pickle when using the ""fixed"" format. Loading pickled data received from untrusted sources can be unsafe. See: https://docs.python.org/3/library/pickle.html for more. Parameters ---------- key : str column : str The column of interest. start : int or None, default None stop : int or None, default None Raises ------ raises KeyError if the column is not found (or key is not a valid store) raises ValueError if the"
 show threads,Print out the value of ``self._threads`` or ``self._filtered_hreads``
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
register module,Alias for :func:`add_module`.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
place info,"Return information about the placing options
for this widget."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
grid slaves,"Return a list of all slaves of this widget
in its packing order."
winfo manager,Return the window manager name for this widget.
indexer at time,"Return index locations of values at particular time of day.

Parameters
----------
time : datetime.time or str
    Time passed in either as object (datetime.time) or as string in
    appropriate format (""%H:%M"", ""%H%M"", ""%I:%M%p"", ""%I%M%p"",
    ""%H:%M:%S"", ""%H%M%S"", ""%I:%M:%S%p"", ""%I%M%S%p"").

Returns
-------
np.ndarray[np.intp]

See Also
--------
indexer_between_time : Get index locations of values between particular
    times of day.
DataFrame.at_time : Select values at particular time of day."
add signed vba project,"Add a vbaProject binary and a vbaProjectSignature binary to the
Excel workbook.

Args:
    vba_project:           The vbaProject binary file name.
    signature:             The vbaProjectSignature binary file name.
    project_is_stream:     vba_project is an in memory byte stream.
    signature_is_stream:   signature is an in memory byte stream.

Returns:
    Nothing."
find withtag,Return all items with TAGORID.
winfo atomname,Return name of atom with identifier ID.
register module,Alias for :func:`add_module`.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
grid size,Return a tuple of the number of column and rows in the grid.
 set names,"Set new names on index. Each name has to be a hashable type.

Parameters
----------
values : str or sequence
    name(s) to set
level : int, level name, or sequence of int/level names (default None)
    If the index is a MultiIndex (hierarchical), level(s) to set (None
    for all levels).  Otherwise level must be None

Raises
------
TypeError if each name is not hashable."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
pack slaves,"Return a list of all slaves of this widget
in its packing order."
value counts,"Return a Series containing counts of each category.

Every category will have an entry, even those with a count of 0.

Parameters
----------
dropna : bool, default True
    Don't include counts of NaN.

Returns
-------
counts : Series

See Also
--------
Series.value_counts"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
share memory,See :meth:`torch.Tensor.share_memory_`
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
wm protocol,"Bind function FUNC to command NAME for this widget.
Return the function bound to NAME if None is given. NAME could be
e.g. ""WM_SAVE_YOURSELF"" or ""WM_DELETE_WINDOW""."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 named members,Helper method for yielding various names + members of modules.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo colormapfull,Return True if at the last color request the colormap was full.
un chomsky normal form,"This method modifies the tree in three ways: 1. Transforms a tree in Chomsky Normal Form back to its original structure (branching greater than two) 2. Removes any parent annotation (if it exists) 3. (optional) expands unary subtrees (if previously collapsed with collapseUnary(...) ) :param expandUnary: Flag to expand unary or not (default = True) :type expandUnary: bool :param childChar: A string separating the head node from its children in an artificial node (default = ""|"") :type childChar: str :param parentChar: A string separating the node label from its parent annotation (default = ""^"") :type parentChar: str :param unaryChar: A"
 map values,"An internal function that maps values using the input
correspondence (which can be a dict, Series, or function).

Parameters
----------
mapper : function, dict, or Series
    The input correspondence object
na_action : {None, 'ignore'}
    If 'ignore', propagate NA values, without passing them to the
    mapping function

Returns
-------
Union[Index, MultiIndex], inferred
    The output of the mapping function applied to the index.
    If the function returns a tuple with more than one element
    a MultiIndex will be returned."
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
pack slaves,"Return a list of all slaves of this widget
in its packing order."
do teardown request,"Called after the request is dispatched and the response is
returned, right before the request context is popped.

This calls all functions decorated with
:meth:`teardown_request`, and :meth:`Blueprint.teardown_request`
if a blueprint handled the request. Finally, the
:data:`request_tearing_down` signal is sent.

This is called by
:meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,
which may be delayed during testing to maintain access to
resources.

:param exc: An unhandled exception raised while dispatching the
    request. Detected from the current exception information if
    not passed. Passed to each teardown function.

.. versionchanged:: 0.9
    Added the ``exc`` argument."
is numeric,Check if the Index only consists of numeric data. Returns ------- bool Whether or not the Index only consists of numeric data. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
register module,Alias for :func:`add_module`.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
winfo depth,Return the number of bits per pixel.
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 repr,"Return a string representation of this feature structure.

:param reentrances: A dictionary that maps from the ``id`` of
    each feature value in self, indicating whether that value
    is reentrant or not.
:param reentrance_ids: A dictionary mapping from each ``id``
    of a feature value to a unique identifier.  This is modified
    by ``repr``: the first time a reentrant feature value is
    displayed, an identifier is added to ``reentrance_ids`` for it."
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
winfo exists,Return true if this widget exists.
grid size,Return a tuple of the number of column and rows in the grid.
 eval rewrite as Heaviside,Rewrites a Singularity Function expression using Heavisides and DiracDeltas.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
tag cget,Return the value of OPTION for tag TAGNAME.
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 matches prefix or glob option,"Check if the given name matches the prefix or glob-pattern defined
in ini configuration."
winfo toplevel,Return the toplevel widget of this widget.
winfo exists,Return true if this widget exists.
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
winfo pathname,Return the pathname of the widget given by ID.
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
symlink to,"Make this path a symlink pointing to the target path.
Note the order of arguments (link, target) is the reverse of os.symlink."
 prune,Discard items in the queue if the queue is longer than the beam.
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
get attribute list,"The same as get(), but always returns a list.

:param key: The attribute to look for.
:param default: Use this value if the attribute is not present
    on this PageElement.
:return: A list of values, probably containing only a single
    value."
nbunch iter,"Returns an iterator over nodes contained in nbunch that are also in the graph. The nodes in nbunch are checked for membership in the graph and if not are silently ignored. Parameters ---------- nbunch : single node, container, or all nodes (default= all nodes) The view will only report edges incident to these nodes. Returns ------- niter : iterator An iterator over nodes in nbunch that are also in the graph. If nbunch is None, iterate over all nodes in the graph. Raises ------ NetworkXError If nbunch is not a node or sequence of nodes. If a node in nbunch"
choose tag,"Decide which tag should be used for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, return None -- do not consult
the backoff tagger.  This method should be overridden by
subclasses of SequentialBackoffTagger.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
to perioddelta,"Calculate deltas between self values and self converted to Periods at a freq.

Used for vectorized offsets.

Parameters
----------
freq : Period frequency

Returns
-------
TimedeltaArray/Index"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
trace add,"Define a trace callback for the variable.

Mode is one of ""read"", ""write"", ""unset"", or a list or tuple of
such strings.
Callback must be a function which is called when the variable is
read, written or unset.

Return the name of the callback."
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
add background,"Add a list of background assumptions for reasoning about the discourse.

When called,  this method also updates the discourse model's set of readings and threads.
:param background: Formulas which contain background information
:type background: list(Expression)"
app context processor,"Like :meth:`context_processor`, but for templates rendered by every view, not
only by the blueprint. Equivalent to :meth:`.Flask.context_processor`."
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
inplace predict,"Run prediction in-place, Unlike ``predict`` method, inplace prediction does not cache the prediction result. Calling only ``inplace_predict`` in multiple threads is safe and lock free. But the safety does not hold when used in conjunction with other methods. E.g. you can't train the booster in one thread and perform prediction in the other. .. code-block:: python booster.set_param({'predictor': 'gpu_predictor'}) booster.inplace_predict(cupy_array) booster.set_param({'predictor': 'cpu_predictor}) booster.inplace_predict(numpy_array) .. versionadded:: 1.1.0 Parameters ---------- data : numpy.ndarray/scipy.sparse.csr_matrix/cupy.ndarray/ cudf.DataFrame/pd.DataFrame The input data, must not be a view for numpy array. Set ``predictor`` to ``gpu_predictor`` for running prediction on CuPy array or CuDF DataFrame. iteration_range : See :py:meth:`xgboost.Booster.predict` for"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 from join target,"Cast the ndarray returned from one of the libjoin.foo_indexer functions
back to type(self)._data."
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
state dict,"Returns the state of the optimizer as a :class:`dict`.

It contains two entries:

* state - a dict holding current optimization state. Its content
    differs between optimizer classes.
* param_groups - a list containing all parameter groups where each
    parameter group is a dict"
 iter column arrays,"Iterate over the arrays of all columns in order.
This returns the values as stored in the Block (ndarray or ExtensionArray).

Warning! The returned array is a view but doesn't handle Copy-on-Write,
so this should be used with caution (for read-only purposes)."
share memory ,"Moves the storage to shared memory.

This is a no-op for storages already in shared memory and for CUDA
storages, which do not need to be moved for sharing across processes.
Storages in shared memory cannot be resized.

Returns: self"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
get indexer non unique,"Compute indexer and mask for new index given the current index.

The indexer should be then used as an input to ndarray.take to align the
current data to the new index.

Parameters
----------
target : Index

Returns
-------
indexer : np.ndarray[np.intp]
    Integers from 0 to n - 1 indicating that the index at these
    positions matches the corresponding target values. Missing values
    in the target are marked by -1.
missing : np.ndarray[np.intp]
    An indexer into the target of the values not found.
    These correspond to the -1 in the indexer array."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
winfo id,Return identifier ID for this widget.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
pin memory,"Coppies the  storage to pinned memory, if it's not already pinned."
 build index,"Build a list self._index such that self._index[i] is a list
of the alignments originating from word i."
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
show most informative features,":param show: all, neg, or pos (for negative-only or positive-only)
:type show: str
:param n: The no. of top features
:type n: int"
is type compatible,Whether the index type is compatible with the provided type.
gff list,"Computes greatest factorial factorization of ``f``.

Examples
========

>>> from sympy import Poly
>>> from sympy.abc import x

>>> f = x**5 + 2*x**4 - x**3 - 2*x**2

>>> Poly(f).gff_list()
[(Poly(x, x, domain='ZZ'), 1), (Poly(x + 2, x, domain='ZZ'), 4)]"
image types,Return a list of all available image types (e.g. photo bitmap).
winfo interps,Return the name of all Tcl interpreters for this display.
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo screen,Return the screen name of this widget.
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
winfo pathname,Return the pathname of the widget given by ID.
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
as ordered terms,"Transform an expression to an ordered list of terms.

Examples
========

>>> from sympy import sin, cos
>>> from sympy.abc import x

>>> (sin(x)**2*cos(x) + sin(x)**2 + 1).as_ordered_terms()
[sin(x)**2*cos(x), sin(x)**2, 1]"
 exc info to string,Converts a sys.exc_info()-style tuple of values into a string.
slice locs,"Compute slice locations for input labels.

Parameters
----------
start : label, default None
    If None, defaults to the beginning.
end : label, default None
    If None, defaults to the end.
step : int, defaults None
    If None, defaults to 1.
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.4.0

Returns
-------
start, end : int

See Also
--------
Index.get_loc : Get location for a single label.

Notes
-----
This method only works if the index is monotonic or unique.

Examples
--------
>>> idx = pd.Index(list('abcd'))
>>> idx.slice_locs(start='b', end='c')
(1, 3)"
 create storer,return a suitable class to operate
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
 eval is prime,An integer raised to the n(>=2)-th power cannot be a prime.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
do clear,"cl(ear) filename:lineno
cl(ear) [bpnumber [bpnumber...]]
        With a space separated list of breakpoint numbers, clear
        those breakpoints.  Without argument, clear all breaks (but
        first ask confirmation).  With a filename:lineno argument,
        clear all breaks at that line in that file.
        "
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
 nbytes,"return the number of bytes in the underlying data
deeply introspect the level data if deep=True

include the engine hashtable

*this is in internal routine*"
pack info,"Return information about the packing options
for this widget."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
set return,Stop when returning from the given frame.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
winfo exists,Return true if this widget exists.
add cascade,Add hierarchical menu item.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 call mace4,"Call the ``mace4`` binary with the given input.

:param input_str: A string whose contents are used as stdin.
:param args: A list of command-line arguments.
:return: A tuple (stdout, returncode)
:see: ``config_prover9``"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
 maybe promote,"When dealing with an object-dtype Index and a non-object Index, see
if we can upcast the object-dtype one to improve performance."
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
from ZZ python,Convert Python's ``int`` to Python's ``int``. 
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 drop level numbers,"Drop MultiIndex levels by level _number_, not name."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
is shared,"Checks if tensor is in shared memory.

This is always ``True`` for CUDA tensors."
 infer parameters,"Infers the size and initializes the parameters according to the
provided input batch.
Given a module that contains parameters that were declared inferrable
using :class:`torch.nn.parameter.ParameterMode.Infer`, runs a forward pass
in the complete module using the provided input to initialize all the parameters
as needed.
The module is set into evaluation mode before running the forward pass in order
to avoid saving statistics or calculating gradients"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
tk focusNext,"Return the next widget in the focus order which follows
widget which has currently the focus.

The focus order first goes to the next child, then to
the children of the child recursively and then to the
next sibling which is higher in the stacking order.  A
widget is omitted if it has the takefocus resource set
to 0."
wm iconwindow,"Set widget PATHNAME to be displayed instead of icon. Return the current
value if None is given."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
 format duplicate message,"Construct the DataFrame for a DuplicateLabelError.

This returns a DataFrame indicating the labels and positions
of duplicates in an index. This should only be called when it's
already known that duplicates are present.

Examples
--------
>>> idx = pd.Index(['a', 'b', 'a'])
>>> idx._format_duplicate_message()
    positions
label
a        [0, 2]"
 getitem slice,Fastpath for __getitem__ when we know we have a slice.
 reduce,"Find a CFG production whose right hand side matches the rightmost stack elements; and combine those stack elements into a single Tree, with the node specified by the production's left-hand side. If more than one CFG production matches the stack, then use the production that is listed earliest in the grammar. The new Tree replaces the elements in the stack. :rtype: Production or None :return: If a reduction is performed, then return the CFG production that the reduction is based on; otherwise, return false. :type stack: list(string and Tree) :param stack: A list of strings and Trees, encoding the structure"
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
 format data,Return the formatted data as a unicode string.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
classify many,"Apply ``self.classify()`` to each element of ``featuresets``.  I.e.:

    return [self.classify(fs) for fs in featuresets]

:rtype: list(label)"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
 equal,"Return True iff self and other have equal values.

:param visited_self: A set containing the ids of all ``self``
    feature structures we've already visited.
:param visited_other: A set containing the ids of all ``other``
    feature structures we've already visited.
:param visited_pairs: A set containing ``(selfid, otherid)`` pairs
    for all pairs of feature structures we've already visited."
app url defaults,"Like :meth:`url_defaults`, but for every request, not only those handled by
the blueprint. Equivalent to :meth:`.Flask.url_defaults`."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
grab current,"Return widget which has currently the grab in this application
or None."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
winfo atom,Return integer which represents atom NAME.
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
add param group,"Add a param group to the :class:`Optimizer` s `param_groups`.

This can be useful when fine tuning a pre-trained network as frozen layers can be made
trainable and added to the :class:`Optimizer` as training progresses.

Args:
    param_group (dict): Specifies what Tensors should be optimized along with group
        specific optimization options."
grid size,Return a tuple of the number of column and rows in the grid.
grab release,Release grab for this widget if currently set.
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
winfo atom,Return integer which represents atom NAME.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 inject kwargs,Add params to kws if they are accepted by func.
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
 maybe cast slice bound,"If label is a string, cast it to scalar type according to resolution.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

Returns
-------
label : object

Notes
-----
Value of `side` parameter should be validated in caller."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
validate python,"Validate a Python object against the model.

Args:
    object: The Python object to validate against the model.
    strict: Whether to strictly check types.
    from_attributes: Whether to extract data from object attributes.
    context: Additional context to pass to the validator.

!!! note
    When using `TypeAdapter` with a Pydantic `dataclass`, the use of the `from_attributes`
    argument is not supported.

Returns:
    The validated object."
unique consecutive,"Eliminates all but the first element from every consecutive group of equivalent elements.

See :func:`torch.unique_consecutive`"
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
initialize parameters,"Initialize parameters according to the input batch properties.
This adds an interface to isolate parameter initialization from the
forward pass when doing parameter shape inference."
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
winfo pointerx,Return the x coordinate of the pointer on the root window.
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
winfo height,Return height of this widget.
verb t5,stem the future tense prefixes
dispatch request,"Does the request dispatching.  Matches the URL and returns the
return value of the view or error handler.  This does not have to
be a response object.  In order to convert the return value to a
proper response object, call :func:`make_response`.

.. versionchanged:: 0.7
   This no longer does the exception handling, this code was
   moved to the new :meth:`full_dispatch_request`."
 transform index,"Apply function to all values found in index.

This includes transforming multiindex entries separately.
Only apply function to one level of the MultiIndex if level is specified."
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
select pipes,"Disable one or more pipeline components. If used as a context
manager, the pipeline will be restored to the initial state at the end
of the block. Otherwise, a DisabledPipes object is returned, that has
a `.restore()` method you can use to undo your changes.

disable (str or iterable): The name(s) of the pipes to disable
enable (str or iterable): The name(s) of the pipes to enable - all others will be disabled

DOCS: https://spacy.io/api/language#select_pipes"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 LancasterStemmer  isAcceptable,Determine if the word is acceptable for stemming.
share memory,See :meth:`torch.Tensor.share_memory_`
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
 set names,"Set new names on index. Each name has to be a hashable type.

Parameters
----------
values : str or sequence
    name(s) to set
level : int, level name, or sequence of int/level names (default None)
    If the index is a MultiIndex (hierarchical), level(s) to set (None
    for all levels).  Otherwise level must be None

Raises
------
TypeError if each name is not hashable."
winfo width,Return the width of this widget.
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 drop labels or levels,"Drop labels and/or levels for the given `axis`. For each key in `keys`: - (axis=0): If key matches a column label then drop the column. Otherwise if key matches an index level then drop the level. - (axis=1): If key matches an index label then drop the row. Otherwise if key matches a column level then drop the level. Parameters ---------- keys : str or list of str labels or levels to drop axis : int, default 0 Axis that levels are associated with (0 for index, 1 for columns) Returns ------- dropped: DataFrame Raises ------ ValueError if any `keys`"
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
winfo name,Return the name of this widget.
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
share memory,See :meth:`torch.Tensor.share_memory_`
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
is ,"More flexible, faster check like ``is`` but that works through views.

Note: this is *not* the same as ``Index.identical()``, which checks
that metadata is also the same.

Parameters
----------
other : object
    Other object to compare against.

Returns
-------
bool
    True if both have same underlying data, False otherwise.

See Also
--------
Index.identical : Works like ``Index.is_`` but also checks metadata."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 maybe cast listlike indexer,Analogue to maybe_cast_indexer for get_indexer instead of get_loc.
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
complex double,Casts this storage to complex double type
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
 validate names,"Handles the quirks of having a singular 'name' parameter for general
Index and plural 'names' parameter for MultiIndex."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
add separator,Add separator.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 addvariant,Create a more pretty-printable version of the assignment.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
 trace shift,"Print trace output displaying that a token has been shifted.

:rtype: None"
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
 get level names,Return a name or list of names with None replaced by the level number.
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
state dict,"Returns the state of the optimizer as a :class:`dict`.

It contains two entries:

* state - a dict holding current optimization state. Its content
    differs between optimizer classes.
* param_groups - a list containing all parameter groups where each
    parameter group is a dict"
 checker,"Check whether the provided array or dtype is of an integer dtype. Unlike in `is_any_int_dtype`, timedelta64 instances will return False. The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered as integer by this function. Parameters ---------- arr_or_dtype : array-like or dtype The array or dtype to check. Returns ------- boolean Whether or not the array or dtype is of an integer dtype and not an instance of timedelta64. Examples -------- >>> is_integer_dtype(str) False >>> is_integer_dtype(int) True >>> is_integer_dtype(float) False >>> is_integer_dtype(np.uint64) True >>> is_integer_dtype('int8') True >>> is_integer_dtype('Int8') True >>> is_integer_dtype(pd.Int8Dtype) True >>> is_integer_dtype(np.datetime64) False >>> is_integer_dtype(np.timedelta64) False >>> is_integer_dtype(np.array(['a', 'b']))"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
 get indexer non comparable,"Called from get_indexer or get_indexer_non_unique when the target
is of a non-comparable dtype.

For get_indexer lookups with method=None, get_indexer is an _equality_
check, so non-comparable dtypes mean we will always have no matches.

For get_indexer lookups with a method, get_indexer is an _inequality_
check, so non-comparable dtypes mean we will always raise TypeError.

Parameters
----------
target : Index
method : str or None
unique : bool, default True
    * True if called from get_indexer.
    * False if called from get_indexer_non_unique.

Raises
------
TypeError
    If doing an inequality check, i.e. method is not None."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
can be empty element,"Might a tag with this name be an empty-element tag? The final markup may or may not actually present this tag as self-closing. For instance: an HTMLBuilder does not consider a <p> tag to be an empty-element tag (it's not in HTMLBuilder.empty_element_tags). This means an empty <p> tag will be presented as ""<p></p>"", not ""<p/>"" or ""<p>"". The default implementation has no opinion about which tags are empty-element tags, so a tag will be presented as an empty-element tag if and only if it has no children. ""<foo></foo>"" will become ""<foo/>"", and ""<foo>bar</foo>"" will be left alone. :param tag_name: The"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo reqwidth,Return requested width of this widget.
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
set label,"Set the node label of the tree.

    >>> t = Tree.fromstring(""(S (NP (D the) (N dog)) (VP (V chased) (NP (D the) (N cat))))"")
    >>> t.set_label(""T"")
    >>> print(t)
    (T (NP (D the) (N dog)) (VP (V chased) (NP (D the) (N cat))))

:param label: the node label (typically a string)
:type label: any"
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
 repr png ,"Draws and outputs in PNG for ipython.
PNG is used instead of PDF, since it can be displayed in the qt console and
has wider browser support."
 link components,"Register 'listeners' within pipeline components, to allow them to
effectively share weights."
 getitem slice,Fastpath for __getitem__ when we know we have a slice.
 inplace method,Wrap arithmetic method to operate inplace.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 to dot,Dot representation of the aligned sentence
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
add graphs,Add many graphs to this GraphML document.
 calculate grammar forms,Pre-calculate of which form(s) the grammar is.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 repr png ,"Draws and outputs in PNG for ipython.
PNG is used instead of PDF, since it can be displayed in the qt console and
has wider browser support."
get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
winfo manager,Return the window manager name for this widget.
 reindex with indexers,allow_dups indicates an internal call here
to pytimedelta,"Return an ndarray of datetime.timedelta objects.

Returns
-------
timedeltas : ndarray[object]"
  str  ,Return str(self).
value counts,"Return a Series containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default. Parameters ---------- normalize : bool, default False If True then the object returned will contain the relative frequencies of the unique values. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. bins : int, optional Rather than count values, group them into half-open bins, a convenience for ``pd.cut``, only works with numeric data. dropna : bool, default True Don't include counts"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
register step post hook,"Register an optimizer step post hook which will be called after optimizer step.
It should have the following signature::

    hook(optimizer, args, kwargs) -> None

The ``optimizer`` argument is the optimizer instance being used.

Args:
    hook (Callable): The user defined hook to be registered.

Returns:
    :class:`torch.utils.hooks.RemoveableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
is skipped module,Return True if module_name matches any skip pattern.
  init  ,"val -> _TestClass object with associated value val.

>>> t = _TestClass(123)
>>> print(t.get())
123"
 trace shift,"Print trace output displaying that a token has been shifted.

:rtype: None"
 map values,"An internal function that maps values using the input
correspondence (which can be a dict, Series, or function).

Parameters
----------
mapper : function, dict, or Series
    The input correspondence object
na_action : {None, 'ignore'}
    If 'ignore', propagate NA values, without passing them to the
    mapping function

Returns
-------
Union[Index, MultiIndex], inferred
    The output of the mapping function applied to the index.
    If the function returns a tuple with more than one element
    a MultiIndex will be returned."
 get level names,Return a name or list of names with None replaced by the level number.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
un chomsky normal form,"This method modifies the tree in three ways: 1. Transforms a tree in Chomsky Normal Form back to its original structure (branching greater than two) 2. Removes any parent annotation (if it exists) 3. (optional) expands unary subtrees (if previously collapsed with collapseUnary(...) ) :param expandUnary: Flag to expand unary or not (default = True) :type expandUnary: bool :param childChar: A string separating the head node from its children in an artificial node (default = ""|"") :type childChar: str :param parentChar: A string separating the node label from its parent annotation (default = ""^"") :type parentChar: str :param unaryChar: A"
pack forget,Unmap this widget and do not use it for the packing order.
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo class,Return window class name of this widget.
 reindex non unique,"Create a new index with target's values (move/add/delete values as
necessary) use with non-unique Index and a possibly non-unique target.

Parameters
----------
target : an iterable

Returns
-------
new_index : pd.Index
    Resulting index.
indexer : np.ndarray[np.intp]
    Indices of output values in original index.
new_indexer : np.ndarray[np.intp] or None"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 eval rewrite as HeavisideDiracDelta,Rewrites a Singularity Function expression using Heavisides and DiracDeltas.
sash coord,"Return the current x and y pair for the sash given by index.

Index must be an integer between 0 and 1 less than the
number of panes in the panedwindow. The coordinates given are
those of the top left corner of the region containing the sash.
pathName sash dragto index x y This command computes the
difference between the given coordinates and the coordinates
given to the last sash coord command for the given sash. It then
moves that sash the computed difference. The return value is the
empty string."
set prob,"Set the probability associated with this object to ``prob``.

:param prob: The new probability
:type prob: float"
url defaults,"Callback function for URL defaults for all view functions of the
application.  It's called with the endpoint and values and should
update the values passed in place.

This is available on both app and blueprint objects. When used on an app, this
is called for every request. When used on a blueprint, this is called for
requests that the blueprint handles. To register with a blueprint and affect
every request, use :meth:`.Blueprint.app_url_defaults`."
share memory,See :meth:`torch.Tensor.share_memory_`
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
info patchlevel,Returns the exact version of the Tcl library.
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
grid forget,Unmap this widget.
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
complex double,Casts this storage to complex double type
 maybe check unique,"Check that an Index has no duplicates.

This is typically only called via
`NDFrame.flags.allows_duplicate_labels.setter` when it's set to
True (duplicates aren't allowed).

Raises
------
DuplicateLabelError
    When the index is not unique."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
from envvar,"Loads a configuration from an environment variable pointing to
a configuration file.  This is basically just a shortcut with nicer
error messages for this line of code::

    app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])

:param variable_name: name of the environment variable
:param silent: set to ``True`` if you want silent failure for missing
               files.
:return: ``True`` if the file was loaded successfully."
parse all,:rtype: list(Tree)
 svg,"Returns SVG path element for the Polygon.

Parameters
==========

scale_factor : float
    Multiplication factor for the SVG stroke-width.  Default is 1.
fill_color : str, optional
    Hex string for fill color. Default is ""#66cc99""."
  reduce  ,"-> (cls, state)"
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
 deprecate dti setop,"Deprecate setop behavior between timezone-aware DatetimeIndexes with
mismatched timezones."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
 getconfigure,Call Tcl configure command and return the result as a dict.
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
 decorate model,":param valuation_str: str with the model builder's output
:param format: str indicating the format for displaying
:return: str"
 eval rewrite as Add,"return Eq(L, R) as L - R. To control the evaluation of
the result set pass `evaluate=True` to give L - R;
if `evaluate=None` then terms in L and R will not cancel
but they will be listed in canonical order; otherwise
non-canonical args will be returned.

Examples
========

>>> from sympy import Eq, Add
>>> from sympy.abc import b, x
>>> eq = Eq(x + b, x - b)
>>> eq.rewrite(Add)
2*b
>>> eq.rewrite(Add, evaluate=None).args
(b, b, x, -x)
>>> eq.rewrite(Add, evaluate=False).args
(b, x, b, -x)"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo reqwidth,Return requested width of this widget.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 get indexer non comparable,"Called from get_indexer or get_indexer_non_unique when the target
is of a non-comparable dtype.

For get_indexer lookups with method=None, get_indexer is an _equality_
check, so non-comparable dtypes mean we will always have no matches.

For get_indexer lookups with a method, get_indexer is an _inequality_
check, so non-comparable dtypes mean we will always raise TypeError.

Parameters
----------
target : Index
method : str or None
unique : bool, default True
    * True if called from get_indexer.
    * False if called from get_indexer_non_unique.

Raises
------
TypeError
    If doing an inequality check, i.e. method is not None."
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
combine first,"Update null elements with value in the same location in 'other'. Combine two Series objects by filling null values in one Series with non-null values from the other Series. Result index will be the union of the two indexes. Parameters ---------- other : Series The value(s) to be used for filling null values. Returns ------- Series The result of combining the provided Series with the other object. See Also -------- Series.combine : Perform element-wise operation on two Series using a given function. Examples -------- >>> s1 = pd.Series([1, np.nan]) >>> s2 = pd.Series([3, 4, 5]) >>> s1.combine_first(s2) 0 1.0 1"
to sql,"Write records stored in a DataFrame to a SQL database. Databases supported by SQLAlchemy [1]_ are supported. Tables can be newly created, appended to, or overwritten. Parameters ---------- name : str Name of SQL table. con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection Using SQLAlchemy makes it possible to use any DB supported by that library. Legacy support is provided for sqlite3.Connection objects. The user is responsible for engine disposal and connection closure for the SQLAlchemy connectable See `here <https://docs.sqlalchemy.org/en/13/core/connections.html>`_. schema : str, optional Specify the schema (if database flavor supports this). If None, use default schema. if_exists : {'fail', 'replace',"
select adjust,Adjust the end of the selection near the cursor of an item TAGORID to index.
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
chart parse,"Return the final parse ``Chart`` from which all possible
parse trees can be extracted.

:param tokens: The sentence to be parsed
:type tokens: list(str)
:rtype: Chart"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
request context,"Create a :class:`~flask.ctx.RequestContext` representing a
WSGI environment. Use a ``with`` block to push the context,
which will make :data:`request` point at this request.

See :doc:`/reqcontext`.

Typically you should not call this from your own code. A request
context is automatically pushed by the :meth:`wsgi_app` when
handling a request. Use :meth:`test_request_context` to create
an environment and context instead of this method.

:param environ: a WSGI environment"
 finalize,"Called when we see the close brace -- checks for a slash feature,
and adds in default values."
get pipe config,"Get the config used to create a pipeline component.

name (str): The component name.
RETURNS (Config): The config used to create the pipeline component."
grab current,"Return widget which has currently the grab in this application
or None."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
trace remove,"Delete the trace callback for a variable.

Mode is one of ""read"", ""write"", ""unset"" or a list or tuple of
such strings.  Must be same as were specified in trace_add().
cbname is the name of the callback returned from trace_add()."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
 maybe cast listlike indexer,Analogue to maybe_cast_indexer for get_indexer instead of get_loc.
generate repp command,"This module generates the REPP command to be used at the terminal.

:param inputfilename: path to the input file
:type inputfilename: str"
is boolean,Check if the Index only consists of booleans. Returns ------- bool Whether or not the Index only consists of booleans. See Also -------- is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
option get,"Return the value for an option NAME for this widget
with CLASSNAME.

Values with higher priority override lower values."
pretty print,"Pretty-print this tree as ASCII or Unicode art.
For explanation of the arguments, see the documentation for
`nltk.treeprettyprinter.TreePrettyPrinter`."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
affine rank,"The affine rank of a set of points is the dimension
of the smallest affine space containing all the points.
For example, if the points lie on a line (and are not all
the same) their affine rank is 1.  If the points lie on a plane
but not a line, their affine rank is 2.  By convention, the empty
set has affine rank -1."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
evals result,"Return the evaluation results.

If **eval_set** is passed to the `fit` function, you can call
``evals_result()`` to get evaluation results for all passed **eval_sets**.
When **eval_metric** is also passed to the `fit` function, the
**evals_result** will contain the **eval_metrics** passed to the `fit` function.

Returns
-------
evals_result : dictionary

Example
-------

.. code-block:: python

    param_dist = {'objective':'binary:logistic', 'n_estimators':2}

    clf = xgb.XGBClassifier(**param_dist)

    clf.fit(X_train, y_train,
            eval_set=[(X_train, y_train), (X_test, y_test)],
            eval_metric='logloss',
            verbose=True)

    evals_result = clf.evals_result()

The variable **evals_result** will contain

.. code-block:: python

    {'validation_0': {'logloss': ['0.604835', '0.531479']},
    'validation_1': {'logloss': ['0.41965', '0.17686']}}"
complex float,Casts this storage to complex float type
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
 from join target,"Cast the ndarray returned from one of the libjoin.foo_indexer functions
back to type(self)._data."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
is shared,"Checks if tensor is in shared memory.

This is always ``True`` for CUDA tensors."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 maybe check unique,"Check that an Index has no duplicates.

This is typically only called via
`NDFrame.flags.allows_duplicate_labels.setter` when it's set to
True (duplicates aren't allowed).

Raises
------
DuplicateLabelError
    When the index is not unique."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
sort index,"Sort Series by index labels. Returns a new Series sorted by label if `inplace` argument is ``False``, otherwise updates the original series and returns None. Parameters ---------- axis : {0 or 'index'} Unused. Parameter needed for compatibility with DataFrame. level : int, optional If not None, sort on values in specified index level(s). ascending : bool or list-like of bools, default True Sort ascending vs. descending. When the index is a MultiIndex the sort direction can be controlled for each level individually. inplace : bool, default False If True, perform operation in-place. kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'"
 more tags,Tags used for scikit-learn data validation.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo visualid,Return the X identifier for the visual for this widget.
winfo colormapfull,Return True if at the last color request the colormap was full.
prepare headers,Prepares the given HTTP headers.
register module,Alias for :func:`add_module`.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
template global,"A decorator that is used to register a custom template global function.
You can specify a name for the global function, otherwise the function
name will be used. Example::

    @app.template_global()
    def double(n):
        return 2 * n

.. versionadded:: 0.10

:param name: the optional name of the global function, otherwise the
             function name will be used."
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
 create nodes and group,Create nodes from key and return group name.
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
winfo pointery,Return the y coordinate of the pointer on the root window.
 drop level numbers,"Drop MultiIndex levels by level _number_, not name."
eval approx,"Evaluate this complex root to the given precision.

This uses secant method and root bounds are used to both
generate an initial guess and to check that the root
returned is valid. If ever the method converges outside the
root bounds, the bounds will be made smaller and updated."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
place info,"Return information about the placing options
for this widget."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
winfo pixels,Rounded integer value of winfo_fpixels.
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
with suffix,"Return a new path with the file suffix changed.  If the path
has no suffix, add given suffix.  If the given suffix is an empty
string, remove the suffix from the path."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
to xarray,"Return an xarray object from the pandas object. Returns ------- xarray.DataArray or xarray.Dataset Data in the pandas structure converted to Dataset if the object is a DataFrame, or a DataArray if the object is a Series. See Also -------- DataFrame.to_hdf : Write DataFrame to an HDF5 file. DataFrame.to_parquet : Write a DataFrame to the binary parquet format. Notes ----- See the `xarray docs <https://xarray.pydata.org/en/stable/>`__ Examples -------- >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2), ... ('parrot', 'bird', 24.0, 2), ... ('lion', 'mammal', 80.5, 4), ... ('monkey', 'mammal', np.nan, 4)], ... columns=['name', 'class', 'max_speed', ... 'num_legs']) >>> df name class max_speed num_legs"
 get dcpl,"Get the property list containing virtual dataset mappings

If the destination filename wasn't known when the VirtualLayout was
created, it is handled here."
winfo screen,Return the screen name of this widget.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
 categories match up to permutation,"Returns True if categoricals are the same dtype
  same categories, and same ordered

Parameters
----------
other : Categorical

Returns
-------
bool"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
 validate index level,"Validate index level.

For single-level Index getting level number is a no-op, but some
verification must be done like in MultiIndex."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
winfo interps,Return the name of all Tcl interpreters for this display.
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 get indexer non comparable,"Called from get_indexer or get_indexer_non_unique when the target
is of a non-comparable dtype.

For get_indexer lookups with method=None, get_indexer is an _equality_
check, so non-comparable dtypes mean we will always have no matches.

For get_indexer lookups with a method, get_indexer is an _inequality_
check, so non-comparable dtypes mean we will always raise TypeError.

Parameters
----------
target : Index
method : str or None
unique : bool, default True
    * True if called from get_indexer.
    * False if called from get_indexer_non_unique.

Raises
------
TypeError
    If doing an inequality check, i.e. method is not None."
treeposition spanning leaves,":return: The tree position of the lowest descendant of this
    tree that dominates ``self.leaves()[start:end]``.
:raise ValueError: if ``end <= start``"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 reduce,"Find a CFG production whose right hand side matches the rightmost stack elements; and combine those stack elements into a single Tree, with the node specified by the production's left-hand side. If more than one CFG production matches the stack, then use the production that is listed earliest in the grammar. The new Tree replaces the elements in the stack. :rtype: Production or None :return: If a reduction is performed, then return the CFG production that the reduction is based on; otherwise, return false. :type stack: list(string and Tree) :param stack: A list of strings and Trees, encoding the structure"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
is nonlexical,"Return True if the right-hand side only contains ``Nonterminals``

:rtype: bool"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
winfo depth,Return the number of bits per pixel.
 named members,Helper method for yielding various names + members of modules.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
make conditional,"Make the response conditional to the request. This method works best if an etag was defined for the response already. The `add_etag` method can be used to do that. If called without etag just the date header is set. This does nothing if the request method in the request or environ is anything but GET or HEAD. For optimal performance when handling range requests, it's recommended that your response data object implements `seekable`, `seek` and `tell` methods as described by :py:class:`io.IOBase`. Objects returned by :meth:`~werkzeug.wsgi.wrap_file` automatically implement those methods. It does not remove the body of the response because that's"
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
do pdef,"Print the call signature for any callable object.

The debugger interface to %pdef"
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
expandable productions,":return: A list of all the productions for which expansions
    are available for the current parser state.
:rtype: list(Production)"
sentences from text legacy,"Given a text, generates the sentences in that text. Annotates all
tokens, rather than just those with possible sentence breaks. Should
produce the same results as ``sentences_from_text``."
grab current,"Return widget which has currently the grab in this application
or None."
grid remove,Unmap this widget but remember the grid options.
save model,"Save the model to a file.

The model is saved in an XGBoost internal format which is universal
among the various XGBoost interfaces. Auxiliary attributes of the
Python Booster object (such as feature names) will not be saved.

  .. note::

    See:

    https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html

Parameters
----------
fname : string
    Output file name"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
 eval det bareiss,"Compute matrix determinant using Bareiss' fraction-free
algorithm which is an extension of the well known Gaussian
elimination method. This approach is best suited for dense
symbolic matrices and will result in a determinant with
minimal number of fractions. It means that less term
rewriting is needed on resulting formulae.

Parameters
==========

iszerofunc : function, optional
    The function to use to determine zeros when doing an LU decomposition.
    Defaults to ``lambda x: x.is_zero``.

TODO: Implement algorithm for sparse matrices (SFF),
http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps."
selection clear,Clear the current X selection.
 take with is copy,"Internal version of the `take` method that sets the `_is_copy`
attribute to keep track of the parent dataframe (using in indexing
for the SettingWithCopyWarning).

See the docstring of `take` for full explanation of the parameters."
complex double,Casts this storage to complex double type
winfo atomname,Return name of atom with identifier ID.
wm aspect,"Instruct the window manager to set the aspect ratio (width/height)
of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
of the actual values if no argument is given."
 update tag positions,"Update _tag_positions to reflect the changes to tags that are
made by *rule*."
 divide to tokensequences,Divides the text into pseudosentences of fixed size
place info,"Return information about the placing options
for this widget."
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
value counts,"Return a Series containing counts of unique rows in the DataFrame. .. versionadded:: 1.1.0 Parameters ---------- subset : list-like, optional Columns to use when counting unique combinations. normalize : bool, default False Return proportions rather than frequencies. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. dropna : bool, default True Don’t include counts of rows that contain NA values. .. versionadded:: 1.3.0 Returns ------- Series See Also -------- Series.value_counts: Equivalent method on Series. Notes ----- The returned Series will have a MultiIndex with one level per input column. By default, rows"
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
  getstate  ,Helper for pickle.
find best fit,"Use simple linear regression to tune parameters self._slope and
self._intercept in the log-log space based on count and Nr(count)
(Work in log space to avoid floating point underflow.)"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
wm maxsize,"Set max WIDTH and HEIGHT for this widget. If the window is gridded
the values are given in grid units. Return the current values if None
is given."
get pipe meta,"Get the meta information for a given component name.

name (str): The component name.
RETURNS (FactoryMeta): The meta for the given component name."
 format attrs,"Return a list of tuples of the (attr,formatted_value)"
 format attrs,"Return a list of tuples of the (attr,formatted_value)."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
grid info,"Return information about the options
for positioning this widget in a grid."
col list,"Returns a column-sorted list of non-zero elements of the matrix.

Examples
========

>>> from sympy.matrices import SparseMatrix
>>> a=SparseMatrix(((1, 2), (3, 4)))
>>> a
Matrix([
[1, 2],
[3, 4]])
>>> a.CL
[(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]

See Also
========
sympy.matrices.sparse.MutableSparseMatrix.col_op
sympy.matrices.sparse.SparseMatrix.row_list"
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
winfo class,Return window class name of this widget.
register error handler,"Alternative error attach function to the :meth:`errorhandler`
decorator that is more straightforward to use for non decorator
usage.

.. versionadded:: 0.7"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 setup,Internal function. Sets up information about children.
grab release,Release grab for this widget if currently set.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
grid forget,Unmap this widget.
register module,Alias for :func:`add_module`.
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
is superset,"Returns True if ``self`` is a superset of ``other``.

Examples
========

>>> from sympy import Interval
>>> Interval(0, 0.5).is_superset(Interval(0, 1))
False
>>> Interval(0, 1).is_superset(Interval(0, 1, left_open=True))
True"
pack forget,Unmap this widget and do not use it for the packing order.
 validate fill value,Convert value to be insertable to underlying array.
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 validate indexer,"If we are positional indexer, validate that we have appropriate
typed bounds must be an integer."
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
share memory,See :meth:`torch.Tensor.share_memory_`
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 invalid indexer,Consistent invalid indexer message.
 join level,"The join method *only* affects the level of the resulting
MultiIndex. Otherwise it just exactly aligns the Index data to the
labels of the level in the MultiIndex.

If ```keep_order == True```, the order of the data indexed by the
MultiIndex will not be changed; otherwise, it will tie out
with `other`."
wm focusmodel,"Set focus model to MODEL. ""active"" means that this widget will claim
the focus itself, ""passive"" means that the window manager shall give
the focus. Return current focus model if MODEL is None."
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
pack slaves,"Return a list of all slaves of this widget
in its packing order."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
 init dict,"Derive the ""_mgr"" and ""index"" attributes of a new Series from a
dictionary input.

Parameters
----------
data : dict or dict-like
    Data used to populate the new Series.
index : Index or None, default None
    Index for the new Series: if None, use dict keys.
dtype : np.dtype, ExtensionDtype, or None, default None
    The dtype for the new Series: if None, infer from data.

Returns
-------
_data : BlockManager for the new Series
index : index for the new Series"
print concordance,"Print concordance lines given the query word.
:param word: The target word or phrase (a list of strings)
:type word: str or list
:param lines: The number of lines to display (default=25)
:type lines: int
:param width: The width of each line, in characters (default=80)
:type width: int
:param save: The option to save the concordance.
:type save: bool"
parse all,:rtype: list(Tree)
grab release,Release grab for this widget if currently set.
winfo id,Return identifier ID for this widget.
tight layout,Call fig.tight_layout within rect that exclude the legend.
window create,Create a window at INDEX.
 format duplicate message,"Construct the DataFrame for a DuplicateLabelError.

This returns a DataFrame indicating the labels and positions
of duplicates in an index. This should only be called when it's
already known that duplicates are present.

Examples
--------
>>> idx = pd.Index(['a', 'b', 'a'])
>>> idx._format_duplicate_message()
    positions
label
a        [0, 2]"
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
winfo reqwidth,Return requested width of this widget.
set logprob,"Set the log probability associated with this object to
``logprob``.  I.e., set the probability associated with this
object to ``2**(logprob)``.

:param logprob: The new log probability
:type logprob: float"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
convert dtypes,"Convert columns to best possible dtypes using dtypes supporting ``pd.NA``. .. versionadded:: 1.0.0 Parameters ---------- infer_objects : bool, default True Whether object dtypes should be converted to the best possible types. convert_string : bool, default True Whether object dtypes should be converted to ``StringDtype()``. convert_integer : bool, default True Whether, if possible, conversion can be done to integer extension types. convert_boolean : bool, defaults True Whether object dtypes should be converted to ``BooleanDtypes()``. convert_floating : bool, defaults True Whether, if possible, conversion can be done to floating extension types. If `convert_integer` is also True, preference will be give to integer"
as explicit,"Returns a dense Matrix with elements represented explicitly

Returns an object of type ImmutableDenseMatrix.

Examples
========

>>> from sympy import Identity
>>> I = Identity(3)
>>> I
I
>>> I.as_explicit()
Matrix([
[1, 0, 0],
[0, 1, 0],
[0, 0, 1]])

See Also
========
as_mutable: returns mutable Matrix type"
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
wm title,Set the title of this widget.
 named members,Helper method for yielding various names + members of modules.
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
share memory ,"Moves the underlying storage to shared memory.

This is a no-op if the underlying storage is already in shared memory
and for CUDA tensors. Tensors in shared memory cannot be resized."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo class,Return window class name of this widget.
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
to flat index,"Identity method.

This is implemented for compatibility with subclass implementations
when chaining.

Returns
-------
pd.Index
    Caller.

See Also
--------
MultiIndex.to_flat_index : Subclass implementation."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 get section ref,Get a single section reference.
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
winfo screenwidth,"Return the number of pixels of the width of the screen of
this widget in pixel."
get synsets,"Return a list of Synset objects for this word.

:param pos: A part-of-speech tag to filter upon. If ``None``, all
    synsets for all parts of speech will be loaded.

:rtype: list of Synsets

.. versionadded:: 0.7.0"
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
websocket route,"We no longer document this decorator style API, and its usage is discouraged.
Instead you should use the following approach:

>>> routes = [WebSocketRoute(path, endpoint=...), ...]
>>> app = Starlette(routes=routes)"
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
treeposition spanning leaves,":return: The tree position of the lowest descendant of this
    tree that dominates ``self.leaves()[start:end]``.
:raise ValueError: if ``end <= start``"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
clipboard get,"Retrieve data from the clipboard on window's display.

The window keyword defaults to the root window of the Tkinter
application.

The type keyword specifies the form in which the data is
to be returned and should be an atom name such as STRING
or FILE_NAME.  Type defaults to STRING, except on X11, where the default
is to try UTF8_STRING and fall back to STRING.

This command is equivalent to:

selection_get(CLIPBOARD)"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
storage type,"storage_type() -> type

Returns the type of the underlying storage."
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
get slice bound,"Calculate slice bound that corresponds to given label.

Returns leftmost (one-past-the-rightmost if ``side=='right'``) position
of given label.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.4.0

Returns
-------
int
    Index of label."
json schemas,Generate a JSON schema including definitions from multiple type adapters. Args: inputs: Inputs to schema generation. The first two items will form the keys of the (first) output mapping; the type adapters will provide the core schemas that get converted into definitions in the output JSON schema. by_alias: Whether to use alias names. title: The title for the schema. description: The description for the schema. ref_template: The format string used for generating $ref strings. schema_generator: The generator class used for creating the schema. Returns: A tuple where: - The first element is a dictionary whose keys are tuples of JSON
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
treeposition spanning leaves,":return: The tree position of the lowest descendant of this
    tree that dominates ``self.leaves()[start:end]``.
:raise ValueError: if ``end <= start``"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo colormapfull,Return True if at the last color request the colormap was full.
grid size,Return a tuple of the number of column and rows in the grid.
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
is type compatible,Whether the index type is compatible with the provided type.
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
 equal,"Return True iff self and other have equal values.

:param visited_self: A set containing the ids of all ``self``
    feature structures we've already visited.
:param visited_other: A set containing the ids of all ``other``
    feature structures we've already visited.
:param visited_pairs: A set containing ``(selfid, otherid)`` pairs
    for all pairs of feature structures we've already visited."
winfo cells,Return number of cells in the colormap for this widget.
register hook,"Registers a backward hook. The hook will be called every time a gradient with respect to the Tensor is computed. The hook should have the following signature:: hook(grad) -> Tensor or None The hook should not modify its argument, but it can optionally return a new gradient which will be used in place of :attr:`grad`. This function returns a handle with a method ``handle.remove()`` that removes the hook from the module. .. note:: See :ref:`backward-hooks-execution` for more information on how when this hook is executed, and how its execution is ordered relative to other hooks. Example:: >>> v = torch.tensor([0.,"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
chart parse,"Return the final parse ``Chart`` from which all possible
parse trees can be extracted.

:param tokens: The sentence to be parsed
:type tokens: list(str)
:rtype: Chart"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
place slaves,"Return a list of all slaves of this widget
in its packing order."
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
trace vinfo,"Return all trace callback information.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_info() instead."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
to pydatetime,"Return an ndarray of datetime.datetime objects.

Returns
-------
datetimes : ndarray[object]"
info patchlevel,Returns the exact version of the Tcl library.
prob classify,":return: a probability distribution over labels for the given
    featureset.
:rtype: ProbDistI"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
add url rule,"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for
full documentation.

The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,
used with :func:`url_for`, is prefixed with the blueprint's name."
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
 literal schema,Generate schema for a Literal.
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
as ordered,"Set the Categorical to be ordered.

Parameters
----------
inplace : bool, default False
   Whether or not to set the ordered attribute in-place or return
   a copy of this categorical with ordered set to True.

   .. deprecated:: 1.5.0

Returns
-------
Categorical or None
    Ordered Categorical or None if ``inplace=True``."
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
get model builder,"Return the model builder object
:return: ``ModelBuilder``"
disable pipes,"Disable one or more pipeline components. If used as a context
manager, the pipeline will be restored to the initial state at the end
of the block. Otherwise, a DisabledPipes object is returned, that has
a `.restore()` method you can use to undo your changes.

This method has been deprecated since 3.0"
un chomsky normal form,"This method modifies the tree in three ways: 1. Transforms a tree in Chomsky Normal Form back to its original structure (branching greater than two) 2. Removes any parent annotation (if it exists) 3. (optional) expands unary subtrees (if previously collapsed with collapseUnary(...) ) :param expandUnary: Flag to expand unary or not (default = True) :type expandUnary: bool :param childChar: A string separating the head node from its children in an artificial node (default = ""|"") :type childChar: str :param parentChar: A string separating the node label from its parent annotation (default = ""^"") :type parentChar: str :param unaryChar: A"
 checker,"Check whether the provided array or dtype is of an integer dtype. Unlike in `is_any_int_dtype`, timedelta64 instances will return False. The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered as integer by this function. Parameters ---------- arr_or_dtype : array-like or dtype The array or dtype to check. Returns ------- boolean Whether or not the array or dtype is of an integer dtype and not an instance of timedelta64. Examples -------- >>> is_integer_dtype(str) False >>> is_integer_dtype(int) True >>> is_integer_dtype(float) False >>> is_integer_dtype(np.uint64) True >>> is_integer_dtype('int8') True >>> is_integer_dtype('Int8') True >>> is_integer_dtype(pd.Int8Dtype) True >>> is_integer_dtype(np.datetime64) False >>> is_integer_dtype(np.timedelta64) False >>> is_integer_dtype(np.array(['a', 'b']))"
perform collect,"Perform the collection phase for this session.

This is called by the default
:func:`pytest_collection <_pytest.hookspec.pytest_collection>` hook
implementation; see the documentation of this hook for more details.
For testing purposes, it may also be called directly on a fresh
``Session``.

This function normally recursively expands any collectors collected
from the session to their items, and only items are returned. For
testing purposes, this may be suppressed by passing ``genitems=False``,
in which case the return value contains these collectors unexpanded,
and ``session.items`` is empty."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
choose tag,"Decide which tag should be used for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, return None -- do not consult
the backoff tagger.  This method should be overridden by
subclasses of SequentialBackoffTagger.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
handle starttag,"Called by the tree builder when a new tag is encountered. :param name: Name of the tag. :param nsprefix: Namespace prefix for the tag. :param attrs: A dictionary of attribute values. :param sourceline: The line number where this tag was found in its source document. :param sourcepos: The character position within `sourceline` where this tag was found. :param namespaces: A dictionary of all namespace prefix mappings currently in scope in the document. If this method returns None, the tag was rejected by an active SoupStrainer. You should proceed as if the tag had not occurred in the document. For instance,"
update template context,"Update the template context with some commonly used variables.
This injects request, session, config and g into the template
context as well as everything template context processors want
to inject.  Note that the as of Flask 0.6, the original values
in the context will not be overridden if a context processor
decides to return a value with the same key.

:param context: the context as a dictionary that is updated in place
                to add extra variables."
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
from RealField,Convert mpmath's ``mpf`` to Python's ``int``. 
 take,"Internal version of the `take` allowing specification of additional args.

See the docstring of `take` for full explanation of the parameters."
 prove,"Use Prover9 to prove a theorem.
:return: A pair whose first element is a boolean indicating if the
proof was successful (i.e. returns value of 0) and whose second element
is the output of the prover."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
 convert,"Attempt to infer better dtype for object columns.

Parameters
----------
datetime : bool, default False
    If True, convert to date where possible.
numeric : bool, default False
    If True, attempt to convert to numbers (including strings), with
    unconvertible values becoming NaN.
timedelta : bool, default False
    If True, convert to timedelta where possible.

Returns
-------
converted : same as input object"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
new edge key,"Returns an unused key for edges between nodes `u` and `v`.

The nodes `u` and `v` do not need to be already in the graph.

Notes
-----
In the standard MultiGraph class the new key is the number of existing
edges between `u` and `v` (increased if necessary to ensure unused).
The first edge will have key 0, then 1, etc. If an edge is removed
further new_edge_keys may not be in this order.

Parameters
----------
u, v : nodes

Returns
-------
key : int"
find all next,"Find all PageElements that match the given criteria and appear
later in the document than this PageElement.

All find_* methods take a common set of arguments. See the online
documentation for detailed explanations.

:param name: A filter on tag name.
:param attrs: A dictionary of filters on attribute values.
:param string: A filter for a NavigableString with specific text.
:param limit: Stop looking after finding this many results.
:kwargs: A dictionary of filters on attribute values.
:return: A ResultSet containing PageElements."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
open resource,"Open a resource file relative to :attr:`root_path` for
reading.

For example, if the file ``schema.sql`` is next to the file
``app.py`` where the ``Flask`` app is defined, it can be opened
with:

.. code-block:: python

    with app.open_resource(""schema.sql"") as f:
        conn.executescript(f.read())

:param resource: Path to the resource relative to
    :attr:`root_path`.
:param mode: Open the file in this mode. Only reading is
    supported, valid values are ""r"" (or ""rt"") and ""rb"".

Note this is a duplicate of the same method in the Flask
class."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
create optimizer,"Create an optimizer, usually using the [training.optimizer] config."
 get value,"Quickly retrieve single value at passed column and index.

Parameters
----------
index : row label
col : column label
takeable : interpret the index/col as indexers, default False

Returns
-------
scalar

Notes
-----
Assumes that both `self.index._index_as_unique` and
`self.columns._index_as_unique`; Caller is responsible for checking."
treeposition spanning leaves,":return: The tree position of the lowest descendant of this
    tree that dominates ``self.leaves()[start:end]``.
:raise ValueError: if ``end <= start``"
do teardown request,"Called after the request is dispatched and the response is
returned, right before the request context is popped.

This calls all functions decorated with
:meth:`teardown_request`, and :meth:`Blueprint.teardown_request`
if a blueprint handled the request. Finally, the
:data:`request_tearing_down` signal is sent.

This is called by
:meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,
which may be delayed during testing to maintain access to
resources.

:param exc: An unhandled exception raised while dispatching the
    request. Detected from the current exception information if
    not passed. Passed to each teardown function.

.. versionchanged:: 0.9
    Added the ``exc`` argument."
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
info patchlevel,Returns the exact version of the Tcl library.
register module,Alias for :func:`add_module`.
leaf treeposition,":return: The tree position of the ``index``-th leaf in this
    tree.  I.e., if ``tp=self.leaf_treeposition(i)``, then
    ``self[tp]==self.leaves()[i]``.

:raise IndexError: If this tree contains fewer than ``index+1``
    leaves, or if ``index<0``."
json schema,"Generate a JSON schema for the adapted type.

Args:
    by_alias: Whether to use alias names for field names.
    ref_template: The format string used for generating $ref strings.
    schema_generator: The generator class used for creating the schema.
    mode: The mode to use for schema generation.

Returns:
    The JSON schema for the model as a dictionary."
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
grab current,"Return widget which has currently the grab in this application
or None."
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
winfo pixels,Rounded integer value of winfo_fpixels.
register module,Alias for :func:`add_module`.
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
 getitem slice,Fastpath for __getitem__ when we know we have a slice.
option get,"Return the value for an option NAME for this widget
with CLASSNAME.

Values with higher priority override lower values."
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
winfo depth,Return the number of bits per pixel.
get loc,"Get integer location for requested label

Returns
-------
loc : int"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 named members,Helper method for yielding various names + members of modules.
 raise if missing,"Check that indexer can be used to return a result.

e.g. at least one element was found,
unless the list of keys was actually empty.

Parameters
----------
key : list-like
    Targeted labels (only used to show correct error message).
indexer: array-like of booleans
    Indices corresponding to the key,
    (with -1 indicating not found).
axis_name : str

Raises
------
KeyError
    If at least one key was requested but none was found."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 validate can reindex,"Check if we are allowing reindexing with this particular indexer.

Parameters
----------
indexer : an integer ndarray

Raises
------
ValueError if its a duplicate axis"
to str,Write the config to a string.
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
 realign boundaries,"Attempts to realign punctuation that falls after the period but
should otherwise be included in the same sentence.

For example: ""(Sent1.) Sent2."" will otherwise be split as::

    [""(Sent1."", "") Sent1.""].

This method will produce::

    [""(Sent1.)"", ""Sent2.""]."
 should partial index,Should we attempt partial-matching indexing?
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 maybe cast indexer,"If we have a float key and are not a floating index, then try to cast
to an int if equivalent."
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
 rank,See Series.rank.__doc__.
merge masks,"Determine mask type and combine masks if necessary. If only one mask is provided, that mask
and the corresponding mask type will be returned. If both masks are provided, they will be both
expanded to shape ``(batch_size, num_heads, seq_len, seq_len)``, combined with logical ``or``
and mask type 2 will be returned
Args:
    attn_mask: attention mask of shape ``(seq_len, seq_len)``, mask type 0
    key_padding_mask: padding mask of shape ``(batch_size, seq_len)``, mask type 1
    query: query embeddings of shape ``(batch_size, seq_len, embed_dim)``
Returns:
    merged_mask: merged mask
    mask_type: merged mask type (0, 1, or 2)"
 get reconciled name object,"If the result of a set operation will be self,
return self, unless the name changes, in which
case make a shallow copy of self."
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
pretty print,"Pretty-print this tree as ASCII or Unicode art.
For explanation of the arguments, see the documentation for
`nltk.treeprettyprinter.TreePrettyPrinter`."
to fol,:see: ReadingCommand.to_fol()
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
grab current,"Return widget which has currently the grab in this application
or None."
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
 raise if missing,"Check that indexer can be used to return a result.

e.g. at least one element was found,
unless the list of keys was actually empty.

Parameters
----------
key : list-like
    Targeted labels (only used to show correct error message).
indexer: array-like of booleans
    Indices corresponding to the key,
    (with -1 indicating not found).
axis_name : str

Raises
------
KeyError
    If at least one key was requested but none was found."
 internal get values,"Return the values.

For internal compatibility with pandas formatting.

Returns
-------
np.ndarray or Index
    A numpy array of the same dtype as categorical.categories.dtype or
    Index if datetime / periods."
prob classify,":return: a probability distribution over labels for the given
    featureset.
:rtype: ProbDistI"
to xml,"Render a DataFrame to an XML document. .. versionadded:: 1.3.0 Parameters ---------- path_or_buffer : str, path object, file-like object, or None, default None String, path object (implementing ``os.PathLike[str]``), or file-like object implementing a ``write()`` function. If None, the result is returned as a string. index : bool, default True Whether to include index in XML document. root_name : str, default 'data' The name of root element in XML document. row_name : str, default 'row' The name of row element in XML document. na_rep : str, optional Missing data representation. attr_cols : list-like, optional List of columns to write as attributes"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
image configure,Configure an embedded image at INDEX.
set axis labels,"Set axis labels on the bivariate axes.

Parameters
----------
xlabel, ylabel : strings
    Label names for the x and y variables.
kwargs : key, value mappings
    Other keyword arguments are passed to the following functions:

    - :meth:`matplotlib.axes.Axes.set_xlabel`
    - :meth:`matplotlib.axes.Axes.set_ylabel`

Returns
-------
:class:`JointGrid` instance
    Returns ``self`` for easy method chaining."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
formatter for name,"Look up or create a Formatter for the given identifier,
if necessary.

:param formatter: Can be a Formatter object (used as-is), a
    function (used as the entity substitution hook for an
    XMLFormatter or HTMLFormatter), or a string (used to look
    up an XMLFormatter or HTMLFormatter in the appropriate
    registry."
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
initialize parameters,"Initialize parameters according to the input batch properties.
This adds an interface to isolate parameter initialization from the
forward pass when doing parameter shape inference."
before request,"Register a function to run before each request. For example, this can be used to open a database connection, or to load the logged in user from the session. .. code-block:: python @app.before_request def load_user(): if ""user_id"" in session: g.user = db.session.get(session[""user_id""]) The function will be called without any arguments. If it returns a non-``None`` value, the value is handled as if it was the return value from the view, and further request handling is stopped. This is available on both app and blueprint objects. When used on an app, this executes before every request. When used on a blueprint,"
 set node,Outdated method to set the node value; use the set_label() method instead.
 create training examples arc eager,"Create the training example in the libsvm format and write it to the input_file.
Reference : 'A Dynamic Oracle for Arc-Eager Dependency Parsing' by Joav Goldberg and Joakim Nivre"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 apply filter,"Generic filter removes ngrams from the frequency distribution
if the function returns True when passed an ngram tuple."
span tokenize,"Identify the tokens using integer offsets ``(start_i, end_i)``,
where ``s[start_i:end_i]`` is the corresponding token.

:rtype: iter(tuple(int, int))"
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
register module,Alias for :func:`add_module`.
register module,Alias for :func:`add_module`.
 value with fmt,"Convert numpy types to Python types for the Excel writers.

Parameters
----------
val : object
    Value to be written into cells

Returns
-------
Tuple with the first element being the converted value and the second
    being an optional format"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
choose tag,"Decide which tag should be used for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, return None -- do not consult
the backoff tagger.  This method should be overridden by
subclasses of SequentialBackoffTagger.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
 sort levels monotonic,Compat with MultiIndex.
 union,"Specific union logic should go here. In subclasses, union behavior
should be overwritten here rather than in `self.union`.

Parameters
----------
other : Index or array-like
sort : False or None, default False
    Whether to sort the resulting index.

    * False : do not sort the result.
    * None : sort the result, except when `self` and `other` are equal
      or when the values cannot be compared.

Returns
-------
Index"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
 view,"fastpath to make a shallow copy, i.e. new object with same data."
open instance resource,"Opens a resource from the application's instance folder
(:attr:`instance_path`).  Otherwise works like
:meth:`open_resource`.  Instance resources can also be opened for
writing.

:param resource: the name of the resource.  To access resources within
                 subfolders use forward slashes as separator.
:param mode: resource file opening mode, default is 'rb'."
winfo atomname,Return name of atom with identifier ID.
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
prob classify,":return: a probability distribution over labels for the given
    featureset.
:rtype: ProbDistI"
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
winfo ismapped,Return true if this widget is mapped.
 reset identity,Initializes or resets ``_id`` attribute with new object.
is integer,Check if the Index only consists of integers. Returns ------- bool Whether or not the Index only consists of integers. See Also -------- is_boolean : Check if the Index only consists of booleans. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
 get node,Outdated method to access the node value; use the label() method instead.
train stats,"Return a named statistic collected during training, or a dictionary of all
available statistics if no name given

:param statistic: name of statistic
:type statistic: str
:return: some statistic collected during training of this tagger
:rtype: any (but usually a number)"
disable pipes,"Disable one or more pipeline components. If used as a context
manager, the pipeline will be restored to the initial state at the end
of the block. Otherwise, a DisabledPipes object is returned, that has
a `.restore()` method you can use to undo your changes.

This method has been deprecated since 3.0"
 eval det lu,"Computes the determinant of a matrix from its LU decomposition. This function uses the LU decomposition computed by LUDecomposition_Simple(). The keyword arguments iszerofunc and simpfunc are passed to LUDecomposition_Simple(). iszerofunc is a callable that returns a boolean indicating if its input is zero, or None if it cannot make the determination. simpfunc is a callable that simplifies its input. The default is simpfunc=None, which indicate that the pivot search algorithm should not attempt to simplify any candidate pivots. If simpfunc fails to simplify its input, then it must return its input instead of a copy. Parameters ========== iszerofunc : function,"
 dir deletions,Delete unwanted __dir__ for this object.
winfo class,Return window class name of this widget.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
winfo manager,Return the window manager name for this widget.
set cookie,"Sets a cookie. A warning is raised if the size of the cookie header exceeds :attr:`max_cookie_size`, but the header will still be set. :param key: the key (name) of the cookie to be set. :param value: the value of the cookie. :param max_age: should be a number of seconds, or `None` (default) if the cookie should last only as long as the client's browser session. :param expires: should be a `datetime` object or UNIX timestamp. :param path: limits the cookie to a given path, per default it will span the whole domain. :param domain: if you want to set a"
winfo reqwidth,Return requested width of this widget.
write cells,"Write given formatted cells into Excel an excel sheet

.. deprecated:: 1.5.0

Parameters
----------
cells : generator
    cell of formatted data to save to Excel sheet
sheet_name : str, default None
    Name of Excel sheet, if None, then use self.cur_sheet
startrow : upper left cell row to dump data frame
startcol : upper left cell column to dump data frame
freeze_panes: int tuple of length 2
    contains the bottom-most row and right-most column to freeze"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
winfo geometry,"Return geometry string for this widget in the form ""widthxheight+X+Y""."
grab current,"Return widget which has currently the grab in this application
or None."
collapse unary,"Collapse subtrees with a single child (ie. unary productions) into a new non-terminal (Tree node) joined by 'joinChar'. This is useful when working with algorithms that do not allow unary productions, and completely removing the unary productions would require loss of useful information. The Tree is modified directly (since it is passed by reference) and no value is returned. :param collapsePOS: 'False' (default) will not collapse the parent of leaf nodes (ie. Part-of-Speech tags) since they are always unary productions :type collapsePOS: bool :param collapseRoot: 'False' (default) will not modify the root production if it is unary. For the Penn"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
to ring,"Make the ground domain a ring.

Examples
========

>>> from sympy import Poly, QQ
>>> from sympy.abc import x

>>> Poly(x**2 + 1, domain=QQ).to_ring()
Poly(x**2 + 1, x, domain='ZZ')"
place info,"Return information about the placing options
for this widget."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
trace vdelete,"Delete the trace callback for a variable.

MODE is one of ""r"", ""w"", ""u"" for read, write, undefine.
CBNAME is the name of the callback returned from trace_variable or trace.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_remove() instead."
concordance list,"Generate a concordance for ``word`` with the specified context window.
Word matching is not case-sensitive.

:param word: The target word or phrase (a list of strings)
:type word: str or list
:param width: The width of each line, in characters (default=80)
:type width: int
:param lines: The number of lines to display (default=25)
:type lines: int

:seealso: ``ConcordanceIndex``"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 repr png ,"Draws and outputs in PNG for ipython.
PNG is used instead of PDF, since it can be displayed in the qt console and
has wider browser support."
clipboard get,"Retrieve data from the clipboard on window's display.

The window keyword defaults to the root window of the Tkinter
application.

The type keyword specifies the form in which the data is
to be returned and should be an atom name such as STRING
or FILE_NAME.  Type defaults to STRING, except on X11, where the default
is to try UTF8_STRING and fall back to STRING.

This command is equivalent to:

selection_get(CLIPBOARD)"
 find instantiations,":return: a list of the production instantiations that cover a given span of the text. A ""production instantiation"" is a tuple containing a production and a list of children, where the production's right hand side matches the list of children; and the children cover ``span``. :rtype: list of ``pair`` of ``Production``, (list of (``ProbabilisticTree`` or token. :type span: tuple(int, int) :param span: The section of the text for which we are trying to find production instantiations. The span is specified as a pair of integers, where the first integer is the index of the first token that should be covered"
get indexer,"Compute indexer and mask for new index given the current index. The indexer should be then used as an input to ndarray.take to align the current data to the new index. Parameters ---------- target : Index method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional * default: exact matches only. * pad / ffill: find the PREVIOUS index value if no exact match. * backfill / bfill: use NEXT index value if no exact match * nearest: use the NEAREST index value if no exact match. Tied distances are broken by preferring the larger index value. limit : int, optional Maximum number"
set data,"Sets a new string as response.  The value must be a string or
bytes. If a string is set it's encoded to the charset of the
response (utf-8 by default).

.. versionadded:: 0.9"
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
get storer,"return the storer object for a key, raise if not in the file"
winfo width,Return the width of this widget.
validate strings,"Validate object contains string data against the model.

Args:
    obj: The object contains string data to validate.
    strict: Whether to strictly check types.
    context: Additional context to use during validation.

Returns:
    The validated object."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
app template global,"Register a template global, available in any template rendered by the
application. Equivalent to :meth:`.Flask.template_global`.

.. versionadded:: 0.10

:param name: the optional name of the global, otherwise the
             function name will be used."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo children,Return a list of all widgets which are children of this widget.
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
register module,Alias for :func:`add_module`.
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
 intersection,intersection specialized to the case with matching dtypes and both non-empty.
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
selection anchor,Set the fixed end oft the selection to INDEX.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
grab release,Release grab for this widget if currently set.
 view,"fastpath to make a shallow copy, i.e. new object with same data."
yview pickplace,"Obsolete function, use see."
pack slaves,"Return a list of all slaves of this widget
in its packing order."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
 update rule applies,"Update the rule data tables to reflect the fact that
*rule* applies at the position *(sentnum, wordnum)*."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 intersect interval,"Returns start and stop.

Takes intersection over the two intervals."
winfo pointerx,Return the x coordinate of the pointer on the root window.
 infer parameters,"Infers the size and initializes the parameters according to the
provided input batch.
Given a module that contains parameters that were declared inferrable
using :class:`torch.nn.parameter.ParameterMode.Infer`, runs a forward pass
in the complete module using the provided input to initialize all the parameters
as needed.
The module is set into evaluation mode before running the forward pass in order
to avoid saving statistics or calculating gradients"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
to native types,"Format specified values of `self` and return them.

.. deprecated:: 1.2.0

Parameters
----------
slicer : int, array-like
    An indexer into `self` that specifies which values
    are used in the formatting process.
kwargs : dict
    Options for specifying how the values should be formatted.
    These options include the following:

    1) na_rep : str
        The value that serves as a placeholder for NULL values
    2) quoting : bool or None
        Whether or not there are quoted values in `self`
    3) date_format : str
        The format used to represent date-like values.

Returns
-------
numpy.ndarray
    Formatted values."
 eval matrix log jblock,"Helper function to compute logarithm of a jordan block.

Examples
========

>>> from sympy import Symbol, Matrix
>>> l = Symbol('lamda')

A trivial example of 1*1 Jordan block:

>>> m = Matrix.jordan_block(1, l)
>>> m._eval_matrix_log_jblock()
Matrix([[log(lamda)]])

An example of 3*3 Jordan block:

>>> m = Matrix.jordan_block(3, l)
>>> m._eval_matrix_log_jblock()
Matrix([
[log(lamda),    1/lamda, -1/(2*lamda**2)],
[         0, log(lamda),         1/lamda],
[         0,          0,      log(lamda)]])"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
image names,Return a list of all existing image names.
  bool  ,A tag is non-None even if it has no contents.
share memory,See :meth:`torch.Tensor.share_memory_`
 eval is composite,A power is composite if both base and exponent are greater than 1
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
to flat index,"Identity method.

This is implemented for compatibility with subclass implementations
when chaining.

Returns
-------
pd.Index
    Caller.

See Also
--------
MultiIndex.to_flat_index : Subclass implementation."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
best incoming arc,"Returns the source of the best incoming arc to the
node with address: node_index

:type node_index: integer.
:param node_index: The address of the 'destination' node,
the node that is arced to."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
with name,Return a new path with the file name changed.
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 get attributes dict,"Return an attributes dict for my class.

Temporarily added back for compatibility issue in dask, see
https://github.com/pandas-dev/pandas/pull/43895"
 get default index names,"Get names of index.

Parameters
----------
names : int, str or 1-dimensional list, default None
    Index names to set.
default : str
    Default name of index.

Raises
------
TypeError
    if names not str or list-like"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
is nonnegative,Returns True if ``a`` is non-negative. 
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
holds integer,Whether the type is an integer type.
interpret config,"Interpret a config, parse nested sections and parse the values
as JSON. Mostly used internally and modifies the config in place."
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
option clear,"Clear the option database.

It will be reloaded if option_add is called."
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
set closed,"Return an identical IntervalArray closed on the specified side.

Parameters
----------
closed : {'left', 'right', 'both', 'neither'}
    Whether the intervals are closed on the left-side, right-side, both
    or neither.

Returns
-------
new_index : IntervalArray

Examples
--------
>>> index = pd.arrays.IntervalArray.from_breaks(range(4))
>>> index
<IntervalArray>
[(0, 1], (1, 2], (2, 3]]
Length: 3, dtype: interval[int64, right]
>>> index.set_closed('both')
<IntervalArray>
[[0, 1], [1, 2], [2, 3]]
Length: 3, dtype: interval[int64, both]"
 maybe update cacher,See NDFrame._maybe_update_cacher.__doc__
winfo parent,Return the name of the parent of this widget.
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
 is memory usage qualified,Return a boolean if we need a qualified .info display.
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
sort values,"Sort the Categorical by category value returning a new Categorical by default. While an ordering is applied to the category values, sorting in this context refers more to organizing and grouping together based on matching category values. Thus, this function can be called on an unordered Categorical instance unlike the functions 'Categorical.min' and 'Categorical.max'. Parameters ---------- inplace : bool, default False Do operation in place. ascending : bool, default True Order ascending. Passing False orders descending. The ordering parameter provides the method by which the category values are organized. na_position : {'first', 'last'} (optional, default='last') 'first' puts NaNs at the"
 convert slice indexer,"Convert a slice indexer.

By definition, these are labels unless 'iloc' is passed in.
Floats are not allowed as the start, step, or stop of the slice.

Parameters
----------
key : label of the slice bound
kind : {'loc', 'getitem'}"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
register error handler,"Alternative error attach function to the :meth:`errorhandler`
decorator that is more straightforward to use for non decorator
usage.

.. versionadded:: 0.7"
 build model,"Use Mace4 to build a first order model.

:return: ``True`` if a model was found (i.e. Mace returns value of 0),
else ``False``"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
 show readings,Print out the readings for  the discourse (or a single sentence).
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
unbind all,Unbind for all widgets for event SEQUENCE all functions.
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
winfo depth,Return the number of bits per pixel.
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
 finalize,"Called when we see the close brace -- checks for a slash feature,
and adds in default values."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
hidden frames,"Given an index in the stack return whether it should be skipped.

This is used in up/down and where to skip frames."
winfo name,Return the name of this widget.
select includes,Return True if INDEX is part of the selection.
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
wm client,"Store NAME in WM_CLIENT_MACHINE property of this widget. Return
current value."
 check setitem copy,"Parameters ---------- t : str, the type of setting error force : bool, default False If True, then force showing an error. validate if we are doing a setitem on a chained copy. It is technically possible to figure out that we are setting on a copy even WITH a multi-dtyped pandas object. In other words, some blocks may be views while other are not. Currently _is_view will ALWAYS return False for multi-blocks to avoid having to handle this case. df = DataFrame(np.arange(0,9), columns=['count']) df['group'] = 'b' # This technically need not raise SettingWithCopy if both are view # (which"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
 asdict,Return a new dict which maps field names to their values.
handle exception,"Handle an exception that did not have an error handler associated with it, or that was raised from an error handler. This always causes a 500 ``InternalServerError``. Always sends the :data:`got_request_exception` signal. If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug mode, the error will be re-raised so that the debugger can display it. Otherwise, the original exception is logged, and an :exc:`~werkzeug.exceptions.InternalServerError` is returned. If an error handler is registered for ``InternalServerError`` or ``500``, it will be used. For consistency, the handler will always receive the ``InternalServerError``. The original unhandled exception is available as ``e.original_exception``. .. versionchanged:: 1.1.0 Always passes"
winfo ismapped,Return true if this widget is mapped.
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
winfo pathname,Return the pathname of the widget given by ID.
 is comparable dtype,Can we compare values of the given dtype to our own?
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 get codes for sorting,"we are categorizing our codes by using the
available categories (all, not just observed)
excluding any missing ones (-1); this is in preparation
for sorting, where we need to disambiguate that -1 is not
a valid valid"
pack slaves,"Return a list of all slaves of this widget
in its packing order."
winfo width,Return the width of this widget.
grab current,"Return widget which has currently the grab in this application
or None."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
left siblings,"A list of all left siblings of this tree, in any of its parent
trees.  A tree may be its own left sibling if it is used as
multiple contiguous children of the same parent.  A tree may
appear multiple times in this list if it is the left sibling
of this tree with respect to multiple parents.

:type: list(MultiParentedTree)"
place info,"Return information about the placing options
for this widget."
winfo id,Return identifier ID for this widget.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
place info,"Return information about the placing options
for this widget."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
parse all,:rtype: list(Tree)
 construct readings,Use ``self._sentences`` to construct a value for ``self._readings``.
grid info,"Return information about the options
for positioning this widget in a grid."
pack forget,Unmap this widget and do not use it for the packing order.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
get all breaks,Return all breakpoints that are set.
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
grid forget,Unmap this widget.
most common,"List the n most common elements and their counts from the most
common to the least.  If n is None, then list all element counts.

>>> Counter('abracadabra').most_common(3)
[('a', 5), ('b', 2), ('r', 2)]"
 is comparable dtype,Can we compare values of the given dtype to our own?
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
winfo colormapfull,Return True if at the last color request the colormap was full.
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
visit structured,"Recursively visit subexpressions.  Apply 'function' to each
subexpression and pass the result of each function application
to the 'combinator' for aggregation.  The combinator must have
the same signature as the constructor.  The function is not
applied to bound variables, but they are passed to the
combinator.
:param function: ``Function`` to call on each subexpression
:param combinator: ``Function`` with the same signature as the
constructor, to combine the results of the function calls
:return: result of combination"
to bytes,"Serialize the current state to a binary string.

exclude (Iterable[str]): Names of components or serialization fields to exclude.
RETURNS (bytes): The serialized form of the `Language` object.

DOCS: https://spacy.io/api/language#to_bytes"
winfo parent,Return the name of the parent of this widget.
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
bidiagonal decomposition,"Returns (U,B,V.H)

$A = UBV^{H}$

where A is the input matrix, and B is its Bidiagonalized form

Note: Bidiagonal Computation can hang for symbolic matrices.

Parameters
==========

upper : bool. Whether to do upper bidiagnalization or lower.
            True for upper and False for lower.

References
==========

1. Algorith 5.4.2, Matrix computations by Golub and Van Loan, 4th edition
2. Complex Matrix Bidiagonalization : https://github.com/vslobody/Householder-Bidiagonalization"
 LancasterStemmer  getLastLetter,Get the zero-based index of the last alphabetic character in this string
get send file max age,"Used by :func:`send_file` to determine the ``max_age`` cache
value for a given file path if it wasn't passed.

By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from
the configuration of :data:`~flask.current_app`. This defaults
to ``None``, which tells the browser to use conditional requests
instead of a timed cache, which is usually preferable.

Note this is a duplicate of the same method in the Flask
class.

.. versionchanged:: 2.0
    The default configuration is ``None`` instead of 12 hours.

.. versionadded:: 0.9"
 prove,":return: Whether the proof was successful or not, along with the proof
:rtype: tuple: (bool, str)"
retract assumptions,"Retract assumptions from the assumption list.

:param debug: If True, give warning when ``retracted`` is not present on
assumptions list.
:type debug: bool
:param retracted: assumptions to be retracted
:type retracted: list(sem.Expression)"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
 dir additions,Add additional __dir__ for this object.
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
add template filter,"Register a custom template filter.  Works exactly like the
:meth:`template_filter` decorator.

:param name: the optional name of the filter, otherwise the
             function name will be used."
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
winfo exists,Return true if this widget exists.
deregister hook,"Deregister a previously registered hook.
Returns True if the hook existed, False if not."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
complex float,Casts this storage to complex float type
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
pretty format,"Return a string containing a pretty-printed version of this
decision tree.  Each line in this string corresponds to a
single decision tree node or leaf, and indentation is used to
display the structure of the decision tree."
prob classify many,"Apply ``self.prob_classify()`` to each element of ``featuresets``.  I.e.:

    return [self.prob_classify(fs) for fs in featuresets]

:rtype: list(ProbDistI)"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
 named members,Helper method for yielding various names + members of modules.
 setup,Internal function. Sets up information about children.
winfo height,Return height of this widget.
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
winfo width,Return the width of this widget.
find next siblings,"Find all siblings of this PageElement that match the given criteria
and appear later in the document.

All find_* methods take a common set of arguments. See the online
documentation for detailed explanations.

:param name: A filter on tag name.
:param attrs: A dictionary of filters on attribute values.
:param string: A filter for a NavigableString with specific text.
:param limit: Stop looking after finding this many results.
:kwargs: A dictionary of filters on attribute values.
:return: A ResultSet of PageElements.
:rtype: bs4.element.ResultSet"
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
 set names,"Set new names on index. Each name has to be a hashable type.

Parameters
----------
values : str or sequence
    name(s) to set
level : int, level name, or sequence of int/level names (default None)
    If the index is a MultiIndex (hierarchical), level(s) to set (None
    for all levels).  Otherwise level must be None

Raises
------
TypeError if each name is not hashable."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 drop axis,"Drop labels from specified axis. Used in the ``drop`` method
internally.

Parameters
----------
labels : single label or list-like
axis : int or axis name
level : int or level name, default None
    For MultiIndex
errors : {'ignore', 'raise'}, default 'raise'
    If 'ignore', suppress error and existing labels are dropped.
only_slice : bool, default False
    Whether indexing along columns should be view-only."
image types,Return a list of all available image types (e.g. photo bitmap).
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 check label or level ambiguity,"Check whether `key` is ambiguous.

By ambiguous, we mean that it matches both a level of the input
`axis` and a label of the other axis.

Parameters
----------
key : Hashable
    Label or level name.
axis : int, default 0
    Axis that levels are associated with (0 for index, 1 for columns).

Raises
------
ValueError: `key` is ambiguous"
 write cells,"Write given formatted cells into Excel an excel sheet

Parameters
----------
cells : generator
    cell of formatted data to save to Excel sheet
sheet_name : str, default None
    Name of Excel sheet, if None, then use self.cur_sheet
startrow : upper left cell row to dump data frame
startcol : upper left cell column to dump data frame
freeze_panes: int tuple of length 2
    contains the bottom-most row and right-most column to freeze"
 intersection via get indexer,"Find the intersection of two Indexes using get_indexer.

Returns
-------
np.ndarray or ExtensionArray
    The returned array will be unique."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
model dump,"Usage docs: https://docs.pydantic.dev/2.7/concepts/serialization/#modelmodel_dump Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. Args: mode: The mode in which `to_python` should run. If mode is 'json', the output will only contain JSON serializable types. If mode is 'python', the output may contain non-JSON-serializable Python objects. include: A set of fields to include in the output. exclude: A set of fields to exclude from the output. context: Additional context to pass to the serializer. by_alias: Whether to use the field's alias in the dictionary key if defined. exclude_unset: Whether to exclude fields that have not been"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
share memory,See :meth:`torch.Tensor.share_memory_`
winfo reqwidth,Return requested width of this widget.
is shared,"Checks if tensor is in shared memory.

This is always ``True`` for CUDA tensors."
as content primitive,"This method should recursively remove a Rational from all arguments and return that (content) and the new self (primitive). The content should always be positive and ``Mul(*foo.as_content_primitive()) == foo``. The primitive need not be in canonical form and should try to preserve the underlying structure if possible (i.e. expand_mul should not be applied to self). Examples ======== >>> from sympy import sqrt >>> from sympy.abc import x, y, z >>> eq = 2 + 2*x + 2*y*(3 + 3*y) The as_content_primitive function is recursive and retains structure: >>> eq.as_content_primitive() (2, x + 3*y*(y + 1) + 1) Integer powers will"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
 reset identity,Initializes or resets ``_id`` attribute with new object.
 format native types,actually format my specific types
binary locations,"A list of directories that should be searched for the prover9
executables.  This list is used by ``config_prover9`` when searching
for the prover9 executables."
 named members,Helper method for yielding various names + members of modules.
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
 duplicated,"Indicate duplicate index values. Duplicated values are indicated as ``True`` values in the resulting array. Either all duplicates, all except the first, or all except the last occurrence of duplicates can be indicated. Parameters ---------- keep : {'first', 'last', False}, default 'first' The value or values in a set of duplicates to mark as missing. - 'first' : Mark duplicates as ``True`` except for the first occurrence. - 'last' : Mark duplicates as ``True`` except for the last occurrence. - ``False`` : Mark all duplicates as ``True``. Returns ------- np.ndarray[bool] See Also -------- Series.duplicated : Equivalent method on pandas.Series. DataFrame.duplicated"
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
do psource,Print (or run through pager) the source code for an object.
 depth scores,"Calculates the depth of each gap, i.e. the average difference
between the left and right peaks and the gap's score"
set label,"Set the node label.  This will only succeed the first time the
node label is set, which should occur in ImmutableTree.__init__()."
 do poly distance,"Calculates the least distance between the exteriors of two convex polygons e1 and e2. Does not check for the convexity of the polygons as this is checked by Polygon.distance. Notes ===== - Prints a warning if the two polygons possibly intersect as the return value will not be valid in such a case. For a more through test of intersection use intersection(). See Also ======== sympy.geometry.point.Point.distance Examples ======== >>> from sympy.geometry import Point, Polygon >>> square = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0)) >>> triangle = Polygon(Point(1, 2), Point(2, 2), Point(2, 1)) >>> square._do_poly_distance(triangle) sqrt(2)/2 Description of method"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
is numeric,Check if the Index only consists of numeric data. Returns ------- bool Whether or not the Index only consists of numeric data. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
holds integer,Whether the type is an integer type.
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
f measure,"Return the overall F measure for all texts that have been
scored by this ``ChunkScore``.

:param alpha: the relative weighting of precision and recall.
    Larger alpha biases the score towards the precision value,
    while smaller alpha biases the score towards the recall
    value.  ``alpha`` should have a value in the range [0,1].
:type alpha: float
:rtype: float"
take nd,Alias for `take`
grab current,"Return widget which has currently the grab in this application
or None."
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
 intersection non unique,"Used when the IntervalIndex does have some common endpoints,
on either sides.
Return the intersection with another IntervalIndex.

Parameters
----------
other : IntervalIndex

Returns
-------
IntervalIndex"
winfo geometry,"Return geometry string for this widget in the form ""widthxheight+X+Y""."
 eval coeff,multiplies the coefficients of all the sequences at point pt
select clear,Clear the selection if it is in this widget.
 get attributes dict,"Return an attributes dict for my class.

Temporarily added back for compatibility issue in dask, see
https://github.com/pandas-dev/pandas/pull/43895"
find parents,"Find all parents of this PageElement that match the given criteria.

All find_* methods take a common set of arguments. See the online
documentation for detailed explanations.

:param name: A filter on tag name.
:param attrs: A dictionary of filters on attribute values.
:param limit: Stop looking after finding this many results.
:kwargs: A dictionary of filters on attribute values.

:return: A PageElement.
:rtype: bs4.element.Tag | bs4.element.NavigableString"
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
winfo manager,Return the window manager name for this widget.
winfo reqwidth,Return requested width of this widget.
grab release,Release grab for this widget if currently set.
as unordered,"Set the Categorical to be unordered.

Parameters
----------
inplace : bool, default False
   Whether or not to set the ordered attribute in-place or return
   a copy of this categorical with ordered set to False.

   .. deprecated:: 1.5.0

Returns
-------
Categorical or None
    Unordered Categorical or None if ``inplace=True``."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
option get,"Return the value for an option NAME for this widget
with CLASSNAME.

Values with higher priority override lower values."
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
prob classify,":return: a probability distribution over labels for the given
    featureset.
:rtype: ProbDistI"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
share memory,See :meth:`torch.Tensor.share_memory_`
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
second moment of area,"Returns the second moment and product moment of area of a two dimensional polygon. Parameters ========== point : Point, two-tuple of sympifyable objects, or None(default=None) point is the point about which second moment of area is to be found. If ""point=None"" it will be calculated about the axis passing through the centroid of the polygon. Returns ======= I_xx, I_yy, I_xy : number or sympy expression I_xx, I_yy are second moment of area of a two dimensional polygon. I_xy is product moment of area of a two dimensional polygon. Examples ======== >>> from sympy import Polygon, symbols >>> a, b ="
 production to tree,":rtype: Tree
:return: The Tree that is licensed by ``production``.
    In particular, given the production ``[lhs -> elt[1] ... elt[n]]``
    return a tree that has a node ``lhs.symbol``, and
    ``n`` children.  For each nonterminal element
    ``elt[i]`` in the production, the tree token has a
    childless subtree with node value ``elt[i].symbol``; and
    for each terminal element ``elt[j]``, the tree token has
    a leaf token with type ``elt[j]``.

:param production: The CFG production that licenses the tree
    token that should be returned.
:type production: Production"
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
to series,"Create a Series with both index and values equal to the index keys. Useful with map for returning an indexer based on an index. Parameters ---------- index : Index, optional Index of resulting Series. If None, defaults to original index. name : str, optional Name of resulting Series. If None, defaults to name of original index. Returns ------- Series The dtype will be based on the type of the Index values. See Also -------- Index.to_frame : Convert an Index to a DataFrame. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') By default, the"
info patchlevel,Returns the exact version of the Tcl library.
grid forget,Unmap this widget.
to markdown,"Print DataFrame in Markdown-friendly format. .. versionadded:: 1.0.0 Parameters ---------- buf : str, Path or StringIO-like, optional, default None Buffer to write to. If None, the output is returned as a string. mode : str, optional Mode in which file is opened, ""wt"" by default. index : bool, optional, default True Add index (row) labels. .. versionadded:: 1.1.0 storage_options : dict, optional Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to ``urllib.request.Request`` as header options. For other URLs (e.g. starting with ""s3://"", and ""gcs://"")"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
get pipe,"Get a pipeline component for a given component name.

name (str): Name of pipeline component to get.
RETURNS (callable): The pipeline component.

DOCS: https://spacy.io/api/language#get_pipe"
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
place info,"Return information about the placing options
for this widget."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
trace variable,"Define a trace callback for the variable.

MODE is one of ""r"", ""w"", ""u"" for read, write, undefine.
CALLBACK must be a function which is called when
the variable is read, written or undefined.

Return the name of the callback.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_add() instead."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
add param group,"Add a param group to the :class:`Optimizer` s `param_groups`.

This can be useful when fine tuning a pre-trained network as frozen layers can be made
trainable and added to the :class:`Optimizer` as training progresses.

Args:
    param_group (dict): Specifies what Tensors should be optimized along with group
        specific optimization options."
pack info,"Return information about the packing options
for this widget."
 check setitem copy,"Parameters ---------- t : str, the type of setting error force : bool, default False If True, then force showing an error. validate if we are doing a setitem on a chained copy. It is technically possible to figure out that we are setting on a copy even WITH a multi-dtyped pandas object. In other words, some blocks may be views while other are not. Currently _is_view will ALWAYS return False for multi-blocks to avoid having to handle this case. df = DataFrame(np.arange(0,9), columns=['count']) df['group'] = 'b' # This technically need not raise SettingWithCopy if both are view # (which"
share memory,See :meth:`torch.Tensor.share_memory_`
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
wm aspect,"Instruct the window manager to set the aspect ratio (width/height)
of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
of the actual values if no argument is given."
include router,"Include another `APIRouter` in the same current `APIRouter`.

Read more about it in the
[FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).

## Example

```python
from fastapi import APIRouter, FastAPI

app = FastAPI()
internal_router = APIRouter()
users_router = APIRouter()

@users_router.get(""/users/"")
def read_users():
    return [{""name"": ""Rick""}, {""name"": ""Morty""}]

internal_router.include_router(users_router)
app.include_router(internal_router)
```"
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
build model,"Perform the actual model building.
:return: Whether a model was generated
:rtype: bool"
winfo pointery,Return the y coordinate of the pointer on the root window.
share memory,See :meth:`torch.Tensor.share_memory_`
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 is memory usage qualified,Return a boolean if we need a qualified .info display.
grab release,Release grab for this widget if currently set.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
most informative features,"Return a list of the 'most informative' features used by this
classifier.  For the purpose of this function, the
informativeness of a feature ``(fname,fval)`` is equal to the
highest value of P(fname=fval|label), for any label, divided by
the lowest value of P(fname=fval|label), for any label:

|  max[ P(fname=fval|label1) / P(fname=fval|label2) ]"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
process thread,:see: ReadingCommand.process_thread()
context processor,"Registers a template context processor function. These functions run before
rendering a template. The keys of the returned dict are added as variables
available in the template.

This is available on both app and blueprint objects. When used on an app, this
is called for every rendered template. When used on a blueprint, this is called
for templates rendered from the blueprint's views. To register with a blueprint
and affect every template, use :meth:`.Blueprint.app_context_processor`."
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 getconfigure,Call Tcl configure command and return the result as a dict.
 cmp method,Wrapper used to dispatch comparison operations.
winfo height,Return height of this widget.
 update inplace,"Replace self internals with result.

Parameters
----------
result : same type as self
verify_is_copy : bool, default True
    Provide is_copy checks."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
winfo screen,Return the screen name of this widget.
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 clear partition,Removes partition data from the graph
 intersection unique,"Used when the IntervalIndex does not have any common endpoint,
no matter left or right.
Return the intersection with another IntervalIndex.
Parameters
----------
other : IntervalIndex
Returns
-------
IntervalIndex"
add chart,"Create a chart object.

Args:
    options: The chart type and subtype options.

Returns:
    Reference to a Chart object."
 consolidate,"Compute NDFrame with ""consolidated"" internals (data of each dtype
grouped together in a single ndarray).

Returns
-------
consolidated : same type as caller"
parse tagged sents,"Use MaltParser to parse multiple POS tagged sentences. Takes multiple
sentences where each sentence is a list of (word, tag) tuples.
The sentences must have already been tokenized and tagged.

:param sentences: Input sentences to parse
:type sentence: list(list(tuple(str, str)))
:return: iter(iter(``DependencyGraph``)) the dependency graph
representation of each sentence"
parse all,:rtype: list(Tree)
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
create oval,"Create oval with coordinates x1,y1,x2,y2."
grid info,"Return information about the options
for positioning this widget in a grid."
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
 format duplicate message,"Construct the DataFrame for a DuplicateLabelError.

This returns a DataFrame indicating the labels and positions
of duplicates in an index. This should only be called when it's
already known that duplicates are present.

Examples
--------
>>> idx = pd.Index(['a', 'b', 'a'])
>>> idx._format_duplicate_message()
    positions
label
a        [0, 2]"
winfo exists,Return true if this widget exists.
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo children,Return a list of all widgets which are children of this widget.
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
to flat index,"Identity method.

This is implemented for compatibility with subclass implementations
when chaining.

Returns
-------
pd.Index
    Caller.

See Also
--------
MultiIndex.to_flat_index : Subclass implementation."
plot marginals,"Draw univariate plots on each marginal axes.

Parameters
----------
func : plotting callable
    If a seaborn function, it should  accept ``x`` and ``y`` and plot
    when only one of them is defined. Otherwise, it must accept a vector
    of data as the first positional argument and determine its orientation
    using the ``vertical`` parameter, and it must plot on the ""current"" axes.
    If ``hue`` was defined in the class constructor, it must accept ``hue``
    as a parameter.
kwargs
    Keyword argument are passed to the plotting function.

Returns
-------
:class:`JointGrid` instance
    Returns ``self`` for easy method chaining."
link to,"Make the target path a hard link pointing to this path.

Note this function does not make this path a hard link to *target*,
despite the implication of the function and argument names. The order
of arguments (target, link) is the reverse of Path.symlink_to, but
matches that of os.link.

Deprecated since Python 3.10 and scheduled for removal in Python 3.12.
Use `hardlink_to()` instead."
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
verb t6,stem the imperative tense prefixes
focus displayof,"Return the widget which has currently the focus on the
display where this widget is located.

Return None if the application does not have the focus."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
to frame,"Create a DataFrame with a column containing the Index. Parameters ---------- index : bool, default True Set the index of the returned DataFrame as the original Index. name : object, default None The passed name should substitute for the index name (if it has one). Returns ------- DataFrame DataFrame containing the original Index data. See Also -------- Index.to_series : Convert an Index to a Series. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') >>> idx.to_frame() animal animal Ant Ant Bear Bear Cow Cow By default, the original Index is reused. To enforce a"
is floating,"Check if the Index is a floating type. The Index may consist of only floats, NaNs, or a mix of floats, integers, or NaNs. Returns ------- bool Whether or not the Index only consists of only consists of floats, NaNs, or a mix of floats, integers, or NaNs. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
winfo visualsavailable,"Return a list of all visuals available for the screen
of this widget.

Each item in the list consists of a visual name (see winfo_visual), a
depth and if includeids is true is given also the X identifier."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
leaf treeposition,":return: The tree position of the ``index``-th leaf in this
    tree.  I.e., if ``tp=self.leaf_treeposition(i)``, then
    ``self[tp]==self.leaves()[i]``.

:raise IndexError: If this tree contains fewer than ``index+1``
    leaves, or if ``index<0``."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
focus displayof,"Return the widget which has currently the focus on the
display where this widget is located.

Return None if the application does not have the focus."
classify many,"Apply ``self.classify()`` to each element of ``featuresets``.  I.e.:

    return [self.classify(fs) for fs in featuresets]

:rtype: list(label)"
app context processor,"Like :meth:`context_processor`, but for templates rendered by every view, not
only by the blueprint. Equivalent to :meth:`.Flask.context_processor`."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
 delparent,"Update the parent pointer of ``child`` to not point to self.  This
method is only called if the type of ``child`` is ``Tree``; i.e., it
is not called when removing a leaf from a tree.  This method
is always called before the child is actually removed from the
child list of ``self``.

:type child: Tree
:type index: int
:param index: The index of ``child`` in ``self``."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
r Nr,"Return the dictionary mapping r to Nr, the number of samples with frequency r, where Nr > 0.

:type bins: int
:param bins: The number of possible sample outcomes.  ``bins``
    is used to calculate Nr(0).  In particular, Nr(0) is
    ``bins-self.B()``.  If ``bins`` is not specified, it
    defaults to ``self.B()`` (so Nr(0) will be 0).
:rtype: int"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo reqwidth,Return requested width of this widget.
is numeric,Check if the Index only consists of numeric data. Returns ------- bool Whether or not the Index only consists of numeric data. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
tz convert,"Convert tz-aware axis to target time zone.

Parameters
----------
tz : str or tzinfo object
axis : the axis to convert
level : int, str, default None
    If axis is a MultiIndex, convert a specific level. Otherwise
    must be None.
copy : bool, default True
    Also make a copy of the underlying data.

Returns
-------
Series/DataFrame
    Object with time zone converted axis.

Raises
------
TypeError
    If the axis is tz-naive."
winfo reqheight,Return requested height of this widget.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
 named members,Helper method for yielding various names + members of modules.
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
tag raise,"Raise an item TAGORID given in ARGS
(optional above another item)."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
register module,Alias for :func:`add_module`.
value counts,"Return a Series containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default. Parameters ---------- normalize : bool, default False If True then the object returned will contain the relative frequencies of the unique values. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. bins : int, optional Rather than count values, group them into half-open bins, a convenience for ``pd.cut``, only works with numeric data. dropna : bool, default True Don't include counts"
infer objects,"Attempt to infer better dtypes for object columns. Attempts soft conversion of object-dtyped columns, leaving non-object and unconvertible columns unchanged. The inference rules are the same as during normal Series/DataFrame construction. Returns ------- converted : same type as input object See Also -------- to_datetime : Convert argument to datetime. to_timedelta : Convert argument to timedelta. to_numeric : Convert argument to numeric type. convert_dtypes : Convert argument to best possible dtype. Examples -------- >>> df = pd.DataFrame({""A"": [""a"", 1, 2, 3]}) >>> df = df.iloc[1:] >>> df A 1 1 2 2 3 3 >>> df.dtypes A object dtype: object >>>"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
align to,"Permutes the dimensions of the :attr:`self` tensor to match the order specified in :attr:`names`, adding size-one dims for any new names. All of the dims of :attr:`self` must be named in order to use this method. The resulting tensor is a view on the original tensor. All dimension names of :attr:`self` must be present in :attr:`names`. :attr:`names` may contain additional names that are not in ``self.names``; the output tensor has a size-one dimension for each of those new names. :attr:`names` may contain up to one Ellipsis (``...``). The Ellipsis is expanded to be equal to all dimension names of :attr:`self`"
 maybe cast indexer,"If we have a float key and are not a floating index, then try to cast
to an int if equivalent."
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
winfo colormapfull,Return True if at the last color request the colormap was full.
read partial,"Helper function that reads in a feature structure.

:param s: The string to read.
:param position: The position in the string to start parsing.
:param reentrances: A dictionary from reentrance ids to values.
    Defaults to an empty dictionary.
:return: A tuple (val, pos) of the feature structure created by
    parsing and the position where the parsed feature structure ends.
:rtype: bool"
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
 get delete freq,Find the `freq` for self.delete(loc).
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
add assumptions,"Add new assumptions to the assumption list.

:param new_assumptions: new assumptions
:type new_assumptions: list(sem.Expression)"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
to numpy,"A NumPy ndarray representing the values in this Series or Index. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that a copy is made, even if not strictly necessary. na_value : Any, optional The value to use for missing values. The default value depends on `dtype` and the type of the array. .. versionadded:: 1.0.0 **kwargs Additional keywords passed through to the"
sash place,"Place the sash given by index at the given coordinates
        "
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
place slaves,"Return a list of all slaves of this widget
in its packing order."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 validate names,"Handles the quirks of having a singular 'name' parameter for general
Index and plural 'names' parameter for MultiIndex."
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
check coverage,"Check whether the grammar rules cover the given list of tokens.
If not, then raise an exception.

:type tokens: list(str)"
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 sanitize column,"Ensures new columns (which go into the BlockManager as new blocks) are
always copied and converted into an array.

Parameters
----------
value : scalar, Series, or array-like

Returns
-------
numpy.ndarray or ExtensionArray"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
find concordance,"Find all concordance lines given the query word.

Provided with a list of words, these will be found as a phrase."
grid slaves,"Return a list of all slaves of this widget
in its packing order."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 call,"Call the binary with the given input.

:param input_str: A string whose contents are used as stdin.
:param binary: The location of the binary to call
:param args: A list of command-line arguments.
:return: A tuple (stdout, returncode)
:see: ``config_prover9``"
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
register hook,"Registers a backward hook. The hook will be called every time a gradient with respect to the Tensor is computed. The hook should have the following signature:: hook(grad) -> Tensor or None The hook should not modify its argument, but it can optionally return a new gradient which will be used in place of :attr:`grad`. This function returns a handle with a method ``handle.remove()`` that removes the hook from the module. .. note:: See :ref:`backward-hooks-execution` for more information on how when this hook is executed, and how its execution is ordered relative to other hooks. Example:: >>> v = torch.tensor([0.,"
place slaves,"Return a list of all slaves of this widget
in its packing order."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
grab current,"Return widget which has currently the grab in this application
or None."
 get values for loc,"Do a positional lookup on the given Series, returning either a scalar
or a Series.

Assumes that `series.index is self`"
memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
winfo pixels,Rounded integer value of winfo_fpixels.
tag config,Configure a tag TAGNAME.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
debug decisions,"Classifies candidate periods as sentence breaks, yielding a dict for
each that may be used to understand why the decision was made.

See format_debug_decision() to help make this output readable."
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
winfo pointerx,Return the x coordinate of the pointer on the root window.
 validate positional slice,"For positional indexing, a slice must have either int or None
for each of start, stop, and step."
share memory ,"Moves the underlying storage to shared memory.

This is a no-op if the underlying storage is already in shared memory
and for CUDA tensors. Tensors in shared memory cannot be resized."
to series,"Create a Series with both index and values equal to the index keys. Useful with map for returning an indexer based on an index. Parameters ---------- index : Index, optional Index of resulting Series. If None, defaults to original index. name : str, optional Name of resulting Series. If None, defaults to name of original index. Returns ------- Series The dtype will be based on the type of the Index values. See Also -------- Index.to_frame : Convert an Index to a DataFrame. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') By default, the"
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
 tokenize words,"Divide the given text into tokens, using the punkt word
segmentation regular expression, and generate the resulting list
of tokens augmented as three-tuples with two boolean values for whether
the given token occurs at the start of a paragraph or a new line,
respectively."
drop duplicates,"Return DataFrame with duplicate rows removed. Considering certain columns is optional. Indexes, including time indexes are ignored. Parameters ---------- subset : column label or sequence of labels, optional Only consider certain columns for identifying duplicates, by default use all of the columns. keep : {'first', 'last', False}, default 'first' Determines which duplicates (if any) to keep. - ``first`` : Drop duplicates except for the first occurrence. - ``last`` : Drop duplicates except for the last occurrence. - False : Drop all duplicates. inplace : bool, default False Whether to modify the DataFrame rather than creating a new one. ignore_index :"
winfo colormapfull,Return True if at the last color request the colormap was full.
 rs,"Normalize a list of results to a Resultset.

A ResultSet is more consistent with the rest of Beautiful
Soup's API, and ResultSet.__getattr__ has a helpful error
message if you try to treat a list of results as a single
result (a common mistake)."
grid remove,Unmap this widget but remember the grid options.
 validate names,"Handles the quirks of having a singular 'name' parameter for general
Index and plural 'names' parameter for MultiIndex."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 set names,"Set new names on index. Each name has to be a hashable type.

Parameters
----------
values : str or sequence
    name(s) to set
level : int, level name, or sequence of int/level names (default None)
    If the index is a MultiIndex (hierarchical), level(s) to set (None
    for all levels).  Otherwise level must be None

Raises
------
TypeError if each name is not hashable."
 expand,":rtype: iter(Tree) :return: An iterator of all parses that can be generated by expanding the first element of ``frontier`` with ``production``. In particular, if the first element of ``frontier`` is a subtree whose node type is equal to ``production``'s left hand side, then add a child to that subtree for each element of ``production``'s right hand side; and return all parses that can be generated by matching and expanding the remaining elements of ``frontier``. If the first element of ``frontier`` is not a subtree whose node type is equal to ``production``'s left hand side, then return an empty list. If"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 decorate model,":param valuation_str: str with the model builder's output
:param format: str indicating the format for displaying
:return: str"
 get grouper for level,"Get index grouper corresponding to an index level

Parameters
----------
mapper: Group mapping function or None
    Function mapping index values to groups
level : int or None
    Index level, positional
dropna : bool
    dropna from groupby

Returns
-------
grouper : Index
    Index of values to group on.
labels : ndarray of int or None
    Array of locations in level_index.
uniques : Index or None
    Index of unique values for level."
option clear,"Clear the option database.

It will be reloaded if option_add is called."
share memory,See :meth:`torch.Tensor.share_memory_`
 reduce,Perform the reduction type operation if we can.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
slice shift,"Equivalent to `shift` without copying data.

.. deprecated:: 1.2.0
    slice_shift is deprecated,
    use DataFrame/Series.shift instead.

The shifted data will not include the dropped periods and the
shifted axis will be smaller than the original.

Parameters
----------
periods : int
    Number of periods to move, can be positive or negative.
axis : {0 or 'index', 1 or 'columns', None}, default 0
    For `Series` this parameter is unused and defaults to 0.

Returns
-------
shifted : same type as caller

Notes
-----
While the `slice_shift` is faster than `shift`, you may pay for it
later during alignment."
 get node,Outdated method to access the node value; use the label() method instead.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
winfo exists,Return true if this widget exists.
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
drop duplicates,"Return Index with duplicate values removed. Parameters ---------- keep : {'first', 'last', ``False``}, default 'first' - 'first' : Drop duplicates except for the first occurrence. - 'last' : Drop duplicates except for the last occurrence. - ``False`` : Drop all duplicates. Returns ------- deduplicated : Index See Also -------- Series.drop_duplicates : Equivalent method on Series. DataFrame.drop_duplicates : Equivalent method on DataFrame. Index.duplicated : Related method on Index, indicating duplicate Index values. Examples -------- Generate an pandas.Index with duplicate values. >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo']) The `keep` parameter controls which duplicate values are removed. The value 'first'"
get num boosting rounds,Gets the number of xgboost boosting rounds.
  ior  ,"Inplace union is the maximum of value from either counter.

>>> c = Counter('abbb')
>>> c |= Counter('bcc')
>>> c
Counter({'b': 3, 'c': 2, 'a': 1})"
 sort levels monotonic,Compat with MultiIndex.
 maybe cast slice bound,"This function should be overloaded in subclasses that allow non-trivial
casting on label-slice bounds, e.g. datetime-like indices allowing
strings containing formatted datetimes.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.3.0

Returns
-------
label : object

Notes
-----
Value of `side` parameter should be validated in caller."
 build index,"Build a list self._index such that self._index[i] is a list
of the alignments originating from word i."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
make dataset,Return a new low-level dataset identifier for a virtual dataset 
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
last valid index,"Return index for last non-NA value or None, if no non-NA value is found.

Returns
-------
scalar : type of index

Notes
-----
If all elements are non-NA/null, returns None.
Also returns None for empty Series/DataFrame."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
random sample,"Randomly sample the HMM to generate a sentence of a given length. This
samples the prior distribution then the observation distribution and
transition distribution for each subsequent observation and state.
This will mostly generate unintelligible garbage, but can provide some
amusement.

:return:        the randomly created state/observation sequence,
                generated according to the HMM's probability
                distributions. The SUBTOKENS have TEXT and TAG
                properties containing the observation and state
                respectively.
:rtype:         list
:param rng:     random number generator
:type rng:      Random (or any object with a random() method)
:param length:  desired output length
:type length:   int"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
tag prevrange,"Return a list of start and end index for the first sequence of
characters between INDEX1 and INDEX2 which all have tag TAGNAME.
The text is searched backwards from INDEX1."
 deprecated arg,Issue a FutureWarning if the arg/kwarg is not no_default.
winfo screen,Return the screen name of this widget.
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
  eq  ,Return self==value.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
retract bindings,:see: ``nltk.featstruct.retract_bindings()``
place info,"Return information about the placing options
for this widget."
tk popup,"Post the menu at position X,Y with entry ENTRY."
row op,"In-place operation on row ``i`` using two-arg functor whose args are
interpreted as ``(self[i, j], j)``.

Examples
========

>>> from sympy.matrices import SparseMatrix
>>> M = SparseMatrix.eye(3)*2
>>> M[0, 1] = -1
>>> M.row_op(1, lambda v, j: v + 2*M[0, j]); M
Matrix([
[2, -1, 0],
[4,  0, 0],
[0,  0, 2]])

See Also
========
row
zip_row_op
col_op"
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
 set tstate lock,"Set a lock object which will be released by the interpreter when
the underlying thread state (see pystate.h) gets deleted."
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
load model,"Load the model from a file.

The model is loaded from an XGBoost internal format which is universal
among the various XGBoost interfaces. Auxiliary attributes of the
Python Booster object (such as feature names) will not be loaded.

Parameters
----------
fname : string
    Input file name."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
get indexer,"Compute indexer and mask for new index given the current index. The indexer should be then used as an input to ndarray.take to align the current data to the new index. Parameters ---------- target : Index method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional * default: exact matches only. * pad / ffill: find the PREVIOUS index value if no exact match. * backfill / bfill: use NEXT index value if no exact match * nearest: use the NEAREST index value if no exact match. Tied distances are broken by preferring the larger index value. limit : int, optional Maximum number"
collocation list,"Return collocations derived from the text, ignoring stopwords.

    >>> from nltk.book import text4
    >>> text4.collocation_list()[:2]
    [('United', 'States'), ('fellow', 'citizens')]

:param num: The maximum number of collocations to return.
:type num: int
:param window_size: The number of tokens spanned by a collocation (default=2)
:type window_size: int
:rtype: list(tuple(str, str))"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
is alive,"Return whether the thread is alive.

This method returns True just before the run() method starts until just
after the run() method terminates. See also the module function
enumerate()."
infer objects,"Attempt to infer better dtypes for object columns. Attempts soft conversion of object-dtyped columns, leaving non-object and unconvertible columns unchanged. The inference rules are the same as during normal Series/DataFrame construction. Returns ------- converted : same type as input object See Also -------- to_datetime : Convert argument to datetime. to_timedelta : Convert argument to timedelta. to_numeric : Convert argument to numeric type. convert_dtypes : Convert argument to best possible dtype. Examples -------- >>> df = pd.DataFrame({""A"": [""a"", 1, 2, 3]}) >>> df = df.iloc[1:] >>> df A 1 1 2 2 3 3 >>> df.dtypes A object dtype: object >>>"
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
to flat index,"Identity method.

This is implemented for compatibility with subclass implementations
when chaining.

Returns
-------
pd.Index
    Caller.

See Also
--------
MultiIndex.to_flat_index : Subclass implementation."
parse tagged sents,"Use MaltParser to parse multiple POS tagged sentences. Takes multiple
sentences where each sentence is a list of (word, tag) tuples.
The sentences must have already been tokenized and tagged.

:param sentences: Input sentences to parse
:type sentence: list(list(tuple(str, str)))
:return: iter(iter(``DependencyGraph``)) the dependency graph
representation of each sentence"
 maybe cast listlike indexer,Analogue to maybe_cast_indexer for get_indexer instead of get_loc.
 lazy load hook,"load_state_dict pre-hook function for lazy buffers and parameters.

The purpose of this hook is to adjust the current state and/or
``state_dict`` being loaded so that a module instance serialized in
both un/initialized state can be deserialized onto both un/initialized
module instance.
See comment in ``torch.nn.Module._register_load_state_dict_pre_hook``
for the details of the hook specification."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
tag lower,"Lower an item TAGORID given in ARGS
(optional below another item)."
winfo parent,Return the name of the parent of this widget.
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 gotitem,"Sub-classes to define. Return a sliced object.

Parameters
----------
key : string / list of selections
ndim : {1, 2}
    Requested ndim of result.
subset : object, default None
    Subset to act on."
print assumptions,Print the list of the current assumptions.
 raise if missing,"Check that indexer can be used to return a result.

e.g. at least one element was found,
unless the list of keys was actually empty.

Parameters
----------
key : list-like
    Targeted labels (only used to show correct error message).
indexer: array-like of booleans
    Indices corresponding to the key,
    (with -1 indicating not found).
axis_name : str

Raises
------
KeyError
    If at least one key was requested but none was found."
register module,Alias for :func:`add_module`.
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
app template test,"Register a template test, available in any template rendered by the
application. Equivalent to :meth:`.Flask.template_test`.

.. versionadded:: 0.10

:param name: the optional name of the test, otherwise the
             function name will be used."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
load state dict,"Loads the optimizer state.

Args:
    state_dict (dict): optimizer state. Should be an object returned
        from a call to :meth:`state_dict`."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 str,":return: A list of lines composing a string representation of
    this feature dictionary.
:param reentrances: A dictionary that maps from the ``id`` of
    each feature value in self, indicating whether that value
    is reentrant or not.
:param reentrance_ids: A dictionary mapping from each ``id``
    of a feature value to a unique identifier.  This is modified
    by ``repr``: the first time a reentrant feature value is
    displayed, an identifier is added to ``reentrance_ids`` for
    it."
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
 get indexer level 0,Optimized equivalent to `self.get_level_values(0).get_indexer_for(target)`.
winfo atomname,Return name of atom with identifier ID.
 is label or level reference,"Test whether a key is a label or level reference for a given axis.

To be considered either a label or a level reference, `key` must be a
string that:
  - (axis=0): Matches a column label or an index level
  - (axis=1): Matches an index label or a column level

Parameters
----------
key : Hashable
    Potential label or level name
axis : int, default 0
    Axis that levels are associated with (0 for index, 1 for columns)

Returns
-------
bool"
include router,"Include an `APIRouter` in the same app.

Read more about it in the
[FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).

## Example

```python
from fastapi import FastAPI

from .users import users_router

app = FastAPI()

app.include_router(users_router)
```"
 is comparable dtype,Can we compare values of the given dtype to our own?
collect by name,See :meth:`Pytester.collect_by_name`.
 apply filter,"Generic filter removes ngrams from the frequency distribution
if the function returns True when passed an ngram tuple."
grid info,"Return information about the options
for positioning this widget in a grid."
register module,Alias for :func:`add_module`.
choose tag,"Decide which tag should be used for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, return None -- do not consult
the backoff tagger.  This method should be overridden by
subclasses of SequentialBackoffTagger.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
winfo width,Return the width of this widget.
 reduce,Perform the reduction type operation if we can.
winfo screen,Return the screen name of this widget.
 ensure supporting files,Create supporting files in the cache dir that are not really part of the cache.
write bytes,"Open the file in bytes mode, write to it, and close the file."
guess language,"Find the language with the min distance
to the text and return its ISO 639-3 code"
winfo id,Return identifier ID for this widget.
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
from MonogenicFiniteExtension,Convert an ``ExtensionElement`` to ``dtype``. 
option clear,"Clear the option database.

It will be reloaded if option_add is called."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
value counts,"Return a Series containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default. Parameters ---------- normalize : bool, default False If True then the object returned will contain the relative frequencies of the unique values. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. bins : int, optional Rather than count values, group them into half-open bins, a convenience for ``pd.cut``, only works with numeric data. dropna : bool, default True Don't include counts"
is char device,Whether this path is a character device.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
at time,"Select values at particular time of day (e.g., 9:30AM). Parameters ---------- time : datetime.time or str axis : {0 or 'index', 1 or 'columns'}, default 0 For `Series` this parameter is unused and defaults to 0. Returns ------- Series or DataFrame Raises ------ TypeError If the index is not a :class:`DatetimeIndex` See Also -------- between_time : Select values between particular times of the day. first : Select initial periods of time series based on a date offset. last : Select final periods of time series based on a date offset. DatetimeIndex.indexer_at_time : Get just the index locations for values at"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
winfo parent,Return the name of the parent of this widget.
to numpy,"Convert the DataFrame to a NumPy array. By default, the dtype of the returned array will be the common NumPy dtype of all types in the DataFrame. For example, if the dtypes are ``float16`` and ``float32``, the results dtype will be ``float32``. This may require copying data and coercing values, which may be expensive. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
wm frame,Return identifier for decorative frame of this widget if present.
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
 values for rank,"For correctly ranking ordered categorical data. See GH#15420

Ordered categorical data should be ranked on the basis of
codes with -1 translated to NaN.

Returns
-------
numpy.array"
doit numerically,"Evaluate the derivative at z numerically.

When we can represent derivatives at a point, this should be folded
into the normal evalf. For now, we need a special method."
unique consecutive,"Eliminates all but the first element from every consecutive group of equivalent elements.

See :func:`torch.unique_consecutive`"
winfo reqheight,Return requested height of this widget.
prepare url,Prepares the given HTTP URL.
winfo width,Return the width of this widget.
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
pack slaves,"Return a list of all slaves of this widget
in its packing order."
winfo toplevel,Return the toplevel widget of this widget.
is chomsky normal form,"Return True if the grammar is of Chomsky Normal Form, i.e. all productions
are of the form A -> B C, or A -> ""s""."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
prob all alignments,"Computes the probability of all possible word alignments,
expressed as a marginal distribution over target words t

Each entry in the return value represents the contribution to
the total alignment probability by the target word t.

To obtain probability(alignment | src_sentence, trg_sentence),
simply sum the entries in the return value.

:return: Probability of t for all s in ``src_sentence``
:rtype: dict(str): float"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
share memory,See :meth:`torch.Tensor.share_memory_`
 maybe disable logical methods,raise if this Index subclass does not support any or all.
get namespace,"Returns a dictionary containing a subset of configuration options
that match the specified namespace/prefix. Example usage::

    app.config['IMAGE_STORE_TYPE'] = 'fs'
    app.config['IMAGE_STORE_PATH'] = '/var/app/images'
    app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'
    image_store_config = app.config.get_namespace('IMAGE_STORE_')

The resulting dictionary `image_store_config` would look like::

    {
        'type': 'fs',
        'path': '/var/app/images',
        'base_url': 'http://img.website.com'
    }

This is often useful when configuration options map directly to
keyword arguments in functions or class constructors.

:param namespace: a configuration namespace
:param lowercase: a flag indicating if the keys of the resulting
                  dictionary should be lowercase
:param trim_namespace: a flag indicating if the keys of the resulting
                  dictionary should not include the namespace

.. versionadded:: 0.11"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
to native types,"Format specified values of `self` and return them.

.. deprecated:: 1.2.0

Parameters
----------
slicer : int, array-like
    An indexer into `self` that specifies which values
    are used in the formatting process.
kwargs : dict
    Options for specifying how the values should be formatted.
    These options include the following:

    1) na_rep : str
        The value that serves as a placeholder for NULL values
    2) quoting : bool or None
        Whether or not there are quoted values in `self`
    3) date_format : str
        The format used to represent date-like values.

Returns
-------
numpy.ndarray
    Formatted values."
setup context,"There are two ways to define the forward pass of an autograd.Function.

Either:

1. Override forward with the signature forward(ctx, *args, **kwargs).
   ``setup_context`` is not overridden. Setting up the ctx for backward
   happens inside the ``forward``.
2. Override forward with the signature forward(*args, **kwargs) and
   override ``setup_context``. Setting up the ctx for backward happens
   inside ``setup_context`` (as opposed to inside the ``forward``)

See :meth:`torch.autograd.Function.forward` and :ref:`extending-autograd` for more details."
yview pickplace,"Obsolete function, use see."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo reqwidth,Return requested width of this widget.
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
is lexical,"Return True if the right-hand contain at least one terminal token.

:rtype: bool"
as expr set pairs,"Return tuples for each argument of self that give the expression and the interval in which it is valid which is contained within the given domain. If a condition cannot be converted to a set, an error will be raised. The variable of the conditions is assumed to be real; sets of real values are returned. Examples ======== >>> from sympy import Piecewise, Interval >>> from sympy.abc import x >>> p = Piecewise( ... (1, x < 2), ... (2,(x > 0) & (x < 4)), ... (3, True)) >>> p.as_expr_set_pairs() [(1, Interval.open(-oo, 2)), (2, Interval.Ropen(2, 4)), (3, Interval(4, oo))]"
to sparse coo,"Convert a tensor to :ref:`coordinate format <sparse-coo-docs>`.

Examples::

     >>> dense = torch.randn(5, 5)
     >>> sparse = dense.to_sparse_coo()
     >>> sparse._nnz()
     25"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
is nonlexical,"Return True if the right-hand side only contains ``Nonterminals``

:rtype: bool"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
find overlapping,"Return all items which overlap the rectangle
defined by X1,Y1,X2,Y2."
 set dtype,"Internal method for directly updating the CategoricalDtype

Parameters
----------
dtype : CategoricalDtype

Notes
-----
We don't do any validation here. It's assumed that the dtype is
a (valid) instance of `CategoricalDtype`."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 eval is superset,Returns a fuzzy bool for whether self is a subset of other.
share memory,See :meth:`torch.Tensor.share_memory_`
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
register module,Alias for :func:`add_module`.
 rename,fastpath for rename if new name is already validated.
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
is block device,Whether this path is a block device.
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
add assumptions,"Add new assumptions to the assumption list.

:param new_assumptions: new assumptions
:type new_assumptions: list(sem.Expression)"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
 dir deletions,Delete unwanted __dir__ for this object.
winfo ismapped,Return true if this widget is mapped.
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
memory usage,"Memory usage of my values

Parameters
----------
deep : bool
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption

Returns
-------
bytes used

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False

See Also
--------
numpy.ndarray.nbytes"
grid slaves,"Return a list of all slaves of this widget
in its packing order."
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
winfo atomname,Return name of atom with identifier ID.
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 call prover9,"Call the ``prover9`` binary with the given input.

:param input_str: A string whose contents are used as stdin.
:param args: A list of command-line arguments.
:return: A tuple (stdout, returncode)
:see: ``config_prover9``"
register module,Alias for :func:`add_module`.
is parallel,"Are two linear entities parallel? Parameters ========== l1 : LinearEntity l2 : LinearEntity Returns ======= True : if l1 and l2 are parallel, False : otherwise. See Also ======== coefficients Examples ======== >>> from sympy import Point, Line >>> p1, p2 = Point(0, 0), Point(1, 1) >>> p3, p4 = Point(3, 4), Point(6, 7) >>> l1, l2 = Line(p1, p2), Line(p3, p4) >>> Line.is_parallel(l1, l2) True >>> p5 = Point(6, 6) >>> l3 = Line(p3, p5) >>> Line.is_parallel(l1, l3) False >>> from sympy import Point3D, Line3D >>> p1, p2 = Point3D(0, 0, 0), Point3D(3, 4, 5) >>> p3, p4 ="
 find valid index,"Retrieves the index of the first valid value.

Parameters
----------
how : {'first', 'last'}
    Use this parameter to change between the first or last valid index.

Returns
-------
idx_first_valid : type of index"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
wm command,"Store VALUE in WM_COMMAND property. It is the command
which shall be used to invoke the application. Return current
command if VALUE is None."
pin memory,"Coppies the  storage to pinned memory, if it's not already pinned."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
choose tag,"Decide which tag should be used for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, return None -- do not consult
the backoff tagger.  This method should be overridden by
subclasses of SequentialBackoffTagger.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
detect language,"Detect the blob's language using the Google Translate API.

Requires an internet connection.

Usage:
::

    >>> b = TextBlob(""bonjour"")
    >>> b.detect_language()
    u'fr'

Language code reference:
    https://developers.google.com/translate/v2/using_rest#language-params

.. versionadded:: 0.5.0

:rtype: str"
raw tag sents,"Tag multiple sentences.

Takes multiple sentences as a list where each sentence is a string.

:param sentences: Input sentences to tag
:type sentences: list(str)
:rtype: list(list(list(tuple(str, str)))"
load array,"Load an sequence of annotation results, appending to any data already loaded.

The argument is a sequence of 3-tuples, each representing a coder's labeling of an item:
    (coder,item,label)"
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
share memory,See :meth:`torch.Tensor.share_memory_`
winfo reqheight,Return requested height of this widget.
left sibling,"The left sibling of this tree, or None if it has none."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
to json,"Convert the object to a JSON string. Note NaN's and None will be converted to null and datetime objects will be converted to UNIX timestamps. Parameters ---------- path_or_buf : str, path object, file-like object, or None, default None String, path object (implementing os.PathLike[str]), or file-like object implementing a write() function. If None, the result is returned as a string. orient : str Indication of expected JSON string format. * Series: - default is 'index' - allowed values are: {'split', 'records', 'index', 'table'}. * DataFrame: - default is 'columns' - allowed values are: {'split', 'records', 'index', 'columns', 'values', 'table'}. * The"
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
 maybe check unique,"Check that an Index has no duplicates.

This is typically only called via
`NDFrame.flags.allows_duplicate_labels.setter` when it's set to
True (duplicates aren't allowed).

Raises
------
DuplicateLabelError
    When the index is not unique."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
 delparent,"Update the parent pointer of ``child`` to not point to self.  This
method is only called if the type of ``child`` is ``Tree``; i.e., it
is not called when removing a leaf from a tree.  This method
is always called before the child is actually removed from the
child list of ``self``.

:type child: Tree
:type index: int
:param index: The index of ``child`` in ``self``."
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
trace vinfo,"Return all trace callback information.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_info() instead."
to fol,"Convert this expression into a First-Order Logic expression.

:param expression: an expression
:type expression: Expression
:return: a FOL version of the input expression
:rtype: Expression"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
register module,Alias for :func:`add_module`.
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
