Method Name,Description
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
wm geometry,"Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
current value if None is given."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
wm frame,Return identifier for decorative frame of this widget if present.
 reset cache,"Reset cached properties. If ``key`` is passed, only clears that key."
get indexer,"Compute indexer and mask for new index given the current index. The indexer should be then used as an input to ndarray.take to align the current data to the new index. Parameters ---------- target : Index method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional * default: exact matches only. * pad / ffill: find the PREVIOUS index value if no exact match. * backfill / bfill: use NEXT index value if no exact match * nearest: use the NEAREST index value if no exact match. Tied distances are broken by preferring the larger index value. limit : int, optional Maximum number"
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 rename,fastpath for rename if new name is already validated.
share memory,See :meth:`torch.Tensor.share_memory_`
winfo pointery,Return the y coordinate of the pointer on the root window.
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
winfo visualid,Return the X identifier for the visual for this widget.
 intersection via get indexer,"Find the intersection of two Indexes using get_indexer.

Returns
-------
np.ndarray or ExtensionArray
    The returned array will be unique."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
test cli runner,"Create a CLI runner for testing CLI commands.
See :ref:`testing-cli`.

Returns an instance of :attr:`test_cli_runner_class`, by default
:class:`~flask.testing.FlaskCliRunner`. The Flask app object is
passed as the first argument.

.. versionadded:: 1.0"
calc dist,"Calculate the ""out-of-place"" measure between the
text and language profile for a single trigram"
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
register module,Alias for :func:`add_module`.
 eval rewrite as sign,"Represents the Heaviside function in the form of sign function. Explanation =========== The value of the second argument of Heaviside must specify Heaviside(0) = 1/2 for rewritting as sign to be strictly equivalent. For easier usage, we also allow this rewriting when Heaviside(0) is undefined. Examples ======== >>> from sympy import Heaviside, Symbol, sign, S >>> x = Symbol('x', real=True) >>> Heaviside(x, H0=S.Half).rewrite(sign) sign(x)/2 + 1/2 >>> Heaviside(x, 0).rewrite(sign) Piecewise((sign(x)/2 + 1/2, Ne(x, 0)), (0, True)) >>> Heaviside(x - 2, H0=S.Half).rewrite(sign) sign(x - 2)/2 + 1/2 >>> Heaviside(x**2 - 2*x + 1, H0=S.Half).rewrite(sign) sign(x**2 - 2*x + 1)/2 + 1/2"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
apply ngram filter,"Removes candidate ngrams (w1, w2, ...) where fn(w1, w2, ...)
evaluates to True."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 maybe promote,"When dealing with an object-dtype Index and a non-object Index, see
if we can upcast the object-dtype one to improve performance."
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
register module,Alias for :func:`add_module`.
winfo geometry,"Return geometry string for this widget in the form ""widthxheight+X+Y""."
grab current,"Return widget which has currently the grab in this application
or None."
place slaves,"Return a list of all slaves of this widget
in its packing order."
 is comparable dtype,Can we compare values of the given dtype to our own?
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
winfo pointery,Return the y coordinate of the pointer on the root window.
chart parse,"Return the final parse ``Chart`` from which all possible
parse trees can be extracted.

:param tokens: The sentence to be parsed
:type tokens: list(str)
:rtype: Chart"
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
winfo interps,Return the name of all Tcl interpreters for this display.
winfo exists,Return true if this widget exists.
 maybe cast indexer,"If we have a float key and are not a floating index, then try to cast
to an int if equivalent."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
xview moveto,"Adjusts the view in the window so that FRACTION of the
total width of the canvas is off-screen to the left."
substitute bindings,:see: ``nltk.featstruct.substitute_bindings()``
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
get indexer for,"Guaranteed return of an indexer even when non-unique.

This dispatches to get_indexer or get_indexer_non_unique
as appropriate.

Returns
-------
np.ndarray[np.intp]
    List of indices.

Examples
--------
>>> idx = pd.Index([np.nan, 'var1', np.nan])
>>> idx.get_indexer_for([np.nan])
array([0, 2])"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
  bytes  ,"Return the bytes representation of the path.  This is only
recommended to use under Unix."
to frame,"Create a DataFrame with a column containing the Index. Parameters ---------- index : bool, default True Set the index of the returned DataFrame as the original Index. name : object, default None The passed name should substitute for the index name (if it has one). Returns ------- DataFrame DataFrame containing the original Index data. See Also -------- Index.to_series : Convert an Index to a Series. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') >>> idx.to_frame() animal animal Ant Ant Bear Bear Cow Cow By default, the original Index is reused. To enforce a"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 validate fill value,Convert value to be insertable to underlying array.
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 cast quantile result,"Cast the result of quantile_with_mask to an appropriate dtype
to pass to _from_backing_data in _quantile."
winfo geometry,"Return geometry string for this widget in the form ""widthxheight+X+Y""."
 reindex non unique,"Create a new index with target's values (move/add/delete values as
necessary) use with non-unique Index and a possibly non-unique target.

Parameters
----------
target : an iterable

Returns
-------
new_index : pd.Index
    Resulting index.
indexer : np.ndarray[np.intp]
    Indices of output values in original index.
new_indexer : np.ndarray[np.intp] or None"
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
winfo pixels,Rounded integer value of winfo_fpixels.
option clear,"Clear the option database.

It will be reloaded if option_add is called."
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 values,"Return an iterable of the feature values directly defined
by this FeatStruct."
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
 deprecated arg,Issue a FutureWarning if the arg/kwarg is not no_default.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
pack slaves,"Return a list of all slaves of this widget
in its packing order."
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
 named members,Helper method for yielding various names + members of modules.
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
grab current,"Return widget which has currently the grab in this application
or None."
tokenize sents,"Tokenize multiple sentences using Repp.

:param sentences: A list of sentence strings.
:type sentences: list(str)
:return: A list of tuples of tokens
:rtype: iter(tuple(str))"
parse to readings,:see: ReadingCommand.parse_to_readings()
set logprob,"Set the log probability associated with this object to
``logprob``.  I.e., set the probability associated with this
object to ``2**(logprob)``.

:param logprob: The new log probability
:type logprob: float"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
left siblings,"A list of all left siblings of this tree, in any of its parent
trees.  A tree may be its own left sibling if it is used as
multiple contiguous children of the same parent.  A tree may
appear multiple times in this list if it is the left sibling
of this tree with respect to multiple parents.

:type: list(MultiParentedTree)"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
write text,"Open the file in text mode, write to it, and close the file."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
zero grad,"Sets the gradients of all optimized :class:`torch.Tensor` s to zero. Args: set_to_none (bool): instead of setting to zero, set the grads to None. This will in general have lower memory footprint, and can modestly improve performance. However, it changes certain behaviors. For example: 1. When the user tries to access a gradient and perform manual ops on it, a None attribute or a Tensor full of 0s will behave differently. 2. If the user requests ``zero_grad(set_to_none=True)`` followed by a backward pass, ``.grad``\ s are guaranteed to be None for params that did not receive a gradient. 3. ``torch.optim`` optimizers have"
apply word filter,"Removes candidate ngrams (w1, w2, ...) where any of (fn(w1), fn(w2),
...) evaluates to True."
share memory,See :meth:`torch.Tensor.share_memory_`
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
parse repp outputs,"This module parses the tri-tuple format that REPP outputs using the
""--format triple"" option and returns an generator with tuple of string
tokens.

:param repp_output:
:type repp_output: type
:return: an iterable of the tokenized sentences as tuples of strings
:rtype: iter(tuple)"
trace info,Return all trace callback information.
extend to no,"Extend to include the ith prime number.

Parameters
==========

i : integer

Examples
========

>>> from sympy import sieve
>>> sieve._reset() # this line for doctest only
>>> sieve.extend_to_no(9)
>>> sieve._list
array('l', [2, 3, 5, 7, 11, 13, 17, 19, 23])

Notes
=====

The list is extended by 50% if it is too short, so it is
likely that it will be longer than requested."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
register blueprint,"Register a :class:`~flask.Blueprint` on this blueprint. Keyword
arguments passed to this method will override the defaults set
on the blueprint.

.. versionchanged:: 2.0.1
    The ``name`` option can be used to change the (pre-dotted)
    name the blueprint is registered with. This allows the same
    blueprint to be registered multiple times with unique names
    for ``url_for``.

.. versionadded:: 2.0"
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
 transform output,"Transform the output file into any Mace4 ``interpformat`` format.

:param format: Output format for displaying models.
:type format: str"
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 intersection,intersection specialized to the case with matching dtypes.
pack slaves,"Return a list of all slaves of this widget
in its packing order."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 validate can reindex,"Check if we are allowing reindexing with this particular indexer.

Parameters
----------
indexer : an integer ndarray

Raises
------
ValueError if its a duplicate axis"
has uninitialized params,"Check if a module has parameters that are not initialized
        "
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
get float info,"Get float property from the DMatrix.

Parameters
----------
field: str
    The field name of the information

Returns
-------
info : array
    a numpy array of float information of the data"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
dump model,"Dump model into a text or JSON file.  Unlike `save_model`, the
output format is primarily used for visualization or interpretation,
hence it's more human readable but cannot be loaded back to XGBoost.

Parameters
----------
fout : string or os.PathLike
    Output file name.
fmap : string or os.PathLike, optional
    Name of the file containing feature map names.
with_stats : bool, optional
    Controls whether the split statistics are output.
dump_format : string, optional
    Format of model dump file. Can be 'text' or 'json'."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
sort queue,"Sort the given queue of edges, in descending order of the
inside probabilities of the edges' trees.

:param queue: The queue of ``Edge`` objects to sort.  Each edge in
    this queue is an edge that could be added to the chart by
    the fundamental rule; but that has not yet been added.
:type queue: list(Edge)
:param chart: The chart being used to parse the text.  This
    chart can be used to provide extra information for sorting
    the queue.
:type chart: Chart
:rtype: None"
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
deregister hook,"Deregister a previously registered hook.
Returns True if the hook existed, False if not."
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
winfo pointery,Return the y coordinate of the pointer on the root window.
register module,Alias for :func:`add_module`.
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
combine first,"Update null elements with value in the same location in `other`. Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame. The row and column indexes of the resulting DataFrame will be the union of the two. The resulting dataframe contains the 'first' dataframe values and overrides the second one values where both first.loc[index, col] and second.loc[index, col] are not missing values, upon calling first.combine_first(second). Parameters ---------- other : DataFrame Provided DataFrame to use to fill null values. Returns ------- DataFrame The result of combining the provided DataFrame with the other object. See"
set data,"Sets a new string as response.  The value must be a string or
bytes. If a string is set it's encoded to the charset of the
response (utf-8 by default).

.. versionadded:: 0.9"
register module,Alias for :func:`add_module`.
trace variable,"Define a trace callback for the variable.

MODE is one of ""r"", ""w"", ""u"" for read, write, undefine.
CALLBACK must be a function which is called when
the variable is read, written or undefined.

Return the name of the callback.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_add() instead."
xview scroll,"Shift the x-view according to NUMBER which is measured in ""units""
or ""pages"" (WHAT)."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
grid slaves,"Return a list of all slaves of this widget
in its packing order."
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
to list,"Return a list of the values.

These are each a scalar type, which is a Python scalar
(for str, int, float) or a pandas scalar
(for Timestamp/Timedelta/Interval/Period)

Returns
-------
list

See Also
--------
numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
    nested list of Python scalars."
 set node,Outdated method to set the node value; use the set_label() method instead.
 interpret value,Interpret a single config value.
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
 from join target,"Cast the ndarray returned from one of the libjoin.foo_indexer functions
back to type(self)._data."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
yview scroll,"Shift the y-view according to NUMBER which is measured in
""units"" or ""pages"" (WHAT)."
tag bind,"Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.

An additional boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or whether it will
replace the previous function. See bind for the return value."
is categorical,Check if the Index holds categorical data. Returns ------- bool True if the Index is categorical. See Also -------- CategoricalIndex : Index for categorical data. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples --------
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 get values for loc,"Do a positional lookup on the given Series, returning either a scalar
or a Series.

Assumes that `series.index is self`

key is included for MultiIndex compat."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
 setup,Internal function. Sets up information about children.
 cumulative frequencies,"Return the cumulative frequencies of the specified samples.
If no samples are specified, all counts are returned, starting
with the largest.

:param samples: the samples whose frequencies should be returned.
:type samples: any
:rtype: list(float)"
is algebraic expr,"This tests whether a given expression is algebraic or not, in the given symbols, syms. When syms is not given, all free symbols will be used. The rational function does not have to be in expanded or in any kind of canonical form. This function returns False for expressions that are ""algebraic expressions"" with symbolic exponents. This is a simple extension to the is_rational_function, including rational exponentiation. Examples ======== >>> from sympy import Symbol, sqrt >>> x = Symbol('x', real=True) >>> sqrt(1 + x).is_rational_function() False >>> sqrt(1 + x).is_algebraic_expr() True This function does not attempt any nontrivial simplifications that may"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
 consolidate,"Compute NDFrame with ""consolidated"" internals (data of each dtype
grouped together in a single ndarray).

Returns
-------
consolidated : same type as caller"
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
pack info,"Return information about the packing options
for this widget."
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
winfo interps,Return the name of all Tcl interpreters for this display.
drop duplicates,"Return Index with duplicate values removed. Parameters ---------- keep : {'first', 'last', ``False``}, default 'first' - 'first' : Drop duplicates except for the first occurrence. - 'last' : Drop duplicates except for the last occurrence. - ``False`` : Drop all duplicates. Returns ------- deduplicated : Index See Also -------- Series.drop_duplicates : Equivalent method on Series. DataFrame.drop_duplicates : Equivalent method on DataFrame. Index.duplicated : Related method on Index, indicating duplicate Index values. Examples -------- Generate an pandas.Index with duplicate values. >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo']) The `keep` parameter controls which duplicate values are removed. The value 'first'"
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
 get networks key,"Network-only key function.

Returns an object that identifies this address' network and
netmask. This function is a suitable ""key"" argument for sorted()
and list.sort()."
select pipes,"Disable one or more pipeline components. If used as a context
manager, the pipeline will be restored to the initial state at the end
of the block. Otherwise, a DisabledPipes object is returned, that has
a `.restore()` method you can use to undo your changes.

disable (str or iterable): The name(s) of the pipes to disable
enable (str or iterable): The name(s) of the pipes to enable - all others will be disabled

DOCS: https://spacy.io/api/language#select_pipes"
load model,"Load the model from a file.

The model is loaded from an XGBoost internal format which is universal
among the various XGBoost interfaces. Auxiliary attributes of the
Python Booster object (such as feature names) will not be loaded.

Parameters
----------
fname : string
    Input file name."
handle user exception,"This method is called whenever an exception occurs that
should be handled. A special case is :class:`~werkzeug
.exceptions.HTTPException` which is forwarded to the
:meth:`handle_http_exception` method. This function will either
return a response value or reraise the exception with the same
traceback.

.. versionchanged:: 1.0
    Key errors raised from request data like ``form`` show the
    bad key in debug mode rather than a generic bad request
    message.

.. versionadded:: 0.7"
wm protocol,"Bind function FUNC to command NAME for this widget.
Return the function bound to NAME if None is given. NAME could be
e.g. ""WM_SAVE_YOURSELF"" or ""WM_DELETE_WINDOW""."
to disk,Serialize the config to a file.
grid forget,Unmap this widget.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
is floating,"Check if the Index is a floating type. The Index may consist of only floats, NaNs, or a mix of floats, integers, or NaNs. Returns ------- bool Whether or not the Index only consists of only consists of floats, NaNs, or a mix of floats, integers, or NaNs. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
record once,"Works like :meth:`record` but wraps the function in another
function that will ensure the function is only called once.  If the
blueprint is registered a second time on the application, the
function passed is not called."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
grid size,Return a tuple of the number of column and rows in the grid.
drop duplicates,"Return Index with duplicate values removed. Parameters ---------- keep : {'first', 'last', ``False``}, default 'first' - 'first' : Drop duplicates except for the first occurrence. - 'last' : Drop duplicates except for the last occurrence. - ``False`` : Drop all duplicates. Returns ------- deduplicated : Index See Also -------- Series.drop_duplicates : Equivalent method on Series. DataFrame.drop_duplicates : Equivalent method on DataFrame. Index.duplicated : Related method on Index, indicating duplicate Index values. Examples -------- Generate an pandas.Index with duplicate values. >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo']) The `keep` parameter controls which duplicate values are removed. The value 'first'"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
is categorical,Check if the Index holds categorical data. Returns ------- bool True if the Index is categorical. See Also -------- CategoricalIndex : Index for categorical data. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples --------
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
winfo id,Return identifier ID for this widget.
 nbytes,"return the number of bytes in the underlying data
deeply introspect the level data if deep=True

include the engine hashtable

*this is in internal routine*"
sort index,"Sort object by labels (along an axis). Returns a new DataFrame sorted by label if `inplace` argument is ``False``, otherwise updates the original DataFrame and returns None. Parameters ---------- axis : {0 or 'index', 1 or 'columns'}, default 0 The axis along which to sort. The value 0 identifies the rows, and 1 identifies the columns. level : int or level name or list of ints or list of level names If not None, sort on values in specified index level(s). ascending : bool or list-like of bools, default True Sort ascending vs. descending. When the index is a MultiIndex"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
 setparent,"Update the parent pointer of ``child`` to point to ``self``. This method is only called if the type of ``child`` is ``Tree``; i.e., it is not called when adding a leaf to a tree. This method is always called before the child is actually added to the child list of ``self``. :type child: Tree :type index: int :param index: The index of ``child`` in ``self``. :raise TypeError: If ``child`` is a tree with an impropriate type. Typically, if ``child`` is a tree, then its type needs to match the type of ``self``. This prevents mixing of different tree types (single-parented,"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
winfo ismapped,Return true if this widget is mapped.
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
to latex,"Render object to a LaTeX tabular, longtable, or nested table. Requires ``\usepackage{booktabs}``. The output can be copy/pasted into a main LaTeX document or read from an external file with ``\input{table.tex}``. .. versionchanged:: 1.0.0 Added caption and label arguments. .. versionchanged:: 1.2.0 Added position argument, changed meaning of caption argument. Parameters ---------- buf : str, Path or StringIO-like, optional, default None Buffer to write to. If None, the output is returned as a string. columns : list of label, optional The subset of columns to write. Writes all columns by default. col_space : int, optional The minimum width of each column."
selection to,Set the variable end of a selection to INDEX.
 cmp method,Wrapper used to dispatch comparison operations.
winfo children,Return a list of all widgets which are children of this widget.
teardown request,"Register a function to be called when the request context is popped. Typically this happens at the end of each request, but contexts may be pushed manually as well during testing. .. code-block:: python with app.test_request_context(): ... When the ``with`` block exits (or ``ctx.pop()`` is called), the teardown functions are called just before the request context is made inactive. When a teardown function was called because of an unhandled exception it will be passed an error object. If an :meth:`errorhandler` is registered, it will handle the exception and the teardown will not receive it. Teardown functions must avoid raising exceptions."
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
as unordered,"Set the Categorical to be unordered.

Parameters
----------
inplace : bool, default False
   Whether or not to set the ordered attribute in-place or return
   a copy of this categorical with ordered set to False.

   .. deprecated:: 1.5.0

Returns
-------
Categorical or None
    Unordered Categorical or None if ``inplace=True``."
winfo atomname,Return name of atom with identifier ID.
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
winfo pointery,Return the y coordinate of the pointer on the root window.
get weight,"Get the weight of the DMatrix.

Returns
-------
weight : array"
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
 get item cache,"Return the cached item, item represents a label indexer."
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
 maybe disable logical methods,raise if this Index subclass does not support any or all.
add command,Add command menu item.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
as posix,"Return the string representation of the path with forward (/)
slashes."
pack forget,Unmap this widget and do not use it for the packing order.
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
 rename,fastpath for rename if new name is already validated.
is numeric,Check if the Index only consists of numeric data. Returns ------- bool Whether or not the Index only consists of numeric data. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo atomname,Return name of atom with identifier ID.
get pipe,"Get a pipeline component for a given component name.

name (str): Name of pipeline component to get.
RETURNS (callable): The pipeline component.

DOCS: https://spacy.io/api/language#get_pipe"
unbind all,Unbind for all widgets for event SEQUENCE all functions.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 getconfigure,Call Tcl configure command and return the result as a dict.
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
lang dists,"Calculate the ""out-of-place"" measure between
the text and all languages"
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
wm iconbitmap,"Set bitmap for the iconified widget to BITMAP. Return
the bitmap if None is given.

Under Windows, the DEFAULT parameter can be used to set the icon
for the widget and any descendants that don't have an icon set
explicitly.  DEFAULT can be the relative path to a .ico file
(example: root.iconbitmap(default='myicon.ico') ).  See Tk
documentation for more information."
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
set group,"Set group size of DMatrix (used for ranking).

Parameters
----------
group : array like
    Group size of each group"
grid remove,Unmap this widget but remember the grid options.
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
retract bindings,:see: ``nltk.featstruct.retract_bindings()``
is floating,"Check if the Index is a floating type. The Index may consist of only floats, NaNs, or a mix of floats, integers, or NaNs. Returns ------- bool Whether or not the Index only consists of only consists of floats, NaNs, or a mix of floats, integers, or NaNs. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds"
 get attributes dict,"Return an attributes dict for my class.

Temporarily added back for compatibility issue in dask, see
https://github.com/pandas-dev/pandas/pull/43895"
is numeric,Check if the Index only consists of numeric data. Returns ------- bool Whether or not the Index only consists of numeric data. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
winfo fpixels,"Return the number of pixels for the given distance NUMBER
(e.g. ""3c"") as float."
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
winfo name,Return the name of this widget.
use zip64,"Allow ZIP64 extensions when writing xlsx file zip container.

Args:
    None.

Returns:
    Nothing."
unbind all,Unbind for all widgets for event SEQUENCE all functions.
winfo parent,Return the name of the parent of this widget.
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 format duplicate message,"Construct the DataFrame for a DuplicateLabelError.

This returns a DataFrame indicating the labels and positions
of duplicates in an index. This should only be called when it's
already known that duplicates are present.

Examples
--------
>>> idx = pd.Index(['a', 'b', 'a'])
>>> idx._format_duplicate_message()
    positions
label
a        [0, 2]"
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
winfo interps,Return the name of all Tcl interpreters for this display.
analyze pipes,"Analyze the current pipeline components, print a summary of what
they assign or require and check that all requirements are met.

keys (List[str]): The meta values to display in the table. Corresponds
    to values in FactoryMeta, defined by @Language.factory decorator.
pretty (bool): Pretty-print the results.
RETURNS (dict): The data."
 setup,Internal function. Sets up information about children.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
 require scalar,"Check that this is a scalar value that we can use for setitem-like
operations without changing dtype."
 compute lambda,"creates lambda values based upon training data

NOTE: no need to explicitly reference C,
it is contained within the tag variable :: tag == (tag,C)

for each tag trigram (t1, t2, t3)
depending on the maximum value of
- f(t1,t2,t3)-1 / f(t1,t2)-1
- f(t2,t3)-1 / f(t2)-1
- f(t3)-1 / N-1

increment l3,l2, or l1 by f(t1,t2,t3)

ISSUES -- Resolutions:
if 2 values are equal, increment both lambda values
by (f(t1,t2,t3) / 2)"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
 range in self,Check if other range is contained in self
get prover,"Return the prover object
:return: ``Prover``"
wm group,"Set the group leader widgets for related widgets to PATHNAME. Return
the group leader of this widget if None is given."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
pack info,"Return information about the packing options
for this widget."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
 e,"Encode a name according to the current file settings.

Returns name, or 2-tuple (name, lcpl) if lcpl is True

- Binary strings are always passed as-is, h5t.CSET_ASCII
- Unicode strings are encoded utf8, h5t.CSET_UTF8

If name is None, returns either None or (None, None) appropriately."
winfo interps,Return the name of all Tcl interpreters for this display.
save for backward,"Saves given tensors for a future call to :func:`~Function.backward`. ``save_for_backward`` should be called at most once, only from inside the :func:`forward` method, and only with tensors. All tensors intended to be used in the backward pass should be saved with ``save_for_backward`` (as opposed to directly on ``ctx``) to prevent incorrect gradients and memory leaks, and enable the application of saved tensor hooks. See :class:`torch.autograd.graph.saved_tensors_hooks`. Note that if intermediary tensors, tensors that are neither inputs nor outputs of :func:`forward`, are saved for backward, your custom Function may not support double backward. Custom Functions that do not support double backward should decorate"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 trace stack,"Print trace output displaying the given stack and text.

:rtype: None
:param marker: A character that is printed to the left of the
    stack.  This is used with trace level 2 to print 'S'
    before shifted stacks and 'R' before reduced stacks."
is leftcorner,"True if left is a leftcorner of cat, where left can be a
terminal or a nonterminal.

:param cat: the parent of the leftcorner
:type cat: Nonterminal
:param left: the suggested leftcorner
:type left: Terminal or Nonterminal
:rtype: bool"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 get indexer strict,Analogue to get_indexer that raises if any elements are missing.
winfo screen,Return the screen name of this widget.
rename categories,"Rename categories. Parameters ---------- new_categories : list-like, dict-like or callable New categories which will replace old categories. * list-like: all items must be unique and the number of items in the new categories must match the existing number of categories. * dict-like: specifies a mapping from old categories to new. Categories not contained in the mapping are passed through and extra categories in the mapping are ignored. * callable : a callable that is called on all items in the old categories and whose return values comprise the new categories. inplace : bool, default False Whether or not to rename"
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
 repr html inner,"This function is returned by the @property `_repr_html_` to make
`hasattr(estimator, ""_repr_html_"") return `True` or `False` depending
on `get_config()[""display""]`."
winfo ismapped,Return true if this widget is mapped.
register hook,"Registers a backward hook. The hook will be called every time a gradient with respect to the Tensor is computed. The hook should have the following signature:: hook(grad) -> Tensor or None The hook should not modify its argument, but it can optionally return a new gradient which will be used in place of :attr:`grad`. This function returns a handle with a method ``handle.remove()`` that removes the hook from the module. .. note:: See :ref:`backward-hooks-execution` for more information on how when this hook is executed, and how its execution is ordered relative to other hooks. Example:: >>> v = torch.tensor([0.,"
 intersection via get indexer,"Find the intersection of two Indexes using get_indexer.

Returns
-------
np.ndarray or ExtensionArray
    The returned array will be unique."
preprocess request,"Called before the request is dispatched. Calls
:attr:`url_value_preprocessors` registered with the app and the
current blueprint (if any). Then calls :attr:`before_request_funcs`
registered with the app and the blueprint.

If any :meth:`before_request` handler returns a non-None value, the
value is handled as if it was the return value from the view, and
further request handling is stopped."
 get attributes dict,"Return an attributes dict for my class.

Temporarily added back for compatibility issue in dask, see
https://github.com/pandas-dev/pandas/pull/43895"
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
winfo ismapped,Return true if this widget is mapped.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
asof locs,"Return the locations (indices) of labels in the index. As in the `asof` function, if the label (a particular entry in `where`) is not in the index, the latest index label up to the passed label is chosen and its index returned. If all of the labels in the index are later than a label in `where`, -1 is returned. `mask` is used to ignore NA values in the index during calculation. Parameters ---------- where : Index An Index consisting of an array of timestamps. mask : np.ndarray[bool] Array of booleans denoting where values in the original data are not"
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
parse all,:rtype: list(Tree)
parent indices,"Return a list of the indices where this tree occurs as a child
of ``parent``.  If this child does not occur as a child of
``parent``, then the empty list is returned.  The following is
always true::

  for parent_index in ptree.parent_indices(parent):
      parent[parent_index] is ptree"
 reset identity,Initializes or resets ``_id`` attribute with new object.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
sentences from text legacy,"Given a text, generates the sentences in that text. Annotates all
tokens, rather than just those with possible sentence breaks. Should
produce the same results as ``sentences_from_text``."
winfo vrootwidth,"Return the width of the virtual root window associated with this
widget in pixel. If there is no virtual root window return the
width of the screen."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
 get node,Outdated method to access the node value; use the label() method instead.
winfo atomname,Return name of atom with identifier ID.
 is label reference,"Test whether a key is a label reference for a given axis.

To be considered a label reference, `key` must be a string that:
  - (axis=0): Matches a column label
  - (axis=1): Matches an index label

Parameters
----------
key : Hashable
    Potential label name, i.e. Index entry.
axis : int, default 0
    Axis perpendicular to the axis that labels are associated with
    (0 means search for column labels, 1 means search for index labels)

Returns
-------
is_label: bool"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
is mixed,Check if the Index holds data with mixed data types. Returns ------- bool Whether or not the Index holds data with mixed data types. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. Examples -------- >>>
 parse,"A stub version of ``_parse`` that sets the parsers current
state to the given arguments.  In ``RecursiveDescentParser``,
the ``_parse`` method is used to recursively continue parsing a
text.  ``SteppingRecursiveDescentParser`` overrides it to
capture these recursive calls.  It records the parser's old
state in the history (to allow for backtracking), and updates
the parser's new state using the given arguments.  Finally, it
returns ``[1]``, which is used by ``match`` and ``expand`` to
detect whether their operations were successful.

:return: ``[1]``
:rtype: list of int"
trace vdelete,"Delete the trace callback for a variable.

MODE is one of ""r"", ""w"", ""u"" for read, write, undefine.
CBNAME is the name of the callback returned from trace_variable or trace.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_remove() instead."
 convert slice indexer,"Convert a slice indexer.

By definition, these are labels unless 'iloc' is passed in.
Floats are not allowed as the start, step, or stop of the slice.

Parameters
----------
key : label of the slice bound
kind : {'loc', 'getitem'}"
value counts,"Return a Series containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default. Parameters ---------- normalize : bool, default False If True then the object returned will contain the relative frequencies of the unique values. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. bins : int, optional Rather than count values, group them into half-open bins, a convenience for ``pd.cut``, only works with numeric data. dropna : bool, default True Don't include counts"
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
parse all,:rtype: list(Tree)
 named members,Helper method for yielding various names + members of modules.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
most common,"List the n most common elements and their counts from the most
common to the least.  If n is None, then list all element counts.

>>> Counter('abracadabra').most_common(3)
[('a', 5), ('b', 2), ('r', 2)]"
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
get indexer for,"Guaranteed return of an indexer even when non-unique.

This dispatches to get_indexer or get_indexer_non_unique
as appropriate.

Returns
-------
np.ndarray[np.intp]
    List of indices.

Examples
--------
>>> idx = pd.Index([np.nan, 'var1', np.nan])
>>> idx.get_indexer_for([np.nan])
array([0, 2])"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
is integer,Check if the Index only consists of integers. Returns ------- bool Whether or not the Index only consists of integers. See Also -------- is_boolean : Check if the Index only consists of booleans. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
tz convert,"Convert tz-aware Datetime Array/Index from one time zone to another. Parameters ---------- tz : str, pytz.timezone, dateutil.tz.tzfile or None Time zone for time. Corresponding timestamps would be converted to this time zone of the Datetime Array/Index. A `tz` of None will convert to UTC and remove the timezone information. Returns ------- Array or Index Raises ------ TypeError If Datetime Array/Index is tz-naive. See Also -------- DatetimeIndex.tz : A timezone that has a variable offset from UTC. DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a given time zone, or remove timezone from a tz-aware DatetimeIndex. Examples -------- With the `tz` parameter, we"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
 reindex non unique,"Create a new index with target's values (move/add/delete values as
necessary) use with non-unique Index and a possibly non-unique target.

Parameters
----------
target : an iterable

Returns
-------
new_index : pd.Index
    Resulting index.
indexer : np.ndarray[np.intp]
    Indices of output values in original index.
new_indexer : np.ndarray[np.intp] or None"
winfo visualsavailable,"Return a list of all visuals available for the screen
of this widget.

Each item in the list consists of a visual name (see winfo_visual), a
depth and if includeids is true is given also the X identifier."
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
register module,Alias for :func:`add_module`.
winfo screen,Return the screen name of this widget.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
grab release,Release grab for this widget if currently set.
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
make hook recorder,See :meth:`Pytester.make_hook_recorder`.
 as manager,"Private helper function to create a DataFrame with specific manager.

Parameters
----------
typ : {""block"", ""array""}
copy : bool, default True
    Only controls whether the conversion from Block->ArrayManager
    copies the 1D arrays (to ensure proper/contiguous memory layout).

Returns
-------
DataFrame
    New DataFrame using specified manager type. Is not guaranteed
    to be a copy or not."
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
get indexer for,"Guaranteed return of an indexer even when non-unique.

This dispatches to get_indexer or get_indexer_non_unique
as appropriate.

Returns
-------
np.ndarray[np.intp]
    List of indices.

Examples
--------
>>> idx = pd.Index([np.nan, 'var1', np.nan])
>>> idx.get_indexer_for([np.nan])
array([0, 2])"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
get num boosting rounds,Gets the number of xgboost boosting rounds.
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
grid slaves,"Return a list of all slaves of this widget
in its packing order."
at time,"Select values at particular time of day (e.g., 9:30AM). Parameters ---------- time : datetime.time or str axis : {0 or 'index', 1 or 'columns'}, default 0 For `Series` this parameter is unused and defaults to 0. Returns ------- Series or DataFrame Raises ------ TypeError If the index is not a :class:`DatetimeIndex` See Also -------- between_time : Select values between particular times of the day. first : Select initial periods of time series based on a date offset. last : Select final periods of time series based on a date offset. DatetimeIndex.indexer_at_time : Get just the index locations for values at"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
info patchlevel,Returns the exact version of the Tcl library.
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
sort values,"Sort by the values. Sort a Series in ascending or descending order by some criterion. Parameters ---------- axis : {0 or 'index'} Unused. Parameter needed for compatibility with DataFrame. ascending : bool or list of bools, default True If True, sort values in ascending order, otherwise descending. inplace : bool, default False If True, perform operation in-place. kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort' Choice of sorting algorithm. See also :func:`numpy.sort` for more information. 'mergesort' and 'stable' are the only stable algorithms. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs"
grab current,"Return widget which has currently the grab in this application
or None."
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
image types,Return a list of all available image types (e.g. photo bitmap).
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
span tokenize,"Given a text, generates (start, end) spans of sentences
in the text."
raw tag sents,"Tag multiple sentences.

Takes multiple sentences as a list where each sentence is a string.

:param sentences: Input sentences to tag
:type sentences: list(str)
:rtype: list(list(list(tuple(str, str)))"
app url value preprocessor,"Like :meth:`url_value_preprocessor`, but for every request, not only those
handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`."
 find common type compat,"Implementation of find_common_type that adjusts for Index-specific
special cases."
 set node,Outdated method to set the node value; use the set_label() method instead.
winfo class,Return window class name of this widget.
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
winfo pathname,Return the pathname of the widget given by ID.
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
xview scroll,"Shift the x-view according to NUMBER which is measured in ""units""
or ""pages"" (WHAT)."
get score,Get feature importance of each feature. Importance type can be defined as: * 'weight': the number of times a feature is used to split the data across all trees. * 'gain': the average gain across all splits the feature is used in. * 'cover': the average coverage across all splits the feature is used in. * 'total_gain': the total gain across all splits the feature is used in. * 'total_cover': the total coverage across all splits the feature is used in. .. note:: Feature importance is defined only for tree boosters Feature importance is only defined when the decision tree
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
is integer,Check if the Index only consists of integers. Returns ------- bool Whether or not the Index only consists of integers. See Also -------- is_boolean : Check if the Index only consists of booleans. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
set params,"Set the parameters of this estimator.  Modification of the sklearn method to
allow unknown kwargs. This allows using the full range of xgboost
parameters that are not defined as member variables in sklearn grid
search.

Returns
-------
self"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
winfo ismapped,Return true if this widget is mapped.
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
grid info,"Return information about the options
for positioning this widget in a grid."
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
wm iconposition,"Set the position of the icon of this widget to X and Y. Return
a tuple of the current values of X and X if None is given."
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
mul ground,"Multiply ``f`` by a an element of the ground domain.

Examples
========

>>> from sympy import Poly
>>> from sympy.abc import x

>>> Poly(x + 1).mul_ground(2)
Poly(2*x + 2, x, domain='ZZ')"
 trace tree,"Print trace output displaying the parser's current state.

:param operation: A character identifying the operation that
    generated the current state.
:rtype: None"
winfo toplevel,Return the toplevel widget of this widget.
 where,"Equivalent to public method `where`, except that `other` is not
applied as a function even if callable. Used in __setitem__."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 get indexer pointwise,pointwise implementation for get_indexer and get_indexer_non_unique.
is flexible chomsky normal form,"Return True if all productions are of the forms
A -> B C, A -> B, or A -> ""s""."
share memory,See :meth:`torch.Tensor.share_memory_`
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
process thread,"This method should be used to handle dependencies between readings such
as resolving anaphora.

:param sentence_readings: readings to process
:type sentence_readings: list(Expression)
:return: the list of readings after processing
:rtype: list(Expression)"
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
winfo class,Return window class name of this widget.
 parseFormats,Parse the field formats 
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
winfo cells,Return number of cells in the colormap for this widget.
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
to numpy,"Convert to a NumPy ndarray. .. versionadded:: 1.0.0 This is similar to :meth:`numpy.asarray`, but may provide additional control over how the conversion is done. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is a not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that a copy is made, even if not strictly necessary. na_value : Any, optional The value to use for missing values. The default value depends on `dtype` and the"
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
 apply alias generator to field info,"Apply an alias_generator to aliases on a FieldInfo instance if appropriate.

Args:
    alias_generator: A callable that takes a string and returns a string, or an AliasGenerator instance.
    field_info: The FieldInfo instance to which the alias_generator is (maybe) applied.
    field_name: The name of the field from which to generate the alias."
 iter column arrays,"Iterate over the arrays of all columns in order.
This returns the values as stored in the Block (ndarray or ExtensionArray).

Warning! The returned array is a view but doesn't handle Copy-on-Write,
so this should be used with caution (for read-only purposes)."
complex float,Casts this storage to complex float type
is flexible chomsky normal form,"Return True if all productions are of the forms
A -> B C, A -> B, or A -> ""s""."
winfo interps,Return the name of all Tcl interpreters for this display.
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
winfo pathname,Return the pathname of the widget given by ID.
focus displayof,"Return the widget which has currently the focus on the
display where this widget is located.

Return None if the application does not have the focus."
 named members,Helper method for yielding various names + members of modules.
pro w53,process length five patterns and extract length three roots
grid slaves,"Return a list of all slaves of this widget
in its packing order."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
select clear,Clear the selection if it is in this widget.
make conditional,"Make the response conditional to the request. This method works best if an etag was defined for the response already. The `add_etag` method can be used to do that. If called without etag just the date header is set. This does nothing if the request method in the request or environ is anything but GET or HEAD. For optimal performance when handling range requests, it's recommended that your response data object implements `seekable`, `seek` and `tell` methods as described by :py:class:`io.IOBase`. Objects returned by :meth:`~werkzeug.wsgi.wrap_file` automatically implement those methods. It does not remove the body of the response because that's"
winfo manager,Return the window manager name for this widget.
winfo interps,Return the name of all Tcl interpreters for this display.
 get delete freq,Find the `freq` for self.delete(loc).
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
insert radiobutton,Add radio menu item at INDEX.
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
is symlink,Whether this path is a symbolic link.
is scalar multiple,"Returns whether each coordinate of `self` is a scalar
multiple of the corresponding coordinate in point p."
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
 transform index,"Apply function to all values found in index.

This includes transforming multiindex entries separately.
Only apply function to one level of the MultiIndex if level is specified."
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
complex double,Casts this storage to complex double type
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
 format data,Return the formatted data as a unicode string.
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
holds integer,Whether the type is an integer type.
has uninitialized params,"Check if a module has parameters that are not initialized
        "
 mode,"Returns the mode(s) of the ExtensionArray.

Always returns `ExtensionArray` even if only one value.

Parameters
----------
dropna : bool, default True
    Don't consider counts of NA values.

Returns
-------
same type as self
    Sorted, if possible."
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
state dict,"Returns the state of the optimizer as a :class:`dict`.

It contains two entries:

* state - a dict holding current optimization state. Its content
    differs between optimizer classes.
* param_groups - a list containing all parameter groups where each
    parameter group is a dict"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 named members,Helper method for yielding various names + members of modules.
get params,Get parameters.
wm title,Set the title of this widget.
evals result,"Return the evaluation results.

If **eval_set** is passed to the `fit` function, you can call
``evals_result()`` to get evaluation results for all passed **eval_sets**.
When **eval_metric** is also passed to the `fit` function, the
**evals_result** will contain the **eval_metrics** passed to the `fit` function.

Returns
-------
evals_result : dictionary

Example
-------

.. code-block:: python

    param_dist = {'objective':'binary:logistic', 'n_estimators':2}

    clf = xgb.XGBModel(**param_dist)

    clf.fit(X_train, y_train,
            eval_set=[(X_train, y_train), (X_test, y_test)],
            eval_metric='logloss',
            verbose=True)

    evals_result = clf.evals_result()

The variable **evals_result** will contain:

.. code-block:: python

    {'validation_0': {'logloss': ['0.604835', '0.531479']},
    'validation_1': {'logloss': ['0.41965', '0.17686']}}"
 expandsums,"Helper function for _eval_expand_mul.

sums must be a list of instances of Basic."
pack forget,Unmap this widget and do not use it for the packing order.
 reduce,Perform the reduction type operation if we can.
pack slaves,"Return a list of all slaves of this widget
in its packing order."
share memory,See :meth:`torch.Tensor.share_memory_`
 vectorize call with signature,Vectorized call over positional arguments with a signature.
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
is shared,"Checks if tensor is in shared memory.

This is always ``True`` for CUDA tensors."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 setup,Internal function. Sets up information about children.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo pointerx,Return the x coordinate of the pointer on the root window.
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
winfo atom,Return integer which represents atom NAME.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
image names,Return a list of all existing image names.
span tokenize,"Identify the tokens using integer offsets ``(start_i, end_i)``,
where ``s[start_i:end_i]`` is the corresponding token.

:rtype: iter(tuple(int, int))"
 get data as items,"return a list of tuples of start, stop, step"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
 named members,Helper method for yielding various names + members of modules.
 get attributes dict,"Return an attributes dict for my class.

Temporarily added back for compatibility issue in dask, see
https://github.com/pandas-dev/pandas/pull/43895"
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
winfo manager,Return the window manager name for this widget.
combine readings,":param readings: readings to combine
:type readings: list(Expression)
:return: one combined reading
:rtype: Expression"
wm grid,"Instruct the window manager that this widget shall only be
resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
number of grid units requested in Tk_GeometryRequest."
set params,"Set the parameters of this estimator.  Modification of the sklearn method to
allow unknown kwargs. This allows using the full range of xgboost
parameters that are not defined as member variables in sklearn grid
search.

Returns
-------
self"
 maybe cache changed,The object has called back to us saying maybe it has changed.
 maybe promote,"When dealing with an object-dtype Index and a non-object Index, see
if we can upcast the object-dtype one to improve performance."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 recursive call,Helper for rcall method.
tk popup,"Post the menu at position X,Y with entry ENTRY."
wm deiconify,"Deiconify this widget. If it was never mapped it will not be mapped.
On Windows it will raise this widget and give it the focus."
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
 checker,"Check whether the provided array or dtype is of an integer dtype. Unlike in `is_any_int_dtype`, timedelta64 instances will return False. The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered as integer by this function. Parameters ---------- arr_or_dtype : array-like or dtype The array or dtype to check. Returns ------- boolean Whether or not the array or dtype is of an integer dtype and not an instance of timedelta64. Examples -------- >>> is_integer_dtype(str) False >>> is_integer_dtype(int) True >>> is_integer_dtype(float) False >>> is_integer_dtype(np.uint64) True >>> is_integer_dtype('int8') True >>> is_integer_dtype('Int8') True >>> is_integer_dtype(pd.Int8Dtype) True >>> is_integer_dtype(np.datetime64) False >>> is_integer_dtype(np.timedelta64) False >>> is_integer_dtype(np.array(['a', 'b']))"
register module,Alias for :func:`add_module`.
 set categories,"Sets new categories inplace

Parameters
----------
fastpath : bool, default False
   Don't perform validation of the categories for uniqueness or nulls

Examples
--------
>>> c = pd.Categorical(['a', 'b'])
>>> c
['a', 'b']
Categories (2, object): ['a', 'b']

>>> c._set_categories(pd.Index(['a', 'c']))
>>> c
['a', 'c']
Categories (2, object): ['a', 'c']"
set ylabels,Label the y axis on the left column of the grid.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
to orc,"Write a DataFrame to the ORC format. .. versionadded:: 1.5.0 Parameters ---------- path : str, file-like object or None, default None If a string, it will be used as Root Directory path when writing a partitioned dataset. By file-like object, we refer to objects with a write() method, such as a file handle (e.g. via builtin open function). If path is None, a bytes object is returned. engine : str, default 'pyarrow' ORC library to use. Pyarrow must be >= 7.0.0. index : bool, optional If ``True``, include the dataframe's index(es) in the file output. If ``False``, they will not"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
add mwe,"Add a multi-word expression to the lexicon (stored as a word trie)

We use ``util.Trie`` to represent the trie. Its form is a dict of dicts.
The key True marks the end of a valid MWE.

:param mwe: The multi-word expression we're adding into the word trie
:type mwe: tuple(str) or list(str)

:Example:

>>> tokenizer = MWETokenizer()
>>> tokenizer.add_mwe(('a', 'b'))
>>> tokenizer.add_mwe(('a', 'b', 'c'))
>>> tokenizer.add_mwe(('a', 'x'))
>>> expected = {'a': {'x': {True: None}, 'b': {True: None, 'c': {True: None}}}}
>>> tokenizer._mwes == expected
True"
 deprecate dti setop,"Deprecate setop behavior between timezone-aware DatetimeIndexes with
mismatched timezones."
 invalid indexer,Consistent invalid indexer message.
verb t1,stem the present prefixes and suffixes
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 concat,"Overriding parent method for the case of all RangeIndex instances.

When all members of ""indexes"" are of type RangeIndex: result will be
RangeIndex if possible, Int64Index otherwise. E.g.:
indexes = [RangeIndex(3), RangeIndex(3, 6)] -> RangeIndex(6)
indexes = [RangeIndex(3), RangeIndex(4, 6)] -> Int64Index([0,1,2,4,5])"
 get level names,Return a name or list of names with None replaced by the level number.
 is memory usage qualified,Return a boolean if we need a qualified .info display.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
get indexer,"Compute indexer and mask for new index given the current index. The indexer should be then used as an input to ndarray.take to align the current data to the new index. Parameters ---------- target : Index method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional * default: exact matches only. * pad / ffill: find the PREVIOUS index value if no exact match. * backfill / bfill: use NEXT index value if no exact match * nearest: use the NEAREST index value if no exact match. Tied distances are broken by preferring the larger index value. limit : int, optional Maximum number"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
currently complete,":return: Whether the parser's current state represents a
    complete parse.
:rtype: bool"
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
winfo parent,Return the name of the parent of this widget.
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
winfo manager,Return the window manager name for this widget.
 validate fill value,Convert value to be insertable to underlying array.
is shared,"Checks if tensor is in shared memory.

This is always ``True`` for CUDA tensors."
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
has pipe,"Check if a component name is present in the pipeline. Equivalent to
`name in nlp.pipe_names`.

name (str): Name of the component.
RETURNS (bool): Whether a component of the name exists in the pipeline.

DOCS: https://spacy.io/api/language#has_pipe"
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 validate fill value,Convert value to be insertable to underlying array.
winfo width,Return the width of this widget.
tag delete,Delete all tags in TAGNAMES.
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
winfo screen,Return the screen name of this widget.
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
tag sents,"Apply ``self.tag()`` to each element of *sentences*.  I.e.:

    return [self.tag(sent) for sent in sentences]"
 join level,"The join method *only* affects the level of the resulting
MultiIndex. Otherwise it just exactly aligns the Index data to the
labels of the level in the MultiIndex.

If ```keep_order == True```, the order of the data indexed by the
MultiIndex will not be changed; otherwise, it will tie out
with `other`."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
url value preprocessor,"Register a URL value preprocessor function for all view functions in the application. These functions will be called before the :meth:`before_request` functions. The function can modify the values captured from the matched url before they are passed to the view. For example, this can be used to pop a common language code value and place it in ``g`` rather than pass it to every view. The function is passed the endpoint name and values dict. The return value is ignored. This is available on both app and blueprint objects. When used on an app, this is called for every request."
tagged parse,"Use BLLIP to parse a sentence. Takes a sentence as a list of
(word, tag) tuples; the sentence must have already been tokenized
and tagged. BLLIP will attempt to use the tags provided but may
use others if it can't come up with a complete parse subject
to those constraints. You may also specify a tag as ``None``
to leave a token's tag unconstrained.

:return: An iterator that generates parse trees for the sentence
from most likely to least likely.

:param sentence: Input sentence to parse as (word, tag) pairs
:type sentence: list(tuple(str, str))
:rtype: iter(Tree)"
winfo visualid,Return the X identifier for the visual for this widget.
eval set,"Evaluate a set of data.

Parameters
----------
evals : list of tuples (DMatrix, string)
    List of items to be evaluated.
iteration : int
    Current iteration.
feval : function
    Custom evaluation function.

Returns
-------
result: str
    Evaluation result string."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
 tuple schema,"Generate schema for a Tuple, e.g. `tuple[int, str]` or `tuple[int, ...]`."
 getconfigure,Call Tcl configure command and return the result as a dict.
check output,"Return True iff the actual output from an example (`got`)
matches the expected output (`want`).  These strings are
always considered to match if they are identical; but
depending on what option flags the test runner is using,
several non-exact match types are also possible.  See the
documentation for `TestRunner` for more information about
option flags."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 set value,"Quickly set single value at passed label.

If label is not contained, a new object is created with the label
placed at the end of the result index.

Parameters
----------
label : object
    Partial indexing with MultiIndex not allowed.
value : object
    Scalar value.
takeable : interpret the index as indexers, default False"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo pixels,Rounded integer value of winfo_fpixels.
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
wait visibility,"Wait until the visibility of a WIDGET changes
(e.g. it appears).

If no parameter is given self is used."
 validate fill value,"Check if the value can be inserted into our array without casting,
and convert it to an appropriate native type if necessary.

Raises
------
TypeError
    If the value cannot be inserted into an array of this dtype."
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
share memory ,"Moves the underlying storage to shared memory.

This is a no-op if the underlying storage is already in shared memory
and for CUDA tensors. Tensors in shared memory cannot be resized."
 get reconciled name object,"If the result of a set operation will be self,
return self, unless the name changes, in which
case make a shallow copy of self."
 find common type compat,"Implementation of find_common_type that adjusts for Index-specific
special cases."
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
 iszip,"Test if the filename is a zip file by looking at the file extension.

        "
winfo cells,Return number of cells in the colormap for this widget.
resolve redirects,Receives a Response. Returns a generator of Responses or Requests.
share memory,See :meth:`torch.Tensor.share_memory_`
 add stage,Helper function for __init__: add a new stage to the parser.
generate from frequencies,"Create a word_cloud from words and frequencies.

Parameters
----------
frequencies : dict from string to float
    A contains words and associated frequency.

max_font_size : int
    Use this font-size instead of self.max_font_size

Returns
-------
self"
do run,"run [args...]
Restart the debugged python program. If a string is supplied
it is split with ""shlex"", and the result is used as the new
sys.argv.  History, breakpoints, actions and debugger options
are preserved.  ""restart"" is an alias for ""run""."
 convert slice indexer,"Convert a slice indexer.

By definition, these are labels unless 'iloc' is passed in.
Floats are not allowed as the start, step, or stop of the slice.

Parameters
----------
key : label of the slice bound
kind : {'loc', 'getitem'}"
winfo atom,Return integer which represents atom NAME.
is lexical,"Return True if the right-hand contain at least one terminal token.

:rtype: bool"
 decorate model,"Print out a Mace4 model using any Mace4 ``interpformat`` format.
See http://www.cs.unm.edu/~mccune/mace4/manual/ for details.

:param valuation_str: str with the model builder's output
:param format: str indicating the format for displaying
models. Defaults to 'standard' format.
:return: str"
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
to frame,"Create a DataFrame with a column containing the Index. Parameters ---------- index : bool, default True Set the index of the returned DataFrame as the original Index. name : object, default None The passed name should substitute for the index name (if it has one). Returns ------- DataFrame DataFrame containing the original Index data. See Also -------- Index.to_series : Convert an Index to a Series. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') >>> idx.to_frame() animal animal Ant Ant Bear Bear Cow Cow By default, the original Index is reused. To enforce a"
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
winfo pathname,Return the pathname of the widget given by ID.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
apply ngram filter,"Removes candidate ngrams (w1, w2, ...) where fn(w1, w2, ...)
evaluates to True."
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
grid info,"Return information about the options
for positioning this widget in a grid."
image create,Create an embedded image at INDEX.
 dir additions,Add additional __dir__ for this object.
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
is unit,Return true if ``a`` is a invertible
decorate proof,"Modify and return the proof string
:param proof_string: str the proof to decorate
:param simplify: bool simplify the proof?
:return: str"
tag raise,"Change the priority of tag TAGNAME such that it is higher
than the priority of ABOVETHIS."
remove variables,"Return the feature structure that is obtained by deleting
any feature whose value is a ``Variable``.

:rtype: FeatStruct"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
complex float,Casts this storage to complex float type
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
to numpy,"A NumPy ndarray representing the values in this Series or Index. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that a copy is made, even if not strictly necessary. na_value : Any, optional The value to use for missing values. The default value depends on `dtype` and the type of the array. .. versionadded:: 1.0.0 **kwargs Additional keywords passed through to the"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
winfo exists,Return true if this widget exists.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
parse all,:rtype: list(Tree)
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 prune,Discard items in the queue if the queue is longer than the beam.
 transform index,"Apply function to all values found in index.

This includes transforming multiindex entries separately.
Only apply function to one level of the MultiIndex if level is specified."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
load config,"Load configuration returned by `save_config`.

.. versionadded:: 1.0.0"
inject url defaults,"Injects the URL defaults for the given endpoint directly into
the values dictionary passed.  This is used internally and
automatically called on URL building.

.. versionadded:: 0.7"
option add,"Set a VALUE (second parameter) for an option
PATTERN (first parameter).

An optional third parameter gives the numeric priority
(defaults to 80)."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 summary,"Return a summarized representation.

Parameters
----------
name : str
    name to use in the summary representation

Returns
-------
String with a summarized representation of the index"
wm aspect,"Instruct the window manager to set the aspect ratio (width/height)
of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
of the actual values if no argument is given."
 suspend,Suspend this fixture's own capturing temporarily.
 identify boundaries,"Identifies boundaries at the peaks of similarity score
differences"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
winfo pathname,Return the pathname of the widget given by ID.
register hook,Properly register a hook.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
get slice bound,"Calculate slice bound that corresponds to given label.

Returns leftmost (one-past-the-rightmost if ``side=='right'``) position
of given label.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.4.0

Returns
-------
int
    Index of label."
find next sibling,"Find the closest sibling to this PageElement that matches the
given criteria and appears later in the document.

All find_* methods take a common set of arguments. See the
online documentation for detailed explanations.

:param name: A filter on tag name.
:param attrs: A dictionary of filters on attribute values.
:param string: A filter for a NavigableString with specific text.
:kwargs: A dictionary of filters on attribute values.
:return: A PageElement.
:rtype: bs4.element.Tag | bs4.element.NavigableString"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
current chartrule,Return the chart rule used to generate the most recent edge.
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 repr categories info,Returns a string representation of the footer.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
winfo interps,Return the name of all Tcl interpreters for this display.
winfo visualid,Return the X identifier for the visual for this widget.
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
wm deiconify,"Deiconify this widget. If it was never mapped it will not be mapped.
On Windows it will raise this widget and give it the focus."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
winfo class,Return window class name of this widget.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
best model2 alignment,"Finds the best alignment according to IBM Model 2

Used as a starting point for hill climbing in Models 3 and
above, because it is easier to compute than the best alignments
in higher models

:param sentence_pair: Source and target language sentence pair
    to be word-aligned
:type sentence_pair: AlignedSent

:param j_pegged: If specified, the alignment point of j_pegged
    will be fixed to i_pegged
:type j_pegged: int

:param i_pegged: Alignment point to j_pegged
:type i_pegged: int"
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo manager,Return the window manager name for this widget.
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
 maybe check unique,"Check that an Index has no duplicates.

This is typically only called via
`NDFrame.flags.allows_duplicate_labels.setter` when it's set to
True (duplicates aren't allowed).

Raises
------
DuplicateLabelError
    When the index is not unique."
winfo atom,Return integer which represents atom NAME.
winfo reqwidth,Return requested width of this widget.
share memory,See :meth:`torch.Tensor.share_memory_`
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
 cmp method,Wrapper used to dispatch comparison operations.
 values for rank,"For correctly ranking ordered categorical data. See GH#15420

Ordered categorical data should be ranked on the basis of
codes with -1 translated to NaN.

Returns
-------
numpy.array"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 should partial index,Should we attempt partial-matching indexing?
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
proxy coord,"Return the x and y pair of the most recent proxy location
        "
classify many,"Apply ``self.classify()`` to each element of ``featuresets``.  I.e.:

    return [self.classify(fs) for fs in featuresets]

:rtype: list(label)"
call on close,"Adds a function to the internal list of functions that should
be called as part of closing down the response.  Since 0.7 this
function also returns the function that was passed so that this
can be used as a decorator.

.. versionadded:: 0.6"
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
tag sents,"Apply ``self.tag()`` to each element of *sentences*.  I.e.:

    return [self.tag(sent) for sent in sentences]"
tag unbind,"Unbind for all items with TAGORID for event SEQUENCE  the
function identified with FUNCID."
 mul,See docstring of SeqBase._mul
 sanitize relative path,"Return a sanitised relative path for which
os.path.abspath(os.path.join(base, path)).startswith(base)"
winfo reqheight,Return requested height of this widget.
process thread,:see: ReadingCommand.process_thread()
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
 asdict,Return a new dict which maps field names to their values.
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
register step post hook,"Register an optimizer step post hook which will be called after optimizer step.
It should have the following signature::

    hook(optimizer, args, kwargs) -> None

The ``optimizer`` argument is the optimizer instance being used.

Args:
    hook (Callable): The user defined hook to be registered.

Returns:
    :class:`torch.utils.hooks.RemoveableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo rooty,"Return y coordinate of upper left corner of this widget on the
root window."
best model2 alignment,"Finds the best alignment according to IBM Model 2

Used as a starting point for hill climbing in Models 3 and
above, because it is easier to compute than the best alignments
in higher models

:param sentence_pair: Source and target language sentence pair
    to be word-aligned
:type sentence_pair: AlignedSent

:param j_pegged: If specified, the alignment point of j_pegged
    will be fixed to i_pegged
:type j_pegged: int

:param i_pegged: Alignment point to j_pegged
:type i_pegged: int"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 get nearest indexer,"Get the indexer for the nearest index labels; requires an index with
values that can be subtracted from each other (e.g., not strings or
tuples)."
 check prefix,"Check that every line in the given list starts with the given
prefix; if any line does not, then raise a ValueError."
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
set ylabels,Label the y axis on the left column of the grid.
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
prepare markup,"Run any preliminary steps necessary to make incoming markup
acceptable to the parser.

:param markup: Some markup -- probably a bytestring.
:param user_specified_encoding: The user asked to try this encoding.
:param document_declared_encoding: The markup itself claims to be
    in this encoding.
:param exclude_encodings: The user asked _not_ to try any of
    these encodings.

:yield: A series of 4-tuples:
 (markup, encoding, declared encoding,
  has undergone character replacement)

 Each 4-tuple represents a strategy for converting the
 document to Unicode and parsing it. Each strategy will be tried 
 in turn."
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
add assumptions,"Add new assumptions to the assumption list.

:param new_assumptions: new assumptions
:type new_assumptions: list(sem.Expression)"
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
mark unset,Delete all marks in MARKNAMES.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
winfo atom,Return integer which represents atom NAME.
winfo exists,Return true if this widget exists.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
to series,"Create a Series with both index and values equal to the index keys. Useful with map for returning an indexer based on an index. Parameters ---------- index : Index, optional Index of resulting Series. If None, defaults to original index. name : str, optional Name of resulting Series. If None, defaults to name of original index. Returns ------- Series The dtype will be based on the type of the Index values. See Also -------- Index.to_frame : Convert an Index to a DataFrame. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') By default, the"
 update inplace,"Replace self internals with result.

Parameters
----------
result : same type as self
verify_is_copy : bool, default True
    Provide is_copy checks."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
union many,A bit of a hack to accelerate unioning a collection of indexes.
 union,"Specific union logic should go here. In subclasses, union behavior
should be overwritten here rather than in `self.union`.

Parameters
----------
other : Index or array-like
sort : False or None, default False
    Whether to sort the resulting index.

    * False : do not sort the result.
    * None : sort the result, except when `self` and `other` are equal
      or when the values cannot be compared.

Returns
-------
Index"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
winfo toplevel,Return the toplevel widget of this widget.
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
image names,Return a list of all existing image names.
get weight,"Get the weight of the DMatrix.

Returns
-------
weight : array"
infer objects,"Attempt to infer better dtypes for object columns. Attempts soft conversion of object-dtyped columns, leaving non-object and unconvertible columns unchanged. The inference rules are the same as during normal Series/DataFrame construction. Returns ------- converted : same type as input object See Also -------- to_datetime : Convert argument to datetime. to_timedelta : Convert argument to timedelta. to_numeric : Convert argument to numeric type. convert_dtypes : Convert argument to best possible dtype. Examples -------- >>> df = pd.DataFrame({""A"": [""a"", 1, 2, 3]}) >>> df = df.iloc[1:] >>> df A 1 1 2 2 3 3 >>> df.dtypes A object dtype: object >>>"
 should compare,Check if `self == other` can ever have non-False entries.
 is consonant,"Returns True if word[i] is a consonant, False otherwise

A consonant is defined in the paper as follows:

    A consonant in a word is a letter other than A, E, I, O or
    U, and other than Y preceded by a consonant. (The fact that
    the term `consonant' is defined to some extent in terms of
    itself does not make it ambiguous.) So in TOY the consonants
    are T and Y, and in SYZYGY they are S, Z and G. If a letter
    is not a consonant it is a vowel."
save config,"Output internal parameter configuration of Booster as a JSON
string.

.. versionadded:: 1.0.0"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 replace suffix,Replaces `suffix` of `word` with `replacement
mark dirty,"Marks given tensors as modified in an in-place operation. **This should be called at most once, only from inside the** :func:`forward` **method, and all arguments should be inputs.** Every tensor that's been modified in-place in a call to :func:`forward` should be given to this function, to ensure correctness of our checks. It doesn't matter whether the function is called before or after modification. Examples:: >>> # xdoctest: +REQUIRES(env:TORCH_DOCTEST_AUTOGRAD) >>> class Inplace(Function): >>> @staticmethod >>> def forward(ctx, x): >>> x_npy = x.numpy() # x_npy shares storage with x >>> x_npy += 1 >>> ctx.mark_dirty(x) >>> return x >>> >>> @staticmethod >>>"
trace vinfo,"Return all trace callback information.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_info() instead."
 get grouper for level,"Get index grouper corresponding to an index level

Parameters
----------
mapper: Group mapping function or None
    Function mapping index values to groups
level : int or None
    Index level, positional
dropna : bool
    dropna from groupby

Returns
-------
grouper : Index
    Index of values to group on.
labels : ndarray of int or None
    Array of locations in level_index.
uniques : Index or None
    Index of unique values for level."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
grab current,"Return widget which has currently the grab in this application
or None."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 from module,"Return true if the given object is defined in the given
module."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
wm iconbitmap,"Set bitmap for the iconified widget to BITMAP. Return
the bitmap if None is given.

Under Windows, the DEFAULT parameter can be used to set the icon
for the widget and any descendants that don't have an icon set
explicitly.  DEFAULT can be the relative path to a .ico file
(example: root.iconbitmap(default='myicon.ico') ).  See Tk
documentation for more information."
storage type,"storage_type() -> type

Returns the type of the underlying storage."
as numer denom,"expression -> a/b -> a, b

This is just a stub that should be defined by
an object's class methods to get anything else.

See Also
========

normal: return ``a/b`` instead of ``(a, b)``"
 check indexing method,Raise if we have a get_indexer `method` that is not supported or valid.
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 maybe disable logical methods,raise if this Index subclass does not support any or all.
winfo visualsavailable,"Return a list of all visuals available for the screen
of this widget.

Each item in the list consists of a visual name (see winfo_visual), a
depth and if includeids is true is given also the X identifier."
 optimizer step code,"Entry point for `torch.profile.profiler`.

When python tracing is enabled the profiler will hook into this
function at the CPython level to inspect the optimizer's parameters and
param groups. It is called it after `step()` since many optimizers
lazily initialize state.

This is a workaround due to lack of a proper step hook on the optimizer,
and will be removed if it exists."
Do Kw,Averaged over all labelers
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
visit structured,"Recursively visit subexpressions.  Apply 'function' to each
subexpression and pass the result of each function application
to the 'combinator' for aggregation.  The combinator must have
the same signature as the constructor.  The function is not
applied to bound variables, but they are passed to the
combinator.
:param function: ``Function`` to call on each subexpression
:param combinator: ``Function`` with the same signature as the
constructor, to combine the results of the function calls
:return: result of combination"
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
 rename,fastpath for rename if new name is already validated.
info patchlevel,Returns the exact version of the Tcl library.
 write to file,write the binary features to input file and update the transition dictionary
url defaults,"Callback function for URL defaults for all view functions of the
application.  It's called with the endpoint and values and should
update the values passed in place.

This is available on both app and blueprint objects. When used on an app, this
is called for every request. When used on a blueprint, this is called for
requests that the blueprint handles. To register with a blueprint and affect
every request, use :meth:`.Blueprint.app_url_defaults`."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 repr latex ,"IPython/Jupyter LaTeX printing

To change the behavior of this (e.g., pass in some settings to LaTeX),
use init_printing(). init_printing() will also enable LaTeX printing
for built in numeric types like ints and container types that contain
SymPy objects, like lists and dictionaries of expressions."
to axis angle,"Returns the axis and angle of rotation of a quaternion

Returns
=======

tuple
    Tuple of (axis, angle)

Examples
========

>>> from sympy.algebras.quaternion import Quaternion
>>> q = Quaternion(1, 1, 1, 1)
>>> (axis, angle) = q.to_axis_angle()
>>> axis
(sqrt(3)/3, sqrt(3)/3, sqrt(3)/3)
>>> angle
2*pi/3"
winfo children,Return a list of all widgets which are children of this widget.
 load breaks,"Apply all breakpoints (set in other instances) to this one.

Populates this instance's breaks list from the Breakpoint class's
list, which can have breakpoints set by another Bdb instance. This
is necessary for interactive sessions to keep the breakpoints
active across multiple calls to run()."
winfo pointery,Return the y coordinate of the pointer on the root window.
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
share memory ,"Moves the underlying storage to shared memory.

This is a no-op if the underlying storage is already in shared memory
and for CUDA tensors. Tensors in shared memory cannot be resized."
get base margin,"Get the base margin of the DMatrix.

Returns
-------
base_margin : float"
pformat latex qtree,"Returns a representation of the tree compatible with the
LaTeX qtree package. This consists of the string ``\Tree``
followed by the tree represented in bracketed notation.

For example, the following result was generated from a parse tree of
the sentence ``The announcement astounded us``::

  \Tree [.I'' [.N'' [.D The ] [.N' [.N announcement ] ] ]
      [.I' [.V'' [.V' [.V astounded ] [.N'' [.N' [.N us ] ] ] ] ] ] ]

See http://www.ling.upenn.edu/advice/latex.html for the LaTeX
style file for the qtree package.

:return: A latex qtree representation of this tree.
:rtype: str"
collapse unary,"Collapse subtrees with a single child (ie. unary productions) into a new non-terminal (Tree node) joined by 'joinChar'. This is useful when working with algorithms that do not allow unary productions, and completely removing the unary productions would require loss of useful information. The Tree is modified directly (since it is passed by reference) and no value is returned. :param collapsePOS: 'False' (default) will not collapse the parent of leaf nodes (ie. Part-of-Speech tags) since they are always unary productions :type collapsePOS: bool :param collapseRoot: 'False' (default) will not modify the root production if it is unary. For the Penn"
 set dtype,"Internal method for directly updating the CategoricalDtype

Parameters
----------
dtype : CategoricalDtype

Notes
-----
We don't do any validation here. It's assumed that the dtype is
a (valid) instance of `CategoricalDtype`."
holds integer,Whether the type is an integer type.
is boolean,Check if the Index only consists of booleans. Returns ------- bool Whether or not the Index only consists of booleans. See Also -------- is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
to native types,"Format specified values of `self` and return them.

.. deprecated:: 1.2.0

Parameters
----------
slicer : int, array-like
    An indexer into `self` that specifies which values
    are used in the formatting process.
kwargs : dict
    Options for specifying how the values should be formatted.
    These options include the following:

    1) na_rep : str
        The value that serves as a placeholder for NULL values
    2) quoting : bool or None
        Whether or not there are quoted values in `self`
    3) date_format : str
        The format used to represent date-like values.

Returns
-------
numpy.ndarray
    Formatted values."
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
 prove,":param goal: Input expression to prove
:type goal: sem.Expression
:param assumptions: Input expressions to use as assumptions in the proof
:type assumptions: list(sem.Expression)"
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
to dict,"Convert Series to {label -> value} dict or dict-like object. Parameters ---------- into : class, default dict The collections.abc.Mapping subclass to use as the return object. Can be the actual class or an empty instance of the mapping type you want. If you want a collections.defaultdict, you must pass it initialized. Returns ------- collections.abc.Mapping Key-value representation of Series. Examples -------- >>> s = pd.Series([1, 2, 3, 4]) >>> s.to_dict() {0: 1, 1: 2, 2: 3, 3: 4} >>> from collections import OrderedDict, defaultdict >>> s.to_dict(OrderedDict) OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)]) >>> dd = defaultdict(list) >>> s.to_dict(dd) defaultdict(<class"
 reset cacher,Reset the cacher.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
winfo screen,Return the screen name of this widget.
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
to bytes,Serialize the config to a byte string.
insert checkbutton,Add checkbutton menu item at INDEX.
winfo toplevel,Return the toplevel widget of this widget.
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
combine readings,":param readings: readings to combine
:type readings: list(Expression)
:return: one combined reading
:rtype: Expression"
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
 setparent,"Update the parent pointer of ``child`` to point to ``self``. This method is only called if the type of ``child`` is ``Tree``; i.e., it is not called when adding a leaf to a tree. This method is always called before the child is actually added to the child list of ``self``. :type child: Tree :type index: int :param index: The index of ``child`` in ``self``. :raise TypeError: If ``child`` is a tree with an impropriate type. Typically, if ``child`` is a tree, then its type needs to match the type of ``self``. This prevents mixing of different tree types (single-parented,"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
winfo manager,Return the window manager name for this widget.
asof locs,"Return the locations (indices) of labels in the index. As in the `asof` function, if the label (a particular entry in `where`) is not in the index, the latest index label up to the passed label is chosen and its index returned. If all of the labels in the index are later than a label in `where`, -1 is returned. `mask` is used to ignore NA values in the index during calculation. Parameters ---------- where : Index An Index consisting of an array of timestamps. mask : np.ndarray[bool] Array of booleans denoting where values in the original data are not"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
  delitem  ,Delete self[key].
register hook,"Registers a backward hook. The hook will be called every time a gradient with respect to the Tensor is computed. The hook should have the following signature:: hook(grad) -> Tensor or None The hook should not modify its argument, but it can optionally return a new gradient which will be used in place of :attr:`grad`. This function returns a handle with a method ``handle.remove()`` that removes the hook from the module. .. note:: See :ref:`backward-hooks-execution` for more information on how when this hook is executed, and how its execution is ordered relative to other hooks. Example:: >>> v = torch.tensor([0.,"
pack info,"Return information about the packing options
for this widget."
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
pack info,"Return information about the packing options
for this widget."
tokenize sents,"Apply ``self.tokenize()`` to each element of ``strings``.  I.e.:

    return [self.tokenize(s) for s in strings]

:rtype: list(list(str))"
retract assumptions,"Retract assumptions from the assumption list.

:param debug: If True, give warning when ``retracted`` is not present on
assumptions list.
:type debug: bool
:param retracted: assumptions to be retracted
:type retracted: list(sem.Expression)"
is similar,"Is another triangle similar to this one.

Two triangles are similar if one can be uniformly scaled to the other.

Parameters
==========

other: Triangle

Returns
=======

is_similar : boolean

See Also
========

sympy.geometry.entity.GeometryEntity.is_similar

Examples
========

>>> from sympy.geometry import Triangle, Point
>>> t1 = Triangle(Point(0, 0), Point(4, 0), Point(4, 3))
>>> t2 = Triangle(Point(0, 0), Point(-4, 0), Point(-4, -3))
>>> t1.is_similar(t2)
True

>>> t2 = Triangle(Point(0, 0), Point(-4, 0), Point(-4, -4))
>>> t1.is_similar(t2)
False"
 validate data,"Validate input data and set or check the `n_features_in_` attribute. Parameters ---------- X : {array-like, sparse matrix, dataframe} of shape (n_samples, n_features), default='no validation' The input samples. If `'no_validation'`, no validation is performed on `X`. This is useful for meta-estimator which can delegate input validation to their underlying estimator(s). In that case `y` must be passed and the only accepted `check_params` are `multi_output` and `y_numeric`. y : array-like of shape (n_samples,), default='no_validation' The targets. - If `None`, `check_array` is called on `X`. If the estimator's requires_y tag is True, then an error will be raised. - If `'no_validation'`, `check_array` is"
wm sizefrom,"Instruct the window manager that the size of this widget shall
be defined by the user if WHO is ""user"", and by its own policy if WHO is
""program""."
prob t a given s,"Probability of target sentence and an alignment given the
source sentence

All required information is assumed to be in ``alignment_info``
and self.

Derived classes should override this method"
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
is ,"More flexible, faster check like ``is`` but that works through views.

Note: this is *not* the same as ``Index.identical()``, which checks
that metadata is also the same.

Parameters
----------
other : object
    Other object to compare against.

Returns
-------
bool
    True if both have same underlying data, False otherwise.

See Also
--------
Index.identical : Works like ``Index.is_`` but also checks metadata."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
holds integer,Whether the type is an integer type.
predict proba,"Predict the probability of each `X` example being of a given class. .. note:: This function is only thread safe for `gbtree` and `dart`. Parameters ---------- X : array_like Feature matrix. ntree_limit : int Deprecated, use `iteration_range` instead. validate_features : bool When this is True, validate that the Booster's and data's feature_names are identical. Otherwise, it is assumed that the feature_names are the same. base_margin : array_like Margin added to prediction. iteration_range : Specifies which layer of trees are used in prediction. For example, if a random forest is trained with 100 rounds. Specifying `iteration_range=(10, 20)`, then only the forests"
create rectangle,"Create rectangle with coordinates x1,y1,x2,y2."
selection clear,"Clear the selection

If the selection isn't in this widget then the
command has no effect."
remove variables,"Return the feature structure that is obtained by deleting
any feature whose value is a ``Variable``.

:rtype: FeatStruct"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
end w5,ending step (word of length five)
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
proxy forget,"Remove the proxy from the display.
        "
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
winfo manager,Return the window manager name for this widget.
winfo vrootx,"Return the x offset of the virtual root relative to the root
window of the screen of this widget."
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
handle exception,"Handle an exception that did not have an error handler associated with it, or that was raised from an error handler. This always causes a 500 ``InternalServerError``. Always sends the :data:`got_request_exception` signal. If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug mode, the error will be re-raised so that the debugger can display it. Otherwise, the original exception is logged, and an :exc:`~werkzeug.exceptions.InternalServerError` is returned. If an error handler is registered for ``InternalServerError`` or ``500``, it will be used. For consistency, the handler will always receive the ``InternalServerError``. The original unhandled exception is available as ``e.original_exception``. .. versionchanged:: 1.1.0 Always passes"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
 new rawargs,"Create new instance of own class with args exactly as provided by caller but returning the self class identity if args is empty. Examples ======== This is handy when we want to optimize things, e.g. >>> from sympy import Mul, S >>> from sympy.abc import x, y >>> e = Mul(3, x, y) >>> e.args (3, x, y) >>> Mul(*e.args[1:]) x*y >>> e._new_rawargs(*e.args[1:]) # the same as above, but faster x*y Note: use this with caution. There is no checking of arguments at all. This is best used when you are rebuilding an Add or Mul after simply removing one"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
get indexer for,"Guaranteed return of an indexer even when non-unique.

This dispatches to get_indexer or get_indexer_non_unique
as appropriate.

Returns
-------
np.ndarray[np.intp]
    List of indices.

Examples
--------
>>> idx = pd.Index([np.nan, 'var1', np.nan])
>>> idx.get_indexer_for([np.nan])
array([0, 2])"
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
add sentence,"Add a sentence to the current discourse.

Updates ``self._input`` and ``self._sentences``.
:param sentence: An input sentence
:type sentence: str
:param informchk: if ``True``, check that the result of adding the sentence is thread-informative. Updates ``self._readings``.
:param consistchk: if ``True``, check that the result of adding the sentence is thread-consistent. Updates ``self._readings``."
 deprecated arg,Issue a FutureWarning if the arg/kwarg is not no_default.
set params,"Set the parameters of this estimator.  Modification of the sklearn method to
allow unknown kwargs. This allows using the full range of xgboost
parameters that are not defined as member variables in sklearn grid
search.

Returns
-------
self"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
share memory ,"Moves the storage to shared memory.

This is a no-op for storages already in shared memory and for CUDA
storages, which do not need to be moved for sharing across processes.
Storages in shared memory cannot be resized.

Returns: self"
get prover,"Return the prover object
:return: ``Prover``"
winfo interps,Return the name of all Tcl interpreters for this display.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
select item,Return the item which has the selection.
to sparse coo,"Convert a tensor to :ref:`coordinate format <sparse-coo-docs>`.

Examples::

     >>> dense = torch.randn(5, 5)
     >>> sparse = dense.to_sparse_coo()
     >>> sparse._nnz()
     25"
 step5a,"Implements Step 5a from ""An algorithm for suffix stripping""

From the paper:

Step 5a

    (m>1) E     ->                  probate        ->  probat
                                    rate           ->  rate
    (m=1 and not *o) E ->           cease          ->  ceas"
winfo reqwidth,Return requested width of this widget.
winfo reqwidth,Return requested width of this widget.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
 reset identity,Initializes or resets ``_id`` attribute with new object.
disable pipes,"Disable one or more pipeline components. If used as a context
manager, the pipeline will be restored to the initial state at the end
of the block. Otherwise, a DisabledPipes object is returned, that has
a `.restore()` method you can use to undo your changes.

This method has been deprecated since 3.0"
generate schema,"Generate core schema.

Args:
    obj: The object to generate core schema for.
    from_dunder_get_core_schema: Whether to generate schema from either the
        `__get_pydantic_core_schema__` function or `__pydantic_core_schema__` property.

Returns:
    The generated core schema.

Raises:
    PydanticUndefinedAnnotation:
        If it is not possible to evaluate forward reference.
    PydanticSchemaGenerationError:
        If it is not possible to generate pydantic-core schema.
    TypeError:
        - If `alias_generator` returns a disallowed type (must be str, AliasPath or AliasChoices).
        - If V1 style validator with `each_item=True` applied on a wrong field.
    PydanticUserError:
        - If `typing.TypedDict` is used instead of `typing_extensions.TypedDict` on Python < 3.12.
        - If `__modify_schema__` method is used instead of `__get_pydantic_json_schema__`."
tk focusNext,"Return the next widget in the focus order which follows
widget which has currently the focus.

The focus order first goes to the next child, then to
the children of the child recursively and then to the
next sibling which is higher in the stacking order.  A
widget is omitted if it has the takefocus resource set
to 0."
 validate positional slice,"For positional indexing, a slice must have either int or None
for each of start, stop, and step."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 sort levels monotonic,Compat with MultiIndex.
tk focusPrev,Return previous widget in the focus order. See tk_focusNext for details.
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
grid slaves,"Return a list of all slaves of this widget
in its packing order."
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
get xgb params,Get xgboost specific parameters.
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
winfo parent,Return the name of the parent of this widget.
do teardown appcontext,"Called right before the application context is popped.

When handling a request, the application context is popped
after the request context. See :meth:`do_teardown_request`.

This calls all functions decorated with
:meth:`teardown_appcontext`. Then the
:data:`appcontext_tearing_down` signal is sent.

This is called by
:meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.

.. versionadded:: 0.9"
most common,"List the n most common elements and their counts from the most
common to the least.  If n is None, then list all element counts.

>>> Counter('abracadabra').most_common(3)
[('a', 5), ('b', 2), ('r', 2)]"
 should partial index,Should we attempt partial-matching indexing?
yview scroll,"Shift the y-view according to NUMBER which is measured in
""units"" or ""pages"" (WHAT)."
place forget,Unmap this widget.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
register module,Alias for :func:`add_module`.
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
to json,"Convert the object to a JSON string. Note NaN's and None will be converted to null and datetime objects will be converted to UNIX timestamps. Parameters ---------- path_or_buf : str, path object, file-like object, or None, default None String, path object (implementing os.PathLike[str]), or file-like object implementing a write() function. If None, the result is returned as a string. orient : str Indication of expected JSON string format. * Series: - default is 'index' - allowed values are: {'split', 'records', 'index', 'table'}. * DataFrame: - default is 'columns' - allowed values are: {'split', 'records', 'index', 'columns', 'values', 'table'}. * The"
 calculate Tr,"Return the list *Tr*, where *Tr[r]* is the total count in
``heldout_fdist`` for all samples that occur *r*
times in ``base_fdist``.

:rtype: list(float)"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
pack info,"Return information about the packing options
for this widget."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
set params,"Set the parameters of this estimator.  Modification of the sklearn method to
allow unknown kwargs. This allows using the full range of xgboost
parameters that are not defined as member variables in sklearn grid
search.

Returns
-------
self"
winfo pixels,Rounded integer value of winfo_fpixels.
has uninitialized params,"Check if a module has parameters that are not initialized
        "
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
register hook,Properly register a hook.
is char device,Whether this path is a character device.
 get node,Outdated method to access the node value; use the label() method instead.
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 format attrs,"Return a list of tuples of the (attr,formatted_value)."
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
 validate can reindex,"Check if we are allowing reindexing with this particular indexer.

Parameters
----------
indexer : an integer ndarray

Raises
------
ValueError if its a duplicate axis"
get booster,"Get the underlying xgboost Booster of this model.

This will raise an exception when fit was not called

Returns
-------
booster : a xgboost booster of underlying model"
winfo children,Return a list of all widgets which are children of this widget.
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
 repr categories,return the base repr for the categories
winfo y,"Return the y coordinate of the upper left corner of this widget
in the parent."
share memory ,"Moves the underlying storage to shared memory.

This is a no-op if the underlying storage is already in shared memory
and for CUDA tensors. Tensors in shared memory cannot be resized."
 create training examples arc std,"Create the training example in the libsvm format and write it to the input_file.
Reference : Page 32, Chapter 3. Dependency Parsing by Sandra Kubler, Ryan McDonal and Joakim Nivre (2009)"
image types,Return a list of all available image types (e.g. photo bitmap).
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
winfo children,Return a list of all widgets which are children of this widget.
winfo reqheight,Return requested height of this widget.
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
select clear,Clear the selection if it is in this widget.
pin memory,"Coppies the  storage to pinned memory, if it's not already pinned."
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
align to,"Permutes the dimensions of the :attr:`self` tensor to match the order specified in :attr:`names`, adding size-one dims for any new names. All of the dims of :attr:`self` must be named in order to use this method. The resulting tensor is a view on the original tensor. All dimension names of :attr:`self` must be present in :attr:`names`. :attr:`names` may contain additional names that are not in ``self.names``; the output tensor has a size-one dimension for each of those new names. :attr:`names` may contain up to one Ellipsis (``...``). The Ellipsis is expanded to be equal to all dimension names of :attr:`self`"
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
get booster,"Get the underlying xgboost Booster of this model.

This will raise an exception when fit was not called

Returns
-------
booster : a xgboost booster of underlying model"
choose tag,"Decide which tag should be used for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, return None -- do not consult
the backoff tagger.  This method should be overridden by
subclasses of SequentialBackoffTagger.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
grid forget,Unmap this widget.
wm client,"Store NAME in WM_CLIENT_MACHINE property of this widget. Return
current value."
trace add,"Define a trace callback for the variable.

Mode is one of ""read"", ""write"", ""unset"", or a list or tuple of
such strings.
Callback must be a function which is called when the variable is
read, written or unset.

Return the name of the callback."
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 repr mimebundle ,Mime bundle used by jupyter kernels to display estimator
 setparent,"Update the parent pointer of ``child`` to point to ``self``. This method is only called if the type of ``child`` is ``Tree``; i.e., it is not called when adding a leaf to a tree. This method is always called before the child is actually added to the child list of ``self``. :type child: Tree :type index: int :param index: The index of ``child`` in ``self``. :raise TypeError: If ``child`` is a tree with an impropriate type. Typically, if ``child`` is a tree, then its type needs to match the type of ``self``. This prevents mixing of different tree types (single-parented,"
 validate index level,"Validate index level.

For single-level Index getting level number is a no-op, but some
verification must be done like in MultiIndex."
load state dict,"Loads the optimizer state.

Args:
    state_dict (dict): optimizer state. Should be an object returned
        from a call to :meth:`state_dict`."
storage type,"storage_type() -> type

Returns the type of the underlying storage."
 reindex multi,We are guaranteed non-Nones in the axes.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
is mixed,Check if the Index holds data with mixed data types. Returns ------- bool Whether or not the Index holds data with mixed data types. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. Examples -------- >>>
prover9 input,":return: The input string that should be provided to the
prover9 binary.  This string is formed based on the goal,
assumptions, and timeout value of this object."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 named members,Helper method for yielding various names + members of modules.
xview scroll,"Shift the x-view according to NUMBER which is measured in ""units""
or ""pages"" (WHAT)."
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
winfo cells,Return number of cells in the colormap for this widget.
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
point entropy,"Returns the pointwise entropy over the possible states at each
position in the chain, given the observation sequence."
 call candc,"Call the ``candc`` binary with the given input.

:param inputs: list of list of str Input discourses to parse
:param discourse_ids: list of str Identifiers to be inserted to each occurrence-indexed predicate.
:param filename: str A filename for the output file
:return: stdout"
 set names,"Set new names on index. Each name has to be a hashable type.

Parameters
----------
values : str or sequence
    name(s) to set
level : int, level name, or sequence of int/level names (default None)
    If the index is a MultiIndex (hierarchical), level(s) to set (None
    for all levels).  Otherwise level must be None

Raises
------
TypeError if each name is not hashable."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
 reindex non unique,"Create a new index with target's values (move/add/delete values as
necessary) use with non-unique Index and a possibly non-unique target.

Parameters
----------
target : an iterable

Returns
-------
new_index : pd.Index
    Resulting index.
indexer : np.ndarray[np.intp]
    Indices of output values in original index.
new_indexer : np.ndarray[np.intp] or None"
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
winfo visualsavailable,"Return a list of all visuals available for the screen
of this widget.

Each item in the list consists of a visual name (see winfo_visual), a
depth and if includeids is true is given also the X identifier."
 intersection,intersection specialized to the case with matching dtypes.
 dir additions,Add additional __dir__ for this object.
register module,Alias for :func:`add_module`.
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
winfo pointerx,Return the x coordinate of the pointer on the root window.
connect graph,"Fully connects all non-root nodes.  All nodes are set to be dependents
of the root node."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
pack slaves,"Return a list of all slaves of this widget
in its packing order."
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
do step,"s(tep)
Execute the current line, stop at the first possible occasion
(either in a function that is called or in the current
function)."
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
from disk,Load config from a file.
 validate names,"Handles the quirks of having a singular 'name' parameter for general
Index and plural 'names' parameter for MultiIndex."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
current chartrule,Return the chart rule used to generate the most recent edge.
 intersection,intersection specialized to the case with matching dtypes.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 setup,Internal function. Sets up information about children.
 construct threads,"Use ``self._readings`` to construct a value for ``self._threads``
and use the model builder to construct a value for ``self._filtered_threads``"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
winfo screen,Return the screen name of this widget.
parse all,:rtype: list(Tree)
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
 context,"One left & one right token, both case-normalized.  Skip over
non-sentence-final punctuation.  Used by the ``ContextIndex``
that is created for ``similar()`` and ``common_contexts()``."
trace vinfo,"Return all trace callback information.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_info() instead."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
map dataframe,"Like ``.map`` but passes args as strings and inserts data in kwargs. This method is suitable for plotting with functions that accept a long-form DataFrame as a `data` keyword argument and access the data in that DataFrame using string variable names. Parameters ---------- func : callable A plotting function that takes data and keyword arguments. Unlike the `map` method, a function used here must ""understand"" Pandas objects. It also must plot to the currently active matplotlib Axes and take a `color` keyword argument. If faceting on the `hue` dimension, it must also take a `label` keyword argument. args : strings"
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
 trace fringe,"Print trace output displaying the fringe of ``tree``.  The
fringe of ``tree`` consists of all of its leaves and all of
its childless subtrees.

:rtype: None"
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 deprecate dti setop,"Deprecate setop behavior between timezone-aware DatetimeIndexes with
mismatched timezones."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 extended gcd,"Extended Euclidean algorithms to solve Bezout's identity:
   a*x + b*y = gcd(x, y)
Finds one particular solution for x, y: s, t
Returns: gcd, s, t"
 remove punct,"Function to remove punctuation from Unicode string.
:param input: the input string
:return: Unicode string after remove all punctuation"
wm title,Set the title of this widget.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
do bt,"w(here)
Print a stack trace, with the most recent frame at the bottom.
An arrow indicates the ""current frame"", which determines the
context of most commands.  'bt' is an alias for this command."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 cmp method,Wrapper used to dispatch comparison operations.
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
to frame,"Create a DataFrame with a column containing the Index. Parameters ---------- index : bool, default True Set the index of the returned DataFrame as the original Index. name : object, default None The passed name should substitute for the index name (if it has one). Returns ------- DataFrame DataFrame containing the original Index data. See Also -------- Index.to_series : Convert an Index to a Series. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') >>> idx.to_frame() animal animal Ant Ant Bear Bear Cow Cow By default, the original Index is reused. To enforce a"
leaf treeposition,":return: The tree position of the ``index``-th leaf in this
    tree.  I.e., if ``tp=self.leaf_treeposition(i)``, then
    ``self[tp]==self.leaves()[i]``.

:raise IndexError: If this tree contains fewer than ``index+1``
    leaves, or if ``index<0``."
prob classify many,"Apply ``self.prob_classify()`` to each element of ``featuresets``.  I.e.:

    return [self.prob_classify(fs) for fs in featuresets]

:rtype: list(ProbDistI)"
pack forget,Unmap this widget and do not use it for the packing order.
to pickle,"Pickle (serialize) object to file. Parameters ---------- path : str, path object, or file-like object String, path object (implementing ``os.PathLike[str]``), or file-like object implementing a binary ``write()`` function. File path where the pickled object will be stored. compression : str or dict, default 'infer' For on-the-fly compression of the output data. If 'infer' and 'path' is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2' (otherwise no compression). Set to ``None`` for no compression. Can also be a dict with key ``'method'`` set to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'tar'``}"
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
grid rowconfigure,"Configure row INDEX of a grid.

Valid resources are minsize (minimum size of the row),
weight (how much does additional space propagate to this row)
and pad (how much space to let additionally)."
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
register module,Alias for :func:`add_module`.
get indexer non unique,"Compute indexer and mask for new index given the current index.

The indexer should be then used as an input to ndarray.take to align the
current data to the new index.

Parameters
----------
target : IntervalIndex or list of Intervals

Returns
-------
indexer : np.ndarray[np.intp]
    Integers from 0 to n - 1 indicating that the index at these
    positions matches the corresponding target values. Missing values
    in the target are marked by -1.
missing : np.ndarray[np.intp]
    An indexer into the target of the values not found.
    These correspond to the -1 in the indexer array."
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
save model,"Save the model to a file.

The model is saved in an XGBoost internal format which is universal
among the various XGBoost interfaces. Auxiliary attributes of the
Python Booster object (such as feature names) will not be saved.

  .. note::

    See:

    https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html

Parameters
----------
fname : string
    Output file name"
winfo id,Return identifier ID for this widget.
starts with,Returns True if the blob starts with the given prefix.
 view,"fastpath to make a shallow copy, i.e. new object with same data."
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
 dir deletions,Delete unwanted __dir__ for this object.
pack slaves,"Return a list of all slaves of this widget
in its packing order."
 binop,"Perform generic binary operation with optional fill value.

Parameters
----------
other : Series
func : binary operator
fill_value : float or object
    Value to substitute for NA/null values. If both Series are NA in a
    location, the result will be NA regardless of the passed fill value.
level : int or level name, default None
    Broadcast across a level, matching Index values on the
    passed MultiIndex level.

Returns
-------
Series"
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 duplicated,"Indicate duplicate index values. Duplicated values are indicated as ``True`` values in the resulting array. Either all duplicates, all except the first, or all except the last occurrence of duplicates can be indicated. Parameters ---------- keep : {'first', 'last', False}, default 'first' The value or values in a set of duplicates to mark as missing. - 'first' : Mark duplicates as ``True`` except for the first occurrence. - 'last' : Mark duplicates as ``True`` except for the last occurrence. - ``False`` : Mark all duplicates as ``True``. Returns ------- np.ndarray[bool] See Also -------- Series.duplicated : Equivalent method on pandas.Series. DataFrame.duplicated"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
info patchlevel,Returns the exact version of the Tcl library.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
grid info,"Return information about the options
for positioning this widget in a grid."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
 format attrs,"Return a list of tuples of the (attr,formatted_value)."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
collapse unary,"Collapse subtrees with a single child (ie. unary productions) into a new non-terminal (Tree node) joined by 'joinChar'. This is useful when working with algorithms that do not allow unary productions, and completely removing the unary productions would require loss of useful information. The Tree is modified directly (since it is passed by reference) and no value is returned. :param collapsePOS: 'False' (default) will not collapse the parent of leaf nodes (ie. Part-of-Speech tags) since they are always unary productions :type collapsePOS: bool :param collapseRoot: 'False' (default) will not modify the root production if it is unary. For the Penn"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
 maybe cast slice bound,"This function should be overloaded in subclasses that allow non-trivial
casting on label-slice bounds, e.g. datetime-like indices allowing
strings containing formatted datetimes.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.3.0

Returns
-------
label : object

Notes
-----
Value of `side` parameter should be validated in caller."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
complex float,Casts this storage to complex float type
winfo toplevel,Return the toplevel widget of this widget.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
unbind class,"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
all functions."
map lower,"Plot with a bivariate function on the lower diagonal subplots.

Parameters
----------
func : callable plotting function
    Must take x, y arrays as positional arguments and draw onto the
    ""currently active"" matplotlib Axes. Also needs to accept kwargs
    called ``color`` and  ``label``."
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 is lexsorted,"Return True if the codes are lexicographically sorted. Returns ------- bool Examples -------- In the below examples, the first level of the MultiIndex is sorted because a<b<c, so there is no need to look at the next level. >>> pd.MultiIndex.from_arrays([['a', 'b', 'c'], ['d', 'e', 'f']]).is_lexsorted() True >>> pd.MultiIndex.from_arrays([['a', 'b', 'c'], ['d', 'f', 'e']]).is_lexsorted() True In case there is a tie, the lexicographical sorting looks at the next level of the MultiIndex. >>> pd.MultiIndex.from_arrays([[0, 1, 1], ['a', 'b', 'c']]).is_lexsorted() True >>> pd.MultiIndex.from_arrays([[0, 1, 1], ['a', 'c', 'b']]).is_lexsorted() False >>> pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'], ... ['aa', 'bb', 'aa', 'bb']]).is_lexsorted() True >>> pd.MultiIndex.from_arrays([['a',"
with suffix,"Return a new path with the file suffix changed.  If the path
has no suffix, add given suffix.  If the given suffix is an empty
string, remove the suffix from the path."
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
call on close,"Adds a function to the internal list of functions that should
be called as part of closing down the response.  Since 0.7 this
function also returns the function that was passed so that this
can be used as a decorator.

.. versionadded:: 0.6"
 set dtype,"Internal method for directly updating the CategoricalDtype

Parameters
----------
dtype : CategoricalDtype

Notes
-----
We don't do any validation here. It's assumed that the dtype is
a (valid) instance of `CategoricalDtype`."
winfo screen,Return the screen name of this widget.
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
 step5b,"Implements Step 5a from ""An algorithm for suffix stripping""

From the paper:

Step 5b

    (m > 1 and *d and *L) -> single letter
                            controll       ->  control
                            roll           ->  roll"
 union,"Specific union logic should go here. In subclasses, union behavior
should be overwritten here rather than in `self.union`.

Parameters
----------
other : Index or array-like
sort : False or None, default False
    Whether to sort the resulting index.

    * False : do not sort the result.
    * None : sort the result, except when `self` and `other` are equal
      or when the values cannot be compared.

Returns
-------
Index"
span tokenize sents,"Apply ``self.span_tokenize()`` to each element of ``strings``.  I.e.:

    return [self.span_tokenize(s) for s in strings]

:rtype: iter(list(tuple(int, int)))"
classify many,"Apply ``self.classify()`` to each element of ``featuresets``.  I.e.:

    return [self.classify(fs) for fs in featuresets]

:rtype: list(label)"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
to frame,"Create a DataFrame with a column containing the Index. Parameters ---------- index : bool, default True Set the index of the returned DataFrame as the original Index. name : object, default None The passed name should substitute for the index name (if it has one). Returns ------- DataFrame DataFrame containing the original Index data. See Also -------- Index.to_series : Convert an Index to a Series. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') >>> idx.to_frame() animal animal Ant Ant Bear Bear Cow Cow By default, the original Index is reused. To enforce a"
 drop axis,"Drop labels from specified axis. Used in the ``drop`` method
internally.

Parameters
----------
labels : single label or list-like
axis : int or axis name
level : int or level name, default None
    For MultiIndex
errors : {'ignore', 'raise'}, default 'raise'
    If 'ignore', suppress error and existing labels are dropped.
only_slice : bool, default False
    Whether indexing along columns should be view-only."
complex double,Casts this storage to complex double type
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
trace variable,"Define a trace callback for the variable.

MODE is one of ""r"", ""w"", ""u"" for read, write, undefine.
CALLBACK must be a function which is called when
the variable is read, written or undefined.

Return the name of the callback.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_add() instead."
 format attrs,"Return a list of tuples of the (attr,formatted_value)."
from disk,"Loads state from a directory. Modifies the object in place and
returns it. If the saved `Language` object contains a model, the
model will be loaded.

path (str / Path): A path to a directory.
exclude (Iterable[str]): Names of components or serialization fields to exclude.
RETURNS (Language): The modified `Language` object.

DOCS: https://spacy.io/api/language#from_disk"
option get,"Return the value for an option NAME for this widget
with CLASSNAME.

Values with higher priority override lower values."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
winfo class,Return window class name of this widget.
 maybe cast indexer,"If we have a float key and are not a floating index, then try to cast
to an int if equivalent."
un chomsky normal form,"This method modifies the tree in three ways: 1. Transforms a tree in Chomsky Normal Form back to its original structure (branching greater than two) 2. Removes any parent annotation (if it exists) 3. (optional) expands unary subtrees (if previously collapsed with collapseUnary(...) ) :param expandUnary: Flag to expand unary or not (default = True) :type expandUnary: bool :param childChar: A string separating the head node from its children in an artificial node (default = ""|"") :type childChar: str :param parentChar: A string separating the node label from its parent annotation (default = ""^"") :type parentChar: str :param unaryChar: A"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
register module,Alias for :func:`add_module`.
bio to chunks,"Extracts the chunks in a BIO chunk-tagged sentence. >>> from nltk.tag import SennaChunkTagger >>> chktagger = SennaChunkTagger('/usr/share/senna-v3.0') >>> sent = 'What is the airspeed of an unladen swallow ?'.split() >>> tagged_sent = chktagger.tag(sent) # doctest: +SKIP >>> tagged_sent # doctest: +SKIP [('What', 'B-NP'), ('is', 'B-VP'), ('the', 'B-NP'), ('airspeed', 'I-NP'), ('of', 'B-PP'), ('an', 'B-NP'), ('unladen', 'I-NP'), ('swallow', 'I-NP'), ('?', 'O')] >>> list(chktagger.bio_to_chunks(tagged_sent, chunk_type='NP')) # doctest: +SKIP [('What', '0'), ('the airspeed', '2-3'), ('an unladen swallow', '5-6-7')] :param tagged_sent: A list of tuples of word and BIO chunk tag. :type tagged_sent: list(tuple) :param tagged_sent: The chunk tag that users want to extract, e.g."
place forget,Unmap this widget.
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
get indexer non unique,"Compute indexer and mask for new index given the current index.

The indexer should be then used as an input to ndarray.take to align the
current data to the new index.

Parameters
----------
target : Index

Returns
-------
indexer : np.ndarray[np.intp]
    Integers from 0 to n - 1 indicating that the index at these
    positions matches the corresponding target values. Missing values
    in the target are marked by -1.
missing : np.ndarray[np.intp]
    An indexer into the target of the values not found.
    These correspond to the -1 in the indexer array."
 getconfigure,Call Tcl configure command and return the result as a dict.
winfo pixels,Rounded integer value of winfo_fpixels.
register module,Alias for :func:`add_module`.
chomsky normal form,"This method can modify a tree in three ways: 1. Convert a tree into its Chomsky Normal Form (CNF) equivalent -- Every subtree has either two non-terminals or one terminal as its children. This process requires the creation of more""artificial"" non-terminal nodes. 2. Markov (vertical) smoothing of children in new artificial nodes 3. Horizontal (parent) annotation of nodes :param factor: Right or left factoring method (default = ""right"") :type factor: str = [left|right] :param horzMarkov: Markov order for sibling smoothing in artificial nodes (None (default) = include all siblings) :type horzMarkov: int | None :param vertMarkov: Markov order for parent"
reorder levels,"Rearrange index levels using input order. May not drop or duplicate levels. Parameters ---------- order : list of int or list of str List representing new level order. Reference level by number (position) or by key (label). axis : {0 or 'index', 1 or 'columns'}, default 0 Where to reorder levels. Returns ------- DataFrame Examples -------- >>> data = { ... ""class"": [""Mammals"", ""Mammals"", ""Reptiles""], ... ""diet"": [""Omnivore"", ""Carnivore"", ""Carnivore""], ... ""species"": [""Humans"", ""Dogs"", ""Snakes""], ... } >>> df = pd.DataFrame(data, columns=[""class"", ""diet"", ""species""]) >>> df = df.set_index([""class"", ""diet""]) >>> df species class diet Mammals Omnivore Humans Carnivore Dogs Reptiles"
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
option clear,"Clear the option database.

It will be reloaded if option_add is called."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
to numpy,"A NumPy ndarray representing the values in this Series or Index. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that a copy is made, even if not strictly necessary. na_value : Any, optional The value to use for missing values. The default value depends on `dtype` and the type of the array. .. versionadded:: 1.0.0 **kwargs Additional keywords passed through to the"
winfo pointerx,Return the x coordinate of the pointer on the root window.
 delparent,"Update the parent pointer of ``child`` to not point to self.  This
method is only called if the type of ``child`` is ``Tree``; i.e., it
is not called when removing a leaf from a tree.  This method
is always called before the child is actually removed from the
child list of ``self``.

:type child: Tree
:type index: int
:param index: The index of ``child`` in ``self``."
add categories,"Add new categories. `new_categories` will be included at the last/highest place in the categories and will be unused directly after this call. Parameters ---------- new_categories : category or list-like of category The new categories to be included. inplace : bool, default False Whether or not to add the categories inplace or return a copy of this categorical with added categories. .. deprecated:: 1.3.0 Returns ------- cat : Categorical or None Categorical with new categories added or None if ``inplace=True``. Raises ------ ValueError If the new categories include old categories or do not validate as categories See Also -------- rename_categories :"
after cancel,"Cancel scheduling of function identified with ID.

Identifier returned by after or after_idle must be
given as first parameter."
 notrace apply,"Apply each rule of this ``RegexpChunkParser`` to ``chunkstr``, in
turn.

:param chunkstr: The chunk string to which each rule should be
    applied.
:type chunkstr: ChunkString
:rtype: None"
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
image names,Return a list of all existing image names.
decorate proof,"Modify and return the proof string
:param proof_string: str the proof to decorate
:param simplify: bool simplify the proof?
:return: str"
winfo reqwidth,Return requested width of this widget.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
pack slaves,"Return a list of all slaves of this widget
in its packing order."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
winfo pointery,Return the y coordinate of the pointer on the root window.
unbind all,Unbind for all widgets for event SEQUENCE all functions.
user line,This function is called when we stop or break at this line.
winfo toplevel,Return the toplevel widget of this widget.
holds integer,Whether the type is an integer type.
 needs i8 conversion,"Check if a given key needs i8 conversion. Conversion is necessary for
Timestamp, Timedelta, DatetimeIndex, and TimedeltaIndex keys. An
Interval-like requires conversion if its endpoints are one of the
aforementioned types.

Assumes that any list-like data has already been cast to an Index.

Parameters
----------
key : scalar or Index-like
    The key that should be checked for i8 conversion

Returns
-------
bool"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
winfo parent,Return the name of the parent of this widget.
set label,"Set label of dmatrix

Parameters
----------
label: array like
    The label information to be set into DMatrix"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
select adjust,Adjust the end of the selection near the cursor to INDEX.
winfo ismapped,Return true if this widget is mapped.
pack slaves,"Return a list of all slaves of this widget
in its packing order."
tk strictMotif,"Set Tcl internal variable, whether the look and feel
should adhere to Motif.

A parameter of 1 means adhere to Motif (e.g. no color
change if mouse passes over slider).
Returns the set value."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
set codes,"Set new codes on MultiIndex. Defaults to returning new index. Parameters ---------- codes : sequence or list of sequence New codes to apply. level : int, level name, or sequence of int/level names (default None) Level(s) to set (None for all levels). inplace : bool If True, mutates in place. .. deprecated:: 1.2.0 verify_integrity : bool, default True If True, checks that levels and codes are compatible. Returns ------- new index (of same type and class...etc) or None The same type as the caller or None if ``inplace=True``. Examples -------- >>> idx = pd.MultiIndex.from_tuples( ... [(1, ""one""), (1, ""two""), (2,"
to sql,"Write records stored in a DataFrame to a SQL database. Databases supported by SQLAlchemy [1]_ are supported. Tables can be newly created, appended to, or overwritten. Parameters ---------- name : str Name of SQL table. con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection Using SQLAlchemy makes it possible to use any DB supported by that library. Legacy support is provided for sqlite3.Connection objects. The user is responsible for engine disposal and connection closure for the SQLAlchemy connectable See `here <https://docs.sqlalchemy.org/en/13/core/connections.html>`_. schema : str, optional Specify the schema (if database flavor supports this). If None, use default schema. if_exists : {'fail', 'replace',"
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
trace add,"Define a trace callback for the variable.

Mode is one of ""read"", ""write"", ""unset"", or a list or tuple of
such strings.
Callback must be a function which is called when the variable is
read, written or unset.

Return the name of the callback."
refine names,"Refines the dimension names of :attr:`self` according to :attr:`names`. Refining is a special case of renaming that ""lifts"" unnamed dimensions. A ``None`` dim can be refined to have any name; a named dim can only be refined to have the same name. Because named tensors can coexist with unnamed tensors, refining names gives a nice way to write named-tensor-aware code that works with both named and unnamed tensors. :attr:`names` may contain up to one Ellipsis (``...``). The Ellipsis is expanded greedily; it is expanded in-place to fill :attr:`names` to the same length as ``self.dim()`` using names from the corresponding indices"
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
winfo interps,Return the name of all Tcl interpreters for this display.
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
image names,Return a list of all existing image names.
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
wm withdraw,"Withdraw this widget from the screen such that it is unmapped
and forgotten by the window manager. Re-draw it with wm_deiconify."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
 binop,"Perform generic binary operation with optional fill value.

Parameters
----------
other : Series
func : binary operator
fill_value : float or object
    Value to substitute for NA/null values. If both Series are NA in a
    location, the result will be NA regardless of the passed fill value.
level : int or level name, default None
    Broadcast across a level, matching Index values on the
    passed MultiIndex level.

Returns
-------
Series"
selection clear,Clear the current X selection.
 set as cached,"Set the _cacher attribute on the calling object with a weakref to
cacher."
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
 concat,Concatenate multiple Index objects.
place info,"Return information about the placing options
for this widget."
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
winfo width,Return the width of this widget.
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
heldout fdist,"Return the heldout frequency distribution that this
probability distribution is based on.

:rtype: FreqDist"
remove punctuation,Get rid of punctuation except apostrophes
 get insert freq,"Find the `freq` for self.insert(loc, item)."
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
tag one,"Determine an appropriate tag for the specified token, and
return that tag.  If this tagger is unable to determine a tag
for the specified token, then its backoff tagger is consulted.

:rtype: str
:type tokens: list
:param tokens: The list of words that are being tagged.
:type index: int
:param index: The index of the word whose tag should be
    returned.
:type history: list(str)
:param history: A list of the tags for all words before *index*."
 repr html inner,"This function is returned by the @property `_repr_html_` to make
`hasattr(estimator, ""_repr_html_"") return `True` or `False` depending
on `get_config()[""display""]`."
remaining text,":return: The portion of the text that is not yet covered by the
    tree.
:rtype: list(str)"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 cmp method,Wrapper used to dispatch comparison operations.
combine readings,:see: ReadingCommand.combine_readings()
select to,Set the variable end of a selection in item TAGORID to INDEX.
remove pipe,"Remove a component from the pipeline.

name (str): Name of the component to remove.
RETURNS (Tuple[str, Callable[[Doc], Doc]]): A `(name, component)` tuple of the removed component.

DOCS: https://spacy.io/api/language#remove_pipe"
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
 validate fill value,Convert value to be insertable to underlying array.
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
is nonlexical,"Return True if the right-hand side only contains ``Nonterminals``

:rtype: bool"
winfo width,Return the width of this widget.
 named members,Helper method for yielding various names + members of modules.
winfo parent,Return the name of the parent of this widget.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 divide to tokensequences,Divides the text into pseudosentences of fixed size
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register module,Alias for :func:`add_module`.
grid slaves,"Return a list of all slaves of this widget
in its packing order."
complex double,Casts this storage to complex double type
pack slaves,"Return a list of all slaves of this widget
in its packing order."
sort queue,"Sort the given queue of ``Edge`` objects, placing the edge that should
be tried first at the beginning of the queue.  This method
will be called after each ``Edge`` is added to the queue.

:param queue: The queue of ``Edge`` objects to sort.  Each edge in
    this queue is an edge that could be added to the chart by
    the fundamental rule; but that has not yet been added.
:type queue: list(Edge)
:param chart: The chart being used to parse the text.  This
    chart can be used to provide extra information for sorting
    the queue.
:type chart: Chart
:rtype: None"
 reduce,Perform the reduction type operation if we can.
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
winfo ismapped,Return true if this widget is mapped.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
winfo class,Return window class name of this widget.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo cells,Return number of cells in the colormap for this widget.
register module,Alias for :func:`add_module`.
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
 repr categories info,Returns a string representation of the footer.
tk focusNext,"Return the next widget in the focus order which follows
widget which has currently the focus.

The focus order first goes to the next child, then to
the children of the child recursively and then to the
next sibling which is higher in the stacking order.  A
widget is omitted if it has the takefocus resource set
to 0."
 parse subtype,"Parse a string to get the subtype

Parameters
----------
dtype : str
    A string like

    * Sparse[subtype]
    * Sparse[subtype, fill_value]

Returns
-------
subtype : str

Raises
------
ValueError
    When the subtype cannot be extracted."
remove punctuation,Get rid of punctuation except apostrophes
collapse unary,"Collapse subtrees with a single child (ie. unary productions) into a new non-terminal (Tree node) joined by 'joinChar'. This is useful when working with algorithms that do not allow unary productions, and completely removing the unary productions would require loss of useful information. The Tree is modified directly (since it is passed by reference) and no value is returned. :param collapsePOS: 'False' (default) will not collapse the parent of leaf nodes (ie. Part-of-Speech tags) since they are always unary productions :type collapsePOS: bool :param collapseRoot: 'False' (default) will not modify the root production if it is unary. For the Penn"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
 apply filter,"Generic filter removes ngrams from the frequency distribution
if the function returns True when passed an ngram tuple."
winfo class,Return window class name of this widget.
 make relation set,"Convert a Mace4-style relation table into a dictionary.

:param num_entities: the number of entities in the model; determines the row length in the table.
:type num_entities: int
:param values: a list of 1's and 0's that represent whether a relation holds in a Mace4 model.
:type values: list of int"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
grid slaves,"Return a list of all slaves of this widget
in its packing order."
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
add prefix,"Prefix labels with string `prefix`. For Series, the row labels are prefixed. For DataFrame, the column labels are prefixed. Parameters ---------- prefix : str The string to add before each label. Returns ------- Series or DataFrame New Series or DataFrame with updated labels. See Also -------- Series.add_suffix: Suffix row labels with string `suffix`. DataFrame.add_suffix: Suffix column labels with string `suffix`. Examples -------- >>> s = pd.Series([1, 2, 3, 4]) >>> s 0 1 1 2 2 3 3 4 dtype: int64 >>> s.add_prefix('item_') item_0 1 item_1 2 item_2 3 item_3 4 dtype: int64 >>> df = pd.DataFrame({'A': [1, 2, 3,"
 delete,Remove current thread from the dict of currently running threads.
 trace stack,"Print trace output displaying the given stack and text.

:rtype: None
:param marker: A character that is printed to the left of the
    stack.  This is used with trace level 2 to print 'S'
    before shifted stacks and 'R' before reduced stacks."
has key,Return true if a feature with the given name or path exists.
info patchlevel,Returns the exact version of the Tcl library.
 validate can reindex,"Check if we are allowing reindexing with this particular indexer.

Parameters
----------
indexer : an integer ndarray

Raises
------
ValueError if its a duplicate axis"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
tk bisque,Change the color scheme to light brown as used in Tk 3.6 and before.
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
tag names,Return a list of all tag names.
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
winfo cells,Return number of cells in the colormap for this widget.
 format native types,Actually format specific types of the index.
initialize parameters,"Initialize parameters according to the input batch properties.
This adds an interface to isolate parameter initialization from the
forward pass when doing parameter shape inference."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
winfo exists,Return true if this widget exists.
place forget,Unmap this widget.
build model,"Attempt to build a model.  Store the result to prevent unnecessary
re-building."
asof locs,"Return the locations (indices) of labels in the index. As in the `asof` function, if the label (a particular entry in `where`) is not in the index, the latest index label up to the passed label is chosen and its index returned. If all of the labels in the index are later than a label in `where`, -1 is returned. `mask` is used to ignore NA values in the index during calculation. Parameters ---------- where : Index An Index consisting of an array of timestamps. mask : np.ndarray[bool] Array of booleans denoting where values in the original data are not"
register module,Alias for :func:`add_module`.
to svg,"Export to SVG. Font is assumed to be available to the SVG reader. Otherwise, text coordinates may produce artifacts when rendered with replacement font. It is also possible to include a subset of the original font in WOFF format using ``embed_font`` (requires `fontTools`). Note that some renderers do not handle glyphs the same way, and may differ from ``to_image`` result. In particular, Complex Text Layout may not be supported. In this typesetting, the shape or positioning of a grapheme depends on its relation to other graphemes. Pillow, since version 4.2.0, supports CTL using ``libraqm``. However, due to dependencies, this feature"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
winfo class,Return window class name of this widget.
grab release,Release grab for this widget if currently set.
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
to string,"Render a string representation of the Series. Parameters ---------- buf : StringIO-like, optional Buffer to write to. na_rep : str, optional String representation of NaN to use, default 'NaN'. float_format : one-parameter function, optional Formatter function to apply to columns' elements if they are floats, default None. header : bool, default True Add the Series header (index name). index : bool, optional Add index (row) labels, default True. length : bool, default False Add the Series length. dtype : bool, default False Add the Series dtype. name : bool, default False Add the Series name if not None. max_rows :"
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
 validate index level,"Validate index level.

For single-level Index getting level number is a no-op, but some
verification must be done like in MultiIndex."
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
register module,Alias for :func:`add_module`.
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
window cget,Return the value of OPTION of an embedded window at INDEX.
place forget,Unmap this widget.
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
winfo toplevel,Return the toplevel widget of this widget.
grab release,Release grab for this widget if currently set.
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 maybe cast listlike indexer,Analogue to maybe_cast_indexer for get_indexer instead of get_loc.
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
generate repp command,"This module generates the REPP command to be used at the terminal.

:param inputfilename: path to the input file
:type inputfilename: str"
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
focus displayof,"Return the widget which has currently the focus on the
display where this widget is located.

Return None if the application does not have the focus."
 get insert freq,"Find the `freq` for self.insert(loc, item)."
create jinja environment,"Create the Jinja environment based on :attr:`jinja_options`
and the various Jinja-related methods of the app. Changing
:attr:`jinja_options` after this will have no effect. Also adds
Flask-related globals and filters to the environment.

.. versionchanged:: 0.11
   ``Environment.auto_reload`` set in accordance with
   ``TEMPLATES_AUTO_RELOAD`` configuration option.

.. versionadded:: 0.5"
winfo width,Return the width of this widget.
is pronoun function,"Is self of the form ""PRO(x)""?"
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
 step3,"Implements Step 3 from ""An algorithm for suffix stripping""

From the paper:

Step 3

    (m>0) ICATE ->  IC              triplicate     ->  triplic
    (m>0) ATIVE ->                  formative      ->  form
    (m>0) ALIZE ->  AL              formalize      ->  formal
    (m>0) ICITI ->  IC              electriciti    ->  electric
    (m>0) ICAL  ->  IC              electrical     ->  electric
    (m>0) FUL   ->                  hopeful        ->  hope
    (m>0) NESS  ->                  goodness       ->  good"
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
winfo children,Return a list of all widgets which are children of this widget.
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 ensure doc,"Create a Doc if need be, or raise an error if the input is not
a Doc, string, or a byte array (generated by Doc.to_bytes())."
read partial,"Helper function that reads in a feature structure.

:param s: The string to read.
:param position: The position in the string to start parsing.
:param reentrances: A dictionary from reentrance ids to values.
    Defaults to an empty dictionary.
:return: A tuple (val, pos) of the feature structure created by
    parsing and the position where the parsed feature structure ends.
:rtype: bool"
 ortho heuristic,Decide whether the given token is the first token in a sentence.
binary locations,"A list of directories that should be searched for the prover9
executables.  This list is used by ``config_prover9`` when searching
for the prover9 executables."
raw parse,"Parse a sentence.

Takes a sentence as a string; before parsing, it will be automatically
tokenized and tagged by the CoreNLP Parser.

:param sentence: Input sentence to parse
:type sentence: str
:rtype: iter(Tree)"
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
 contingency,Calculates values of a bigram contingency table from marginal values.
find concordance,"Find all concordance lines given the query word.

Provided with a list of words, these will be found as a phrase."
 setup,Internal function. Sets up information about children.
prob classify many,"Apply ``self.prob_classify()`` to each element of ``featuresets``.  I.e.:

    return [self.prob_classify(fs) for fs in featuresets]

:rtype: list(ProbDistI)"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
grid info,"Return information about the options
for positioning this widget in a grid."
value counts,"Return a Series containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default. Parameters ---------- normalize : bool, default False If True then the object returned will contain the relative frequencies of the unique values. sort : bool, default True Sort by frequencies. ascending : bool, default False Sort in ascending order. bins : int, optional Rather than count values, group them into half-open bins, a convenience for ``pd.cut``, only works with numeric data. dropna : bool, default True Don't include counts"
to period,"Convert DataFrame from DatetimeIndex to PeriodIndex. Convert DataFrame from DatetimeIndex to PeriodIndex with desired frequency (inferred from index if not passed). Parameters ---------- freq : str, default Frequency of the PeriodIndex. axis : {0 or 'index', 1 or 'columns'}, default 0 The axis to convert (the index by default). copy : bool, default True If False then underlying input data is not copied. Returns ------- DataFrame with PeriodIndex Examples -------- >>> idx = pd.to_datetime( ... [ ... ""2001-03-31 00:00:00"", ... ""2002-05-31 00:00:00"", ... ""2003-08-31 00:00:00"", ... ] ... ) >>> idx DatetimeIndex(['2001-03-31', '2002-05-31', '2003-08-31'], dtype='datetime64[ns]', freq=None) >>> idx.to_period(""M"") PeriodIndex(['2001-03', '2002-05',"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
 get reconciled name object,"If the result of a set operation will be self,
return self, unless the name changes, in which
case make a shallow copy of self."
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
context processor,"Registers a template context processor function. These functions run before
rendering a template. The keys of the returned dict are added as variables
available in the template.

This is available on both app and blueprint objects. When used on an app, this
is called for every rendered template. When used on a blueprint, this is called
for templates rendered from the blueprint's views. To register with a blueprint
and affect every template, use :meth:`.Blueprint.app_context_processor`."
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
to list,"Return a list of the values.

These are each a scalar type, which is a Python scalar
(for str, int, float) or a pandas scalar
(for Timestamp/Timedelta/Interval/Period)

Returns
-------
list

See Also
--------
numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
    nested list of Python scalars."
sort values,"Sort by the values along either axis. Parameters ---------- by : str or list of str Name or list of names to sort by. - if `axis` is 0 or `'index'` then `by` may contain index levels and/or column labels. - if `axis` is 1 or `'columns'` then `by` may contain column levels and/or index labels. axis : {0 or 'index', 1 or 'columns'}, default 0 Axis to be sorted. ascending : bool or list of bool, default True Sort ascending vs. descending. Specify list for multiple sort orders. If this is a list of bools, must match the length"
winfo toplevel,Return the toplevel widget of this widget.
 get values for loc,"Do a positional lookup on the given Series, returning either a scalar
or a Series.

Assumes that `series.index is self`

key is included for MultiIndex compat."
 get indexer non comparable,"Called from get_indexer or get_indexer_non_unique when the target
is of a non-comparable dtype.

For get_indexer lookups with method=None, get_indexer is an _equality_
check, so non-comparable dtypes mean we will always have no matches.

For get_indexer lookups with a method, get_indexer is an _inequality_
check, so non-comparable dtypes mean we will always raise TypeError.

Parameters
----------
target : Index
method : str or None
unique : bool, default True
    * True if called from get_indexer.
    * False if called from get_indexer_non_unique.

Raises
------
TypeError
    If doing an inequality check, i.e. method is not None."
reindex like,"Return an object with matching indices as other object. Conform the object to the same index on all axes. Optional filling logic, placing NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and copy=False. Parameters ---------- other : Object of the same data type Its row and column indices are used to define the new indices of this object. method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'} Method to use for filling holes in reindexed DataFrame. Please note: this is only applicable to DataFrames/Series with a"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
 init dict,"Derive the ""_mgr"" and ""index"" attributes of a new Series from a
dictionary input.

Parameters
----------
data : dict or dict-like
    Data used to populate the new Series.
index : Index or None, default None
    Index for the new Series: if None, use dict keys.
dtype : np.dtype, ExtensionDtype, or None, default None
    The dtype for the new Series: if None, infer from data.

Returns
-------
_data : BlockManager for the new Series
index : index for the new Series"
 eval expand func,"Function to expand binomial(n, k) when m is positive integer
Also,
n is self.args[0] and k is self.args[1] while using binomial(n, k)"
grid slaves,"Return a list of all slaves of this widget
in its packing order."
 format attrs,"Return a list of tuples of the (attr,formatted_value)."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
winfo vrooty,"Return the y offset of the virtual root relative to the root
window of the screen of this widget."
set names,"Set Index or MultiIndex name. Able to set new names partially and by level. Parameters ---------- names : label or list of label or dict-like for MultiIndex Name(s) to set. .. versionchanged:: 1.3.0 level : int, label or list of int or label, optional If the index is a MultiIndex and names is not dict-like, level(s) to set (None for all levels). Otherwise level must be None. .. versionchanged:: 1.3.0 inplace : bool, default False Modifies the object directly, instead of creating a new Index or MultiIndex. Returns ------- Index or None The same type as the caller or None"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
generate malt command,"This function generates the maltparser command use at the terminal.

:param inputfilename: path to the input file
:type inputfilename: str
:param outputfilename: path to the output file
:type outputfilename: str"
winfo visual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the
colormodel of this widget."
wm colormapwindows,"Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
of this widget. This list contains windows whose colormaps differ from their
parents. Return current list of widgets if WLIST is empty."
 deprecated arg,Issue a FutureWarning if the arg/kwarg is not no_default.
 update legend data,Extract the legend data from an axes object and save it.
share memory,See :meth:`torch.Tensor.share_memory_`
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
slice locs,"Compute slice locations for input labels.

Parameters
----------
start : label, default None
    If None, defaults to the beginning.
end : label, default None
    If None, defaults to the end.
step : int, defaults None
    If None, defaults to 1.
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.4.0

Returns
-------
start, end : int

See Also
--------
Index.get_loc : Get location for a single label.

Notes
-----
This method only works if the index is monotonic or unique.

Examples
--------
>>> idx = pd.Index(list('abcd'))
>>> idx.slice_locs(start='b', end='c')
(1, 3)"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
is integer,Check if the Index only consists of integers. Returns ------- bool Whether or not the Index only consists of integers. See Also -------- is_boolean : Check if the Index only consists of booleans. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx =
winfo x,"Return the x coordinate of the upper left corner of this widget
in the parent."
 all strings,"Yield all strings of certain classes, possibly stripping them.

:param strip: If True, all strings will be stripped before being
    yielded.

:param types: A tuple of NavigableString subclasses. Any strings of
    a subclass not found in this list will be ignored. By
    default, the subclasses considered are the ones found in
    self.interesting_string_types. If that's not specified,
    only NavigableString and CData objects will be
    considered. That means no comments, processing
    instructions, etc.

:yield: A sequence of strings."
wm maxsize,"Set max WIDTH and HEIGHT for this widget. If the window is gridded
the values are given in grid units. Return the current values if None
is given."
get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
 cmp method,Wrapper used to dispatch comparison operations.
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
train stats,"Return a named statistic collected during training, or a dictionary of all
available statistics if no name given

:param statistic: name of statistic
:type statistic: str
:return: some statistic collected during training of this tagger
:rtype: any (but usually a number)"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
winfo vrootheight,"Return the height of the virtual root window associated with this
widget in pixels. If there is no virtual root window return the
height of the screen."
winfo atomname,Return name of atom with identifier ID.
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo reqheight,Return requested height of this widget.
winfo visualsavailable,"Return a list of all visuals available for the screen
of this widget.

Each item in the list consists of a visual name (see winfo_visual), a
depth and if includeids is true is given also the X identifier."
share memory ,"Moves the underlying storage to shared memory.

This is a no-op if the underlying storage is already in shared memory
and for CUDA tensors. Tensors in shared memory cannot be resized."
total seconds,"Return total duration of each element expressed in seconds. This method is available directly on TimedeltaArray, TimedeltaIndex and on Series containing timedelta values under the ``.dt`` namespace. Returns ------- seconds : [ndarray, Float64Index, Series] When the calling object is a TimedeltaArray, the return type is ndarray. When the calling object is a TimedeltaIndex, the return type is a Float64Index. When the calling object is a Series, the return type is Series of type `float64` whose index is the same as the original. See Also -------- datetime.timedelta.total_seconds : Standard library version of this method. TimedeltaIndex.components : Return a DataFrame with components"
winfo ismapped,Return true if this widget is mapped.
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
reorder levels,"Rearrange index levels using input order.

May not drop or duplicate levels.

Parameters
----------
order : list of int representing new level order
    Reference level by number or key.

Returns
-------
type of caller (new object)"
parse all,:rtype: list(Tree)
get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
to series,"Create a Series with both index and values equal to the index keys. Useful with map for returning an indexer based on an index. Parameters ---------- index : Index, optional Index of resulting Series. If None, defaults to original index. name : str, optional Name of resulting Series. If None, defaults to name of original index. Returns ------- Series The dtype will be based on the type of the Index values. See Also -------- Index.to_frame : Convert an Index to a DataFrame. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') By default, the"
trace vdelete,"Delete the trace callback for a variable.

MODE is one of ""r"", ""w"", ""u"" for read, write, undefine.
CBNAME is the name of the callback returned from trace_variable or trace.

This deprecated method wraps a deprecated Tcl method that will
likely be removed in the future.  Use trace_remove() instead."
 eval aseries,"Compute an asymptotic expansion around args0, in terms of self.args.
This function is only used internally by _eval_nseries and should not
be called directly; derived classes can overwrite this to implement
asymptotic expansions."
winfo pixels,Rounded integer value of winfo_fpixels.
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 dir additions,Add additional __dir__ for this object.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
grab release,Release grab for this widget if currently set.
wm command,"Store VALUE in WM_COMMAND property. It is the command
which shall be used to invoke the application. Return current
command if VALUE is None."
concordance list,"Generate a concordance for ``word`` with the specified context window.
Word matching is not case-sensitive.

:param word: The target word or phrase (a list of strings)
:type word: str or list
:param width: The width of each line, in characters (default=80)
:type width: int
:param lines: The number of lines to display (default=25)
:type lines: int

:seealso: ``ConcordanceIndex``"
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
pformat latex qtree,"Returns a representation of the tree compatible with the
LaTeX qtree package. This consists of the string ``\Tree``
followed by the tree represented in bracketed notation.

For example, the following result was generated from a parse tree of
the sentence ``The announcement astounded us``::

  \Tree [.I'' [.N'' [.D The ] [.N' [.N announcement ] ] ]
      [.I' [.V'' [.V' [.V astounded ] [.N'' [.N' [.N us ] ] ] ] ] ] ]

See http://www.ling.upenn.edu/advice/latex.html for the LaTeX
style file for the qtree package.

:return: A latex qtree representation of this tree.
:rtype: str"
grid size,Return a tuple of the number of column and rows in the grid.
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
pretty format,"Draw the DRS
:return: the pretty print string"
get xgb params,Get xgboost specific parameters.
 make label,"Pick an alphabetic character as identifier for an entity in the model.

:param value: where to index into the list of characters
:type value: int"
share memory,See :meth:`torch.Tensor.share_memory_`
 maybe cast indexer,"If we have a float key and are not a floating index, then try to cast
to an int if equivalent."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
  abs  ,Returns a new matrix with entry-wise absolute values.
to frame,"Create a DataFrame with a column containing the Index. Parameters ---------- index : bool, default True Set the index of the returned DataFrame as the original Index. name : object, default None The passed name should substitute for the index name (if it has one). Returns ------- DataFrame DataFrame containing the original Index data. See Also -------- Index.to_series : Convert an Index to a Series. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') >>> idx.to_frame() animal animal Ant Ant Bear Bear Cow Cow By default, the original Index is reused. To enforce a"
 named members,Helper method for yielding various names + members of modules.
event add,"Bind a virtual event VIRTUAL (of the form <<Name>>)
to an event SEQUENCE such that the virtual event is triggered
whenever SEQUENCE occurs."
 maybe match names,"Try to find common names to attach to the result of an operation between
a and b. Return a consensus list of names if they match at least partly
or list of None if they have completely different names."
register module,Alias for :func:`add_module`.
focus get,"Return the widget which has currently the focus in the
application.

Use focus_displayof to allow working with several
displays. Return None if application does not have
the focus."
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
create optimizer,"Create an optimizer, usually using the [training.optimizer] config."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
 get section ref,Get a single section reference.
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
is mixed,Check if the Index holds data with mixed data types. Returns ------- bool Whether or not the Index holds data with mixed data types. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. Examples -------- >>>
 is comparable dtype,Can we compare values of the given dtype to our own?
 marginals,"Calculates values of contingency table marginals from its values.
QuadgramAssocMeasures._marginals(1, 0, 2, 46, 552, 825, 2577, 34967, 1, 0, 2, 48, 7250, 9031, 28585, 356653)
(1, (2, 553, 3, 1), (7804, 6, 3132, 1378, 49, 2), (38970, 17660, 100, 38970), 440540)"
winfo atomname,Return name of atom with identifier ID.
winfo toplevel,Return the toplevel widget of this widget.
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
winfo toplevel,Return the toplevel widget of this widget.
 union schema,Generate schema for a Union.
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
has uninitialized params,"Check if a module has parameters that are not initialized
        "
mark non differentiable,"Marks outputs as non-differentiable. **This should be called at most once, only from inside the** :func:`forward` **method, and all arguments should be tensor outputs.** This will mark outputs as not requiring gradients, increasing the efficiency of backward computation. You still need to accept a gradient for each output in :meth:`~Function.backward`, but it's always going to be a zero tensor with the same shape as the shape of a corresponding output. This is used e.g. for indices returned from a sort. See example:: >>> class Func(Function): >>> @staticmethod >>> def forward(ctx, x): >>> sorted, idx = x.sort() >>> ctx.mark_non_differentiable(idx) >>> ctx.save_for_backward(x,"
 ensure sequence,"This method can be called by methods that need a sequence.  If
`mutable` is true, it will also ensure that the response sequence
is a standard Python list.

.. versionadded:: 0.6"
chart parse,"Return the final parse ``Chart`` from which all possible
parse trees can be extracted.

:param tokens: The sentence to be parsed
:type tokens: list(str)
:rtype: Chart"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
winfo screen,Return the screen name of this widget.
winfo rgb,Return a tuple of integer RGB values in range(65536) for color in this widget.
shell context processor,"Registers a shell context processor function.

.. versionadded:: 0.11"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
winfo manager,Return the window manager name for this widget.
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
evals result,"Return the evaluation results.

If **eval_set** is passed to the `fit` function, you can call
``evals_result()`` to get evaluation results for all passed **eval_sets**.
When **eval_metric** is also passed to the `fit` function, the
**evals_result** will contain the **eval_metrics** passed to the `fit` function.

Returns
-------
evals_result : dictionary

Example
-------

.. code-block:: python

    param_dist = {'objective':'binary:logistic', 'n_estimators':2}

    clf = xgb.XGBModel(**param_dist)

    clf.fit(X_train, y_train,
            eval_set=[(X_train, y_train), (X_test, y_test)],
            eval_metric='logloss',
            verbose=True)

    evals_result = clf.evals_result()

The variable **evals_result** will contain:

.. code-block:: python

    {'validation_0': {'logloss': ['0.604835', '0.531479']},
    'validation_1': {'logloss': ['0.41965', '0.17686']}}"
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
yview moveto,"Adjusts the view in the window so that FRACTION of the
total height of the canvas is off-screen to the top."
get slice bound,"Calculate slice bound that corresponds to given label.

Returns leftmost (one-past-the-rightmost if ``side=='right'``) position
of given label.

Parameters
----------
label : object
side : {'left', 'right'}
kind : {'loc', 'getitem'} or None

    .. deprecated:: 1.4.0

Returns
-------
int
    Index of label."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 formatter func,Formats each item in tup according to its level's formatter function.
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 format duplicate message,"Construct the DataFrame for a DuplicateLabelError.

This returns a DataFrame indicating the labels and positions
of duplicates in an index. This should only be called when it's
already known that duplicates are present.

Examples
--------
>>> idx = pd.Index(['a', 'b', 'a'])
>>> idx._format_duplicate_message()
    positions
label
a        [0, 2]"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
above score,"Returns a sequence of ngrams, ordered by decreasing score, whose
scores each exceed the given minimum score."
winfo reqheight,Return requested height of this widget.
chart parse,"Return the final parse ``Chart`` from which all possible
parse trees can be extracted.

:param tokens: The sentence to be parsed
:type tokens: list(str)
:rtype: Chart"
grid size,Return a tuple of the number of column and rows in the grid.
app template filter,"Register a template filter, available in any template rendered by the
application. Equivalent to :meth:`.Flask.template_filter`.

:param name: the optional name of the filter, otherwise the
             function name will be used."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
is mixed,Check if the Index holds data with mixed data types. Returns ------- bool Whether or not the Index holds data with mixed data types. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. Examples -------- >>>
event delete,Unbind a virtual event VIRTUAL from SEQUENCE.
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
convert dtypes,"Convert columns to best possible dtypes using dtypes supporting ``pd.NA``. .. versionadded:: 1.0.0 Parameters ---------- infer_objects : bool, default True Whether object dtypes should be converted to the best possible types. convert_string : bool, default True Whether object dtypes should be converted to ``StringDtype()``. convert_integer : bool, default True Whether, if possible, conversion can be done to integer extension types. convert_boolean : bool, defaults True Whether object dtypes should be converted to ``BooleanDtypes()``. convert_floating : bool, defaults True Whether, if possible, conversion can be done to floating extension types. If `convert_integer` is also True, preference will be give to integer"
grid size,Return a tuple of the number of column and rows in the grid.
 delparent,"Update the parent pointer of ``child`` to not point to self.  This
method is only called if the type of ``child`` is ``Tree``; i.e., it
is not called when removing a leaf from a tree.  This method
is always called before the child is actually removed from the
child list of ``self``.

:type child: Tree
:type index: int
:param index: The index of ``child`` in ``self``."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
 forward probability,"Return the forward probability matrix, a T by N array of
log-probabilities, where T is the length of the sequence and N is the
number of states. Each entry (t, s) gives the probability of being in
state s at time t after observing the partial symbol sequence up to
and including t.

:param unlabeled_sequence: the sequence of unlabeled symbols
:type unlabeled_sequence: list
:return: the forward log probability matrix
:rtype: array"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
winfo exists,Return true if this widget exists.
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
is relative to,"Return True if the path is relative to another path or False.
        "
teardown appcontext,"Registers a function to be called when the application context is popped. The application context is typically popped after the request context for each request, at the end of CLI commands, or after a manually pushed context ends. .. code-block:: python with app.app_context(): ... When the ``with`` block exits (or ``ctx.pop()`` is called), the teardown functions are called just before the app context is made inactive. Since a request context typically also manages an application context it would also be called when you pop a request context. When a teardown function was called because of an unhandled exception it will"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
 cmp method,Wrapper used to dispatch comparison operations.
share memory,See :meth:`torch.Tensor.share_memory_`
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
 checker,"Check whether the provided array or dtype is of an integer dtype. Unlike in `is_any_int_dtype`, timedelta64 instances will return False. The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered as integer by this function. Parameters ---------- arr_or_dtype : array-like or dtype The array or dtype to check. Returns ------- boolean Whether or not the array or dtype is of an integer dtype and not an instance of timedelta64. Examples -------- >>> is_integer_dtype(str) False >>> is_integer_dtype(int) True >>> is_integer_dtype(float) False >>> is_integer_dtype(np.uint64) True >>> is_integer_dtype('int8') True >>> is_integer_dtype('Int8') True >>> is_integer_dtype(pd.Int8Dtype) True >>> is_integer_dtype(np.datetime64) False >>> is_integer_dtype(np.timedelta64) False >>> is_integer_dtype(np.array(['a', 'b']))"
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
is categorical,Check if the Index holds categorical data. Returns ------- bool True if the Index is categorical. See Also -------- CategoricalIndex : Index for categorical data. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples --------
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
place forget,Unmap this widget.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 get readings,"Build a list of semantic readings for a sentence.

:rtype: list(Expression)"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
winfo cells,Return number of cells in the colormap for this widget.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 get types namespace,Internal method used during type resolution for serializer annotations.
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
place slaves,"Return a list of all slaves of this widget
in its packing order."
get xgb params,Get xgboost specific parameters.
slice indexer,"Compute the slice indexer for input labels and step. Index needs to be ordered and unique. Parameters ---------- start : label, default None If None, defaults to the beginning. end : label, default None If None, defaults to the end. step : int, default None kind : str, default None .. deprecated:: 1.4.0 Returns ------- indexer : slice Raises ------ KeyError : If key does not exist, or key is not unique and index is not ordered. Notes ----- This function assumes that the data is sorted, so use at your own peril Examples -------- This is a method on"
wm iconwindow,"Set widget PATHNAME to be displayed instead of icon. Return the current
value if None is given."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
 partial date slice,"Parameters
----------
reso : Resolution
parsed : datetime

Returns
-------
slice or ndarray[intp]"
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
to string,"Render a DataFrame to a console-friendly tabular output. Parameters ---------- buf : str, Path or StringIO-like, optional, default None Buffer to write to. If None, the output is returned as a string. columns : sequence, optional, default None The subset of columns to write. Writes all columns by default. col_space : int, list or dict of int, optional The minimum width of each column. If a list of ints is given every integers corresponds with one column. If a dict is given, the key references the column, while the value defines the space to use.. header : bool or sequence"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
pack configure,Pack a widget in the parent widget. Use as options: after=widget - pack it after you have packed widget anchor=NSEW (or subset) - position widget according to given direction before=widget - pack it before you will pack widget expand=bool - expand widget if parent size grows fill=NONE or X or Y or BOTH - fill widget if widget grows in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
get indexer for,"Guaranteed return of an indexer even when non-unique.

This dispatches to get_indexer or get_indexer_non_unique
as appropriate.

Returns
-------
np.ndarray[np.intp]
    List of indices.

Examples
--------
>>> idx = pd.Index([np.nan, 'var1', np.nan])
>>> idx.get_indexer_for([np.nan])
array([0, 2])"
initialize edge scores,"Assigns a score to every edge in the ``DependencyGraph`` graph.
These scores are generated via the parser's scorer which
was assigned during the training process.

:type graph: DependencyGraph
:param graph: A dependency graph to assign scores to."
to clipboard,"Copy object to the system clipboard. Write a text representation of object to the system clipboard. This can be pasted into Excel, for example. Parameters ---------- excel : bool, default True Produce output in a csv format for easy pasting into excel. - True, use the provided separator for csv pasting. - False, write a string representation of the object to the clipboard. sep : str, default ``'\t'`` Field delimiter. **kwargs These parameters will be passed to DataFrame.to_csv. See Also -------- DataFrame.to_csv : Write a DataFrame to a comma-separated values (csv) file. read_clipboard : Read text from clipboard and pass"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 splitzipext,"Split zip extension from filename and return filename.

Returns
-------
base, zip_ext : {tuple}"
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
tk focusPrev,Return previous widget in the focus order. See tk_focusNext for details.
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
grab current,"Return widget which has currently the grab in this application
or None."
rename ,In-place version of :meth:`~Tensor.rename`.
xview scroll,"Shift the x-view according to NUMBER which is measured in ""units""
or ""pages"" (WHAT)."
share memory,See :meth:`torch.Tensor.share_memory_`
span tokenize,"Identify the tokens using integer offsets ``(start_i, end_i)``,
where ``s[start_i:end_i]`` is the corresponding token.

:rtype: iter(tuple(int, int))"
register buffer,"Adds a buffer to the module. This is typically used to register a buffer that should not to be considered a model parameter. For example, BatchNorm's ``running_mean`` is not a parameter, but is part of the module's state. Buffers, by default, are persistent and will be saved alongside parameters. This behavior can be changed by setting :attr:`persistent` to ``False``. The only difference between a persistent buffer and a non-persistent buffer is that the latter will not be a part of this module's :attr:`state_dict`. Buffers can be accessed as attributes using given names. Args: name (str): name of the buffer. The"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
 fill mask inplace,"Replace values in locations specified by 'mask' using pad or backfill.

See also
--------
ExtensionArray.fillna"
winfo pixels,Rounded integer value of winfo_fpixels.
memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
chart parse,"Return the final parse ``Chart`` from which all possible
parse trees can be extracted.

:param tokens: The sentence to be parsed
:type tokens: list(str)
:rtype: Chart"
grid anchor,"The anchor value controls how to place the grid within the
master when no row/column has any weight.

The default anchor is nw."
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
chomsky normal form,"This method can modify a tree in three ways: 1. Convert a tree into its Chomsky Normal Form (CNF) equivalent -- Every subtree has either two non-terminals or one terminal as its children. This process requires the creation of more""artificial"" non-terminal nodes. 2. Markov (vertical) smoothing of children in new artificial nodes 3. Horizontal (parent) annotation of nodes :param factor: Right or left factoring method (default = ""right"") :type factor: str = [left|right] :param horzMarkov: Markov order for sibling smoothing in artificial nodes (None (default) = include all siblings) :type horzMarkov: int | None :param vertMarkov: Markov order for parent"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
from FractionField,Convert a rational function to ``dtype``. 
 validate positional slice,"For positional indexing, a slice must have either int or None
for each of start, stop, and step."
addtag all,Add tag NEWTAG to all items.
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
tag sents,"Apply ``self.tag()`` to each element of *sentences*.  I.e.:

    return [self.tag(sent) for sent in sentences]"
winfo screen,Return the screen name of this widget.
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
grid forget,Unmap this widget.
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
at time,"Select values at particular time of day (e.g., 9:30AM). Parameters ---------- time : datetime.time or str axis : {0 or 'index', 1 or 'columns'}, default 0 For `Series` this parameter is unused and defaults to 0. Returns ------- Series or DataFrame Raises ------ TypeError If the index is not a :class:`DatetimeIndex` See Also -------- between_time : Select values between particular times of the day. first : Select initial periods of time series based on a date offset. last : Select final periods of time series based on a date offset. DatetimeIndex.indexer_at_time : Get just the index locations for values at"
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
reindex like,"Return an object with matching indices as other object. Conform the object to the same index on all axes. Optional filling logic, placing NaN in locations having no value in the previous index. A new object is produced unless the new index is equivalent to the current one and copy=False. Parameters ---------- other : Object of the same data type Its row and column indices are used to define the new indices of this object. method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'} Method to use for filling holes in reindexed DataFrame. Please note: this is only applicable to DataFrames/Series with a"
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 get attributes dict,"Return an attributes dict for my class.

Temporarily added back for compatibility issue in dask, see
https://github.com/pandas-dev/pandas/pull/43895"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
 get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
sort values,"Return a sorted copy of the index. Return a sorted copy of the index, and optionally return the indices that sorted the index itself. Parameters ---------- return_indexer : bool, default False Should the indices that would sort the index be returned. ascending : bool, default True Should the index values be sorted in an ascending order. na_position : {'first' or 'last'}, default 'last' Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at the end. .. versionadded:: 1.2.0 key : callable, optional If not None, apply the key function to the index values before sorting. This is similar to"
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
is mixed,Check if the Index holds data with mixed data types. Returns ------- bool Whether or not the Index holds data with mixed data types. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. Examples -------- >>>
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
help exec,"(!) statement
Execute the (one-line) statement in the context of the current
stack frame.  The exclamation point can be omitted unless the
first word of the statement resembles a debugger command.  To
assign to a global variable you must always prefix the command
with a 'global' command, e.g.:
(Pdb) global list_options; list_options = ['-l']
(Pdb)"
image types,Return a list of all available image types (e.g. photo bitmap).
register hook,"Registers a backward hook. The hook will be called every time a gradient with respect to the Tensor is computed. The hook should have the following signature:: hook(grad) -> Tensor or None The hook should not modify its argument, but it can optionally return a new gradient which will be used in place of :attr:`grad`. This function returns a handle with a method ``handle.remove()`` that removes the hook from the module. .. note:: See :ref:`backward-hooks-execution` for more information on how when this hook is executed, and how its execution is ordered relative to other hooks. Example:: >>> v = torch.tensor([0.,"
tag sents,"Apply ``self.tag()`` to each element of *sentences*.  I.e.:

    return [self.tag(sent) for sent in sentences]"
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 construct threads,"Use ``self._readings`` to construct a value for ``self._threads``
and use the model builder to construct a value for ``self._filtered_threads``"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
wait variable,"Wait until the variable is modified.

A parameter of type IntVar, StringVar, DoubleVar or
BooleanVar must be given."
parse all,:rtype: list(Tree)
share memory ,"Moves the storage to shared memory.

This is a no-op for storages already in shared memory and for CUDA
storages, which do not need to be moved for sharing across processes.
Storages in shared memory cannot be resized.

Returns: self"
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
section modulus,"Returns a tuple with the section modulus of a two-dimensional polygon. Section modulus is a geometric property of a polygon defined as the ratio of second moment of area to the distance of the extreme end of the polygon from the centroidal axis. References ========== https://en.wikipedia.org/wiki/Section_modulus Parameters ========== point : Point, two-tuple of sympifyable objects, or None(default=None) point is the point at which section modulus is to be found. If ""point=None"" it will be calculated for the point farthest from the centroidal axis of the polygon. Returns ======= S_x, S_y: numbers or SymPy expressions S_x is the section modulus with"
winfo pointerxy,Return a tuple of x and y coordinates of the pointer on the root window.
grid size,Return a tuple of the number of column and rows in the grid.
 named members,Helper method for yielding various names + members of modules.
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 step2,"Implements Step 2 from ""An algorithm for suffix stripping"" From the paper: Step 2 (m>0) ATIONAL -> ATE relational -> relate (m>0) TIONAL -> TION conditional -> condition rational -> rational (m>0) ENCI -> ENCE valenci -> valence (m>0) ANCI -> ANCE hesitanci -> hesitance (m>0) IZER -> IZE digitizer -> digitize (m>0) ABLI -> ABLE conformabli -> conformable (m>0) ALLI -> AL radicalli -> radical (m>0) ENTLI -> ENT differentli -> different (m>0) ELI -> E vileli - > vile (m>0) OUSLI -> OUS analogousli -> analogous (m>0) IZATION -> IZE vietnamization -> vietnamize (m>0) ATION -> ATE predication"
winfo screencells,"Return the number of the cells in the colormap of the screen
of this widget."
 dir additions,Add additional __dir__ for this object.
zero grad,"Sets the gradients of all optimized :class:`torch.Tensor` s to zero. Args: set_to_none (bool): instead of setting to zero, set the grads to None. This will in general have lower memory footprint, and can modestly improve performance. However, it changes certain behaviors. For example: 1. When the user tries to access a gradient and perform manual ops on it, a None attribute or a Tensor full of 0s will behave differently. 2. If the user requests ``zero_grad(set_to_none=True)`` followed by a backward pass, ``.grad``\ s are guaranteed to be None for params that did not receive a gradient. 3. ``torch.optim`` optimizers have"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
winfo class,Return window class name of this widget.
 convert slice indexer,"Convert a slice indexer.

By definition, these are labels unless 'iloc' is passed in.
Floats are not allowed as the start, step, or stop of the slice.

Parameters
----------
key : label of the slice bound
kind : {'loc', 'getitem'}"
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
wm resizable,"Instruct the window manager whether this width can be resized
in WIDTH or HEIGHT. Both values are boolean values."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 construct result,"Construct an appropriately-wrapped result from the ArrayLike result
of an arithmetic-like operation."
load state dict,"Loads the optimizer state.

Args:
    state_dict (dict): optimizer state. Should be an object returned
        from a call to :meth:`state_dict`."
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
winfo containing,"Return the widget which is at the root coordinates ROOTX, ROOTY."
is nonempty,Return True if there are no empty productions.
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
grid forget,Unmap this widget.
winfo cells,Return number of cells in the colormap for this widget.
tz localize,"Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index. This method takes a time zone (tz) naive Datetime Array/Index object and makes this time zone aware. It does not move the time to another time zone. This method can also be used to do the inverse -- to create a time zone unaware object from an aware object. To that end, pass `tz=None`. Parameters ---------- tz : str, pytz.timezone, dateutil.tz.tzfile or None Time zone to convert timestamps to. Passing ``None`` will remove the time zone information preserving local time. ambiguous : 'infer', 'NaT', bool array, default 'raise' When clocks moved backward"
place info,"Return information about the placing options
for this widget."
pack forget,Unmap this widget and do not use it for the packing order.
 backward probability,"Return the backward probability matrix, a T by N array of
log-probabilities, where T is the length of the sequence and N is the
number of states. Each entry (t, s) gives the probability of being in
state s at time t after observing the partial symbol sequence from t
.. T.

:return: the backward log probability matrix
:rtype:  array
:param unlabeled_sequence: the sequence of unlabeled symbols
:type unlabeled_sequence: list"
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
 dir additions,Add additional __dir__ for this object.
share memory,See :meth:`torch.Tensor.share_memory_`
 get level values,"Return an Index of values for requested level. This is primarily useful to get an individual level of values from a MultiIndex, but is provided on Index as well for compatibility. Parameters ---------- level : int or str It is either the integer position or the name of the level. Returns ------- Index Calling object, as there is only one level in the Index. See Also -------- MultiIndex.get_level_values : Get values for a level of a MultiIndex. Notes ----- For Index, level should be 0, since there are no multiple levels. Examples -------- >>> idx = pd.Index(list('abc')) >>> idx Index(['a',"
to json,"Return a json representation (str) of this blob.
Takes the same arguments as json.dumps.

.. versionadded:: 0.5.1"
winfo depth,Return the number of bits per pixel.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
equal values,"Return True if ``self`` and ``other`` assign the same value to
to every feature.  In particular, return true if
``self[p]==other[p]`` for every feature path *p* such
that ``self[p]`` or ``other[p]`` is a base value (i.e.,
not a nested feature structure).

:param check_reentrance: If True, then also return False if
    there is any difference between the reentrances of ``self``
    and ``other``.
:note: the ``==`` is equivalent to ``equal_values()`` with
    ``check_reentrance=True``."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
 should pretty print,"Should this tag be pretty-printed?

Most of them should, but some (such as <pre> in HTML
documents) should not."
selection element,"Sets or gets the currently selected element.

If a spinbutton element is specified, it will be
displayed depressed."
winfo pixels,Rounded integer value of winfo_fpixels.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
named parameters,"Returns an iterator over module parameters, yielding both the
name of the parameter as well as the parameter itself.

Args:
    prefix (str): prefix to prepend to all parameter names.
    recurse (bool): if True, then yields parameters of this module
        and all submodules. Otherwise, yields only parameters that
        are direct members of this module.
    remove_duplicate (bool, optional): whether to remove the duplicated
        parameters in the result. Defaults to True.

Yields:
    (str, Parameter): Tuple containing the name and parameter

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())"
 get default index names,"Get names of index.

Parameters
----------
names : int, str or 1-dimensional list, default None
    Index names to set.
default : str
    Default name of index.

Raises
------
TypeError
    if names not str or list-like"
wm forget,"The window will be unmapped from the screen and will no longer
be managed by wm. toplevel windows will be treated like frame
windows once they are no longer managed by wm, however, the menu
option configuration will be remembered and the menus will return
once the widget is managed again."
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
update idletasks,"Enter event loop until all idle callbacks have been called. This
will update the display of windows but not process events caused by
the user."
websocket route,"We no longer document this decorator style API, and its usage is discouraged.
Instead you should use the following approach:

>>> routes = [WebSocketRoute(path, endpoint=...), ...]
>>> app = Starlette(routes=routes)"
get indexer non unique,"Compute indexer and mask for new index given the current index.

The indexer should be then used as an input to ndarray.take to align the
current data to the new index.

Parameters
----------
target : Index

Returns
-------
indexer : np.ndarray[np.intp]
    Integers from 0 to n - 1 indicating that the index at these
    positions matches the corresponding target values. Missing values
    in the target are marked by -1.
missing : np.ndarray[np.intp]
    An indexer into the target of the values not found.
    These correspond to the -1 in the indexer array."
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
write bytes,"Open the file in bytes mode, write to it, and close the file."
clipboard clear,"Clear the data in the Tk clipboard.

A widget specified for the optional displayof keyword
argument specifies the target display."
on event,"Add an event handler for the application.

`on_event` is deprecated, use `lifespan` event handlers instead.

Read more about it in the
[FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated)."
 sort levels monotonic,Compat with MultiIndex.
get indexer for,"Guaranteed return of an indexer even when non-unique.

This dispatches to get_indexer or get_indexer_non_unique
as appropriate.

Returns
-------
np.ndarray[np.intp]
    List of indices.

Examples
--------
>>> idx = pd.Index([np.nan, 'var1', np.nan])
>>> idx.get_indexer_for([np.nan])
array([0, 2])"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
winfo height,Return height of this widget.
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
 box col values,Provide boxed values for a column.
 maybe disallow fill,"We only use pandas-style take when allow_fill is True _and_
fill_value is not None."
share memory ,"Moves the storage to shared memory.

This is a no-op for storages already in shared memory and for CUDA
storages, which do not need to be moved for sharing across processes.
Storages in shared memory cannot be resized.

Returns: self"
winfo geometry,"Return geometry string for this widget in the form ""widthxheight+X+Y""."
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
grab set,"Set grab for this widget.

A grab directs all events to this and descendant
widgets in the application."
update dtype,"Convert the SparseDtype to a new dtype. This takes care of converting the ``fill_value``. Parameters ---------- dtype : Union[str, numpy.dtype, SparseDtype] The new dtype to use. * For a SparseDtype, it is simply returned * For a NumPy dtype (or str), the current fill value is converted to the new dtype, and a SparseDtype with `dtype` and the new fill value is returned. Returns ------- SparseDtype A new SparseDtype with the correct `dtype` and fill value for that `dtype`. Raises ------ ValueError When the current fill value cannot be converted to the new `dtype` (e.g. trying to convert ``np.nan`` to"
 step5a,"Implements Step 5a from ""An algorithm for suffix stripping""

From the paper:

Step 5a

    (m>1) E     ->                  probate        ->  probat
                                    rate           ->  rate
    (m=1 and not *o) E ->           cease          ->  ceas"
iter encoded,"Iter the response encoded with the encoding of the response.
If the response object is invoked as WSGI application the return
value of this method is used as application iterator unless
:attr:`direct_passthrough` was activated."
place configure,Place a widget in the parent widget. Use as options: in=master - master relative to which the widget is placed in_=master - see 'in' option description x=amount - locate anchor of this widget at position x of master y=amount - locate anchor of this widget at position y of master relx=amount - locate anchor of this widget between 0.0 and 1.0 relative to width of master (1.0 is right edge) rely=amount - locate anchor of this widget between 0.0 and 1.0 relative to height of master (1.0 is bottom edge) anchor=NSEW (or subset) - position anchor according to given direction
is tangent,"Is `o` tangent to the ellipse?

Parameters
==========

o : GeometryEntity
    An Ellipse, LinearEntity or Polygon

Raises
======

NotImplementedError
    When the wrong type of argument is supplied.

Returns
=======

is_tangent: boolean
    True if o is tangent to the ellipse, False otherwise.

See Also
========

tangent_lines

Examples
========

>>> from sympy import Point, Ellipse, Line
>>> p0, p1, p2 = Point(0, 0), Point(3, 0), Point(3, 3)
>>> e1 = Ellipse(p0, 3, 2)
>>> l1 = Line(p1, p2)
>>> e1.is_tangent(l1)
True"
winfo pathname,Return the pathname of the widget given by ID.
winfo manager,Return the window manager name for this widget.
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 align,"A convenience function for operations that need to preserve axis
orientation."
to pydatetime,"Return an ndarray of datetime.datetime objects.

Returns
-------
datetimes : ndarray[object]"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
pretty print,"Pretty-print this tree as ASCII or Unicode art.
For explanation of the arguments, see the documentation for
`nltk.treeprettyprinter.TreePrettyPrinter`."
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
prob classify many,"Apply ``self.prob_classify()`` to each element of ``featuresets``.  I.e.:

    return [self.prob_classify(fs) for fs in featuresets]

:rtype: list(ProbDistI)"
winfo screenmmheight,"Return the number of pixels of the height of the screen of
this widget in mm."
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
collapse unary,"Collapse subtrees with a single child (ie. unary productions) into a new non-terminal (Tree node) joined by 'joinChar'. This is useful when working with algorithms that do not allow unary productions, and completely removing the unary productions would require loss of useful information. The Tree is modified directly (since it is passed by reference) and no value is returned. :param collapsePOS: 'False' (default) will not collapse the parent of leaf nodes (ie. Part-of-Speech tags) since they are always unary productions :type collapsePOS: bool :param collapseRoot: 'False' (default) will not modify the root production if it is unary. For the Penn"
 getconfigure,Call Tcl configure command and return the result as a dict.
winfo pathname,Return the pathname of the widget given by ID.
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
set logprob,"Set the log probability associated with this object to
``logprob``.  I.e., set the probability associated with this
object to ``2**(logprob)``.

:param logprob: The new log probability
:type logprob: float"
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
wm iconmask,"Set mask for the icon bitmap of this widget. Return the
mask if None is given."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
winfo viewable,Return true if the widget and all its higher ancestors are mapped.
save model,"Save the model to a file.

The model is saved in an XGBoost internal format which is universal
among the various XGBoost interfaces. Auxiliary attributes of the
Python Booster object (such as feature names) will not be saved.

  .. note::

    See:

    https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html

Parameters
----------
fname : string
    Output file name"
add param group,"Add a param group to the :class:`Optimizer` s `param_groups`.

This can be useful when fine tuning a pre-trained network as frozen layers can be made
trainable and added to the :class:`Optimizer` as training progresses.

Args:
    param_group (dict): Specifies what Tensors should be optimized along with group
        specific optimization options."
create line,"Create line with coordinates x1,y1,...,xn,yn."
 get join freq,Get the freq to attach to the result of a join operation.
 step1a,"Implements Step 1a from ""An algorithm for suffix stripping""

From the paper:

    SSES -> SS                         caresses  ->  caress
    IES  -> I                          ponies    ->  poni
                                       ties      ->  ti
    SS   -> SS                         caress    ->  caress
    S    ->                            cats      ->  cat"
selection own get,"Return owner of X selection.

The following keyword parameter can
be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
bind class,"Bind to widgets with bindtag CLASSNAME at event
SEQUENCE a call of function FUNC. An additional
boolean parameter ADD specifies whether FUNC will be
called additionally to the other bound function or
whether it will replace the previous function. See bind for
the return value."
app template global,"Register a template global, available in any template rendered by the
application. Equivalent to :meth:`.Flask.template_global`.

.. versionadded:: 0.10

:param name: the optional name of the global, otherwise the
             function name will be used."
register full backward hook,"Registers a backward hook on the module. The hook will be called every time the gradients with respect to a module are computed, i.e. the hook will execute if and only if the gradients with respect to module outputs are computed. The hook should have the following signature:: hook(module, grad_input, grad_output) -> tuple(Tensor) or None The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients with respect to the inputs and outputs respectively. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the input that will be used in place of"
 call boxer,"Call the ``boxer`` binary with the given input.

:param candc_out: str output from C&C parser
:return: stdout"
place info,"Return information about the placing options
for this widget."
winfo pixels,Rounded integer value of winfo_fpixels.
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
unbind all,Unbind for all widgets for event SEQUENCE all functions.
 maybe update cacher,See NDFrame._maybe_update_cacher.__doc__
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
grid location,"Return a tuple of column and row which identify the cell
at which the pixel at position X and Y inside the master
widget is located."
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
selection clear,Clear the current X selection.
 map,"A method that calculates the order of the columns that SENNA pipeline
will output the tags into. This depends on the operations being ordered."
info patchlevel,Returns the exact version of the Tcl library.
focus lastfor,"Return the widget which would have the focus if top level
for this widget gets the focus from the window manager."
register module,Alias for :func:`add_module`.
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
do rv,"retval
Print the return value for the last return of a function."
prob classify many,"Apply ``self.prob_classify()`` to each element of ``featuresets``.  I.e.:

    return [self.prob_classify(fs) for fs in featuresets]

:rtype: list(ProbDistI)"
unbind all,Unbind for all widgets for event SEQUENCE all functions.
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
get value,"Fast lookup of value from 1-dimensional ndarray.

Only use this if you know what you're doing.

Returns
-------
scalar or Series"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
 verify integrity,"Parameters
----------
codes : optional list
    Codes to check for validity. Defaults to current codes.
levels : optional list
    Levels to check for validity. Defaults to current levels.

Raises
------
ValueError
    If length of levels and codes don't match, if the codes for any
    level would exceed level bounds, or there are any duplicate levels.

Returns
-------
new codes where code value = -1 if it corresponds to a
NaN level."
 maybe check unique,"Check that an Index has no duplicates.

This is typically only called via
`NDFrame.flags.allows_duplicate_labels.setter` when it's set to
True (duplicates aren't allowed).

Raises
------
DuplicateLabelError
    When the index is not unique."
 maybe disable logical methods,raise if this Index subclass does not support any or all.
 apply filter,"Generic filter removes ngrams from the frequency distribution
if the function returns True when passed an ngram tuple."
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
share memory,See :meth:`torch.Tensor.share_memory_`
tk focusPrev,Return previous widget in the focus order. See tk_focusNext for details.
 get reconciled name object,"If the result of a set operation will be self,
return self, unless the name changes, in which
case make a shallow copy of self."
focus force,"Direct input focus to this widget even if the
application does not have the focus. Use with
caution!"
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
winfo screenmmwidth,"Return the number of pixels of the width of the screen of
this widget in mm."
 eval Mod,"A dispatched function to compute `b^e \bmod q`, dispatched by ``Mod``. Notes ===== Algorithms: 1. For unevaluated integer power, use built-in ``pow`` function with 3 arguments, if powers are not too large wrt base. 2. For very large powers, use totient reduction if e >= lg(m). Bound on m, is for safe factorization memory wise ie m^(1/4). For pollard-rho to be faster than built-in pow lg(e) > m^(1/4) check is added. 3. For any unevaluated power found in `b` or `e`, the step 2 will be recursed down to the base and the exponent such that the `b \bmod q`"
chomsky normal form,"This method can modify a tree in three ways: 1. Convert a tree into its Chomsky Normal Form (CNF) equivalent -- Every subtree has either two non-terminals or one terminal as its children. This process requires the creation of more""artificial"" non-terminal nodes. 2. Markov (vertical) smoothing of children in new artificial nodes 3. Horizontal (parent) annotation of nodes :param factor: Right or left factoring method (default = ""right"") :type factor: str = [left|right] :param horzMarkov: Markov order for sibling smoothing in artificial nodes (None (default) = include all siblings) :type horzMarkov: int | None :param vertMarkov: Markov order for parent"
Do Kw pairwise,The observed disagreement for the weighted kappa coefficient.
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
pack forget,Unmap this widget and do not use it for the packing order.
parse sents,"Parse multiple sentences.

Takes multiple sentences as a list where each sentence is a list of
words. Each sentence will be automatically tagged with this
CoreNLPParser instance's tagger.

If a whitespace exists inside a token, then the token will be treated as
several tokens.

:param sentences: Input sentences to parse
:type sentences: list(list(str))
:rtype: iter(iter(Tree))"
grid size,Return a tuple of the number of column and rows in the grid.
place slaves,"Return a list of all slaves of this widget
in its packing order."
clipboard append,"Append STRING to the Tk clipboard.

A widget specified at the optional displayof keyword
argument specifies the target display. The clipboard
can be retrieved with selection_get."
 named members,Helper method for yielding various names + members of modules.
winfo ismapped,Return true if this widget is mapped.
create url adapter,"Creates a URL adapter for the given request. The URL adapter
is created at a point where the request context is not yet set
up so the request is passed explicitly.

.. versionadded:: 0.6

.. versionchanged:: 0.9
   This can now also be called without a request object when the
   URL adapter is created for the application context.

.. versionchanged:: 1.0
    :data:`SERVER_NAME` no longer implicitly enables subdomain
    matching. Use :attr:`subdomain_matching` instead."
generate square subsequent mask,"Generate a square mask for the sequence. The masked positions are filled with float('-inf').
Unmasked positions are filled with float(0.0)."
 find reentrances,"Return a dictionary that maps from the ``id`` of each feature
structure contained in ``self`` (including ``self``) to a
boolean value, indicating whether it is reentrant or not."
 reduce,Perform the reduction type operation if we can.
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
option readfile,"Read file FILENAME into the option database.

An optional second parameter gives the numeric
priority."
register module,Alias for :func:`add_module`.
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
verb t6,stem the imperative tense prefixes
selection clear,Clear the current X selection.
exception handler,"Add an exception handler to the app.

Read more about it in the
[FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).

## Example

```python
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse


class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name


app = FastAPI()


@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={""message"": f""Oops! {exc.name} did something. There goes a rainbow...""},
    )
```"
 save to state dict,"Saves module state to `destination` dictionary, containing a state
of the module, but not its descendants. This is called on every
submodule in :meth:`~torch.nn.Module.state_dict`.

In rare cases, subclasses can achieve class-specific behavior by
overriding this method with custom logic.

Args:
    destination (dict): a dict where state will be stored
    prefix (str): the prefix for parameters and buffers used in this
        module"
to json,"Convert the object to a JSON string. Note NaN's and None will be converted to null and datetime objects will be converted to UNIX timestamps. Parameters ---------- path_or_buf : str, path object, file-like object, or None, default None String, path object (implementing os.PathLike[str]), or file-like object implementing a write() function. If None, the result is returned as a string. orient : str Indication of expected JSON string format. * Series: - default is 'index' - allowed values are: {'split', 'records', 'index', 'table'}. * DataFrame: - default is 'columns' - allowed values are: {'split', 'records', 'index', 'columns', 'values', 'table'}. * The"
base fdist,"Return the base frequency distribution that this probability
distribution is based on.

:rtype: FreqDist"
register step pre hook,"Register an optimizer step pre hook which will be called before
optimizer step. It should have the following signature::

    hook(optimizer, args, kwargs) -> None or modified args and kwargs

The ``optimizer`` argument is the optimizer instance being used. If
args and kwargs are modified by the pre-hook, then the transformed
values are returned as a tuple containing the new_args and new_kwargs.

Args:
    hook (Callable): The user defined hook to be registered.

Returns:
    :class:`torch.utils.hooks.RemoveableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
register forward hook,"Registers a forward hook on the module. The hook will be called every time after :func:`forward` has computed an output. If ``with_kwargs`` is ``False`` or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the output. It can modify the input inplace but it will not have effect on forward since this is called after :func:`forward` is called. The hook should have the following signature:: hook(module, args, output) -> None or modified output If ``with_kwargs`` is ``True``, the forward"
retract assumptions,"Retract assumptions from the assumption list.

:param debug: If True, give warning when ``retracted`` is not present on
assumptions list.
:type debug: bool
:param retracted: assumptions to be retracted
:type retracted: list(sem.Expression)"
update edge scores,"Updates the edge scores to reflect a collapse operation into
new_node.

:type new_node: A Node.
:param new_node: The node which cycle nodes are collapsed into.
:type cycle_path: A list of integers.
:param cycle_path: A list of node addresses that belong to the cycle."
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
register parameter,"Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Args:
    name (str): name of the parameter. The parameter can be accessed
        from this module using the given name
    param (Parameter or None): parameter to be added to the module. If
        ``None``, then operations that run on parameters, such as :attr:`cuda`,
        are ignored. If ``None``, the parameter is **not** included in the
        module's :attr:`state_dict`."
pack forget,Unmap this widget and do not use it for the packing order.
wm sizefrom,"Instruct the window manager that the size of this widget shall
be defined by the user if WHO is ""user"", and by its own policy if WHO is
""program""."
 validate index level,"Validate index level.

For single-level Index getting level number is a no-op, but some
verification must be done like in MultiIndex."
prob classify many,"Apply ``self.prob_classify()`` to each element of ``featuresets``.  I.e.:

    return [self.prob_classify(fs) for fs in featuresets]

:rtype: list(ProbDistI)"
url defaults,"Callback function for URL defaults for all view functions of the
application.  It's called with the endpoint and values and should
update the values passed in place.

This is available on both app and blueprint objects. When used on an app, this
is called for every request. When used on a blueprint, this is called for
requests that the blueprint handles. To register with a blueprint and affect
every request, use :meth:`.Blueprint.app_url_defaults`."
 reindex axes,Perform the reindex for all the axes.
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
 setitem,"Helper to set value at location given by key. Examples ======== >>> from sympy import Matrix, I, zeros, ones >>> m = Matrix(((1, 2+I), (3, 4))) >>> m Matrix([ [1, 2 + I], [3, 4]]) >>> m[1, 0] = 9 >>> m Matrix([ [1, 2 + I], [9, 4]]) >>> m[1, 0] = [[0, 1]] To replace row r you assign to position r*m where m is the number of columns: >>> M = zeros(4) >>> m = M.cols >>> M[3*m] = ones(1, m)*2; M Matrix([ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 2,"
 rename,fastpath for rename if new name is already validated.
replace listeners,"Find listener layers (connecting to a token-to-vector embedding component) of a given pipeline component model and replace them with a standalone copy of the token-to-vector layer. This can be useful when training a pipeline with components sourced from an existing pipeline: if multiple components (e.g. tagger, parser, NER) listen to the same tok2vec component, but some of them are frozen and not updated, their performance may degrade significally as the tok2vec component is updated with new data. To prevent this, listeners can be replaced with a standalone tok2vec layer that is owned by the component and doesn't change if the"
parse sents,"Apply ``self.parse()`` to each element of ``sents``.
:rtype: iter(iter(Tree))"
grab status,"Return None, ""local"" or ""global"" if this widget has
no, a local or a global grab."
grid configure,Position a widget in the parent widget in a grid. Use as options: column=number - use cell identified with given column (starting with 0) columnspan=number - this widget will span several columns in=master - use master to contain this widget in_=master - see 'in' option description ipadx=amount - add internal padding in x direction ipady=amount - add internal padding in y direction padx=amount - add padding in x direction pady=amount - add padding in y direction row=number - use cell identified with given row (starting with 0) rowspan=number - this widget will span several rows sticky=NSEW - if cell is
load state dict,"Copies parameters and buffers from :attr:`state_dict` into this module and its descendants. If :attr:`strict` is ``True``, then the keys of :attr:`state_dict` must exactly match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Args: state_dict (dict): a dict containing parameters and persistent buffers. strict (bool, optional): whether to strictly enforce that the keys in :attr:`state_dict` match the keys returned by this module's :meth:`~torch.nn.Module.state_dict` function. Default: ``True`` Returns: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields: * **missing_keys** is a list of str containing the missing keys * **unexpected_keys** is a list of str containing the unexpected keys Note: If a parameter or buffer"
wm iconify,Display widget as icon.
get parameter,"Returns the parameter given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the Parameter
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.nn.Parameter: The Parameter referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not an
        ``nn.Parameter``"
share memory,See :meth:`torch.Tensor.share_memory_`
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
 validate fill value,"Check if the value can be inserted into our array without casting,
and convert it to an appropriate native type if necessary.

Raises
------
TypeError
    If the value cannot be inserted into an array of this dtype."
print template statistics,"Print a list of all templates, ranked according to efficiency. If test_stats is available, the templates are ranked according to their relative contribution (summed for all rules created from a given template, weighted by score) to the performance on the test set. If no test_stats, then statistics collected during training are used instead. There is also an unweighted measure (just counting the rules). This is less informative, though, as many low-score rules will appear towards end of training. :param test_stats: dictionary of statistics collected during testing :type test_stats: dict of str -> any (but usually numbers) :param printunused: if True,"
 trace fringe,"Print trace output displaying the fringe of ``tree``.  The
fringe of ``tree`` consists of all of its leaves and all of
its childless subtrees.

:rtype: None"
set up substitutions,"Replace the declared encoding in a <meta> tag with a placeholder,
to be substituted when the tag is output to a string.

An HTML document may come in to Beautiful Soup as one
encoding, but exit in a different encoding, and the <meta> tag
needs to be changed to reflect this.

:param tag: A `Tag`
:return: Whether or not a substitution was performed."
wm iconwindow,"Set widget PATHNAME to be displayed instead of icon. Return the current
value if None is given."
place slaves,"Return a list of all slaves of this widget
in its packing order."
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
bind all,"Bind to all widgets at an event SEQUENCE a call to function FUNC.
An additional boolean parameter ADD specifies whether FUNC will
be called additionally to the other bound function or whether
it will replace the previous function. See bind for the return value."
to empty,"Moves the parameters and buffers to the specified device without copying storage.

Args:
    device (:class:`torch.device`): The desired device of the parameters
        and buffers in this module.

Returns:
    Module: self"
get buffer,"Returns the buffer given by ``target`` if it exists,
otherwise throws an error.

See the docstring for ``get_submodule`` for a more detailed
explanation of this method's functionality as well as how to
correctly specify ``target``.

Args:
    target: The fully-qualified string name of the buffer
        to look for. (See ``get_submodule`` for how to specify a
        fully-qualified string.)

Returns:
    torch.Tensor: The buffer referenced by ``target``

Raises:
    AttributeError: If the target string references an invalid
        path or resolves to something that is not a
        buffer"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
named buffers,"Returns an iterator over module buffers, yielding both the
name of the buffer as well as the buffer itself.

Args:
    prefix (str): prefix to prepend to all buffer names.
    recurse (bool, optional): if True, then yields buffers of this module
        and all submodules. Otherwise, yields only buffers that
        are direct members of this module. Defaults to True.
    remove_duplicate (bool, optional): whether to remove the duplicated buffers in the result. Defaults to True.

Yields:
    (str, torch.Tensor): Tuple containing the name and buffer

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())"
raw decode,"Decode a JSON document from ``s`` (a ``str`` beginning with
a JSON document) and return a 2-tuple of the Python
representation and the index in ``s`` where the document ended.

This can be used to decode a JSON document from a string that may
have extraneous data at the end."
 arith method,"Parameters
----------
other : Any
op : callable that accepts 2 params
    perform the binary op"
get etag,"Return a tuple in the form ``(etag, is_weak)``.  If there is no
ETag the return value is ``(None, None)``."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
apply freq filter,Removes candidate ngrams which have frequency less than min_freq.
event generate,"Generate an event SEQUENCE. Additional
keyword arguments specify parameter of the event
(e.g. x, y, rootx, rooty)."
drop duplicates,"Return Index with duplicate values removed. Parameters ---------- keep : {'first', 'last', ``False``}, default 'first' - 'first' : Drop duplicates except for the first occurrence. - 'last' : Drop duplicates except for the last occurrence. - ``False`` : Drop all duplicates. Returns ------- deduplicated : Index See Also -------- Series.drop_duplicates : Equivalent method on Series. DataFrame.drop_duplicates : Equivalent method on DataFrame. Index.duplicated : Related method on Index, indicating duplicate Index values. Examples -------- Generate an pandas.Index with duplicate values. >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo']) The `keep` parameter controls which duplicate values are removed. The value 'first'"
do pinfo,"Provide detailed information about an object.

The debugger interface to %pinfo, i.e., obj?."
selection own,"Become owner of X selection.

A keyword parameter selection specifies the name of
the selection (default PRIMARY)."
yview moveto,"Adjusts the view in the window so that FRACTION of the
total height of the canvas is off-screen to the top."
set extra state,"This function is called from :func:`load_state_dict` to handle any extra state
found within the `state_dict`. Implement this function and a corresponding
:func:`get_extra_state` for your module if you need to store extra state within its
`state_dict`.

Args:
    state (dict): Extra state from the `state_dict`"
named modules,"Returns an iterator over all modules in the network, yielding both the name of the module as well as the module itself. Args: memo: a memo to store the set of modules already added to the result prefix: a prefix that will be added to the name of the module remove_duplicate: whether to remove the duplicated module instances in the result or not Yields: (str, Module): Tuple of name and module Note: Duplicate modules are returned only once. In the following example, ``l`` will be returned only once. Example:: >>> l = nn.Linear(2, 2) >>> net = nn.Sequential(l, l) >>>"
pivot table,"Create a spreadsheet-style pivot table as a DataFrame. The levels in the pivot table will be stored in MultiIndex objects (hierarchical indexes) on the index and columns of the result DataFrame. Parameters ---------- values : column to aggregate, optional index : column, Grouper, array, or list of the previous If an array is passed, it must be the same length as the data. The list can contain any of the other types (except list). Keys to group by on the pivot table index. If an array is passed, it is being used as the same manner as column values. columns"
get indexer non unique,"Compute indexer and mask for new index given the current index.

The indexer should be then used as an input to ndarray.take to align the
current data to the new index.

Parameters
----------
target : Index

Returns
-------
indexer : np.ndarray[np.intp]
    Integers from 0 to n - 1 indicating that the index at these
    positions matches the corresponding target values. Missing values
    in the target are marked by -1.
missing : np.ndarray[np.intp]
    An indexer into the target of the values not found.
    These correspond to the -1 in the indexer array."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
encode str,"Encode the data using the specified encoder.

Args:
    value: The data to encode.

Returns:
    The encoded data."
winfo pointery,Return the y coordinate of the pointer on the root window.
focus set,"Direct input focus to this widget.

If the application currently does not have the focus
this widget will get the focus if the application gets
the focus through the window manager."
scan dragto,"Compute the difference between the given x argument
and the x argument to the last scan mark command

It then adjusts the view left or right by 10 times the
difference in x-coordinates. This command is typically
associated with mouse motion events in the widget, to
produce the effect of dragging the spinbox at high speed
through the window. The return value is an empty string."
weighted kappa pairwise,Cohen 1968
reorder categories,"Reorder categories as specified in new_categories. `new_categories` need to include all old categories and no new category items. Parameters ---------- new_categories : Index-like The categories in new order. ordered : bool, optional Whether or not the categorical is treated as a ordered categorical. If not given, do not change the ordered information. inplace : bool, default False Whether or not to reorder the categories inplace or return a copy of this categorical with reordered categories. .. deprecated:: 1.3.0 Returns ------- cat : Categorical or None Categorical with removed categories or None if ``inplace=True``. Raises ------ ValueError If the new categories"
get booster,"Get the underlying xgboost Booster of this model.

This will raise an exception when fit was not called

Returns
-------
booster : a xgboost booster of underlying model"
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
winfo pointerx,Return the x coordinate of the pointer on the root window.
grid info,"Return information about the options
for positioning this widget in a grid."
 get nearest indexer,"Get the indexer for the nearest index labels; requires an index with
values that can be subtracted from each other (e.g., not strings or
tuples)."
selection get,"Return the contents of the current X selection.

A keyword parameter selection specifies the name of
the selection and defaults to PRIMARY.  A keyword
parameter displayof specifies a widget on the display
to use. A keyword parameter type specifies the form of data to be
fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
before STRING."
trees to dataframe,"Parse a boosted tree model text dump into a pandas DataFrame structure.

This feature is only defined when the decision tree model is chosen as base
learner (`booster in {gbtree, dart}`). It is not defined for other base learner
types, such as linear learners (`booster=gblinear`).

Parameters
----------
fmap: str or os.PathLike (optional)
   The name of feature map file."
register load state dict post hook,"Registers a post hook to be run after module's ``load_state_dict`` is called. It should have the following signature:: hook(module, incompatible_keys) -> None The ``module`` argument is the current module that this hook is registered on, and the ``incompatible_keys`` argument is a ``NamedTuple`` consisting of attributes ``missing_keys`` and ``unexpected_keys``. ``missing_keys`` is a ``list`` of ``str`` containing the missing keys and ``unexpected_keys`` is a ``list`` of ``str`` containing the unexpected keys. The given incompatible_keys can be modified inplace if needed. Note that the checks performed when calling :func:`load_state_dict` with ``strict=True`` are affected by modifications the hook makes to ``missing_keys`` or ``unexpected_keys``, as"
 register,"Return a newly created Tcl function. If this
function is called, the Python function FUNC will
be executed. An optional function SUBST can
be given which will be executed before FUNC."
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
winfo manager,Return the window manager name for this widget.
 get indexer strict,Analogue to get_indexer that raises if any elements are missing.
pack propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given the current setting will be returned."
winfo screendepth,"Return the number of bits per pixel of the root window of the
screen of this widget."
 load from state dict,"Copies parameters and buffers from :attr:`state_dict` into only this module, but not its descendants. This is called on every submodule in :meth:`~torch.nn.Module.load_state_dict`. Metadata saved for this module in input :attr:`state_dict` is provided as :attr:`local_metadata`. For state dicts without metadata, :attr:`local_metadata` is empty. Subclasses can achieve class-specific backward compatible loading using the version number at `local_metadata.get(""version"", None)`. .. note:: :attr:`state_dict` is not the same object as the input :attr:`state_dict` to :meth:`~torch.nn.Module.load_state_dict`. So it can be modified. Args: state_dict (dict): a dict containing parameters and persistent buffers. prefix (str): the prefix for parameters and buffers used in this module local_metadata (dict): a"
add param group,"Add a param group to the :class:`Optimizer` s `param_groups`.

This can be useful when fine tuning a pre-trained network as frozen layers can be made
trainable and added to the :class:`Optimizer` as training progresses.

Args:
    param_group (dict): Specifies what Tensors should be optimized along with group
        specific optimization options."
image names,Return a list of all existing image names.
to numpy,"A NumPy ndarray representing the values in this Series or Index. Parameters ---------- dtype : str or numpy.dtype, optional The dtype to pass to :meth:`numpy.asarray`. copy : bool, default False Whether to ensure that the returned value is not a view on another array. Note that ``copy=False`` does not *ensure* that ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that a copy is made, even if not strictly necessary. na_value : Any, optional The value to use for missing values. The default value depends on `dtype` and the type of the array. .. versionadded:: 1.0.0 **kwargs Additional keywords passed through to the"
wait window,"Wait until a WIDGET is destroyed.

If no parameter is given self is used."
equal values,"Return True if ``self`` and ``other`` assign the same value to
to every feature.  In particular, return true if
``self[p]==other[p]`` for every feature path *p* such
that ``self[p]`` or ``other[p]`` is a base value (i.e.,
not a nested feature structure).

:param check_reentrance: If True, then also return False if
    there is any difference between the reentrances of ``self``
    and ``other``.
:note: the ``==`` is equivalent to ``equal_values()`` with
    ``check_reentrance=True``."
feature detector,"Return the feature detector that this tagger uses to generate
featuresets for its classifier.  The feature detector is a
function with the signature::

  feature_detector(tokens, index, history) -> featureset

See ``classifier()``"
get extra state,"Returns any extra state to include in the module's state_dict.
Implement this and a corresponding :func:`set_extra_state` for your module
if you need to store extra state. This function is called when building the
module's `state_dict()`.

Note that extra state should be picklable to ensure working serialization
of the state_dict. We only provide provide backwards compatibility guarantees
for serializing Tensors; other objects may break backwards compatibility if
their serialized pickled form changes.

Returns:
    object: Any extra state to store in the module's state_dict"
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
decode str,"Decode the data using the specified encoder.

Args:
    data: The data to decode.

Returns:
    The decoded data."
tk focusFollowsMouse,"The widget under mouse will get automatically focus. Can not
be disabled easily."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
transparency set,"Set the transparency of the pixel at x,y."
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
tk setPalette,"Set a new color scheme for all widget elements.

A single color as argument will cause that all colors of Tk
widget elements are derived from this.
Alternatively several keyword parameters and its associated
colors can be given. The following keywords are valid:
activeBackground, foreground, selectColor,
activeForeground, highlightBackground, selectBackground,
background, highlightColor, selectForeground,
disabledForeground, insertBackground, troughColor."
get submodule,"Returns the submodule given by ``target`` if it exists, otherwise throws an error. For example, let's say you have an ``nn.Module`` ``A`` that looks like this: .. code-block:: text A( (net_b): Module( (net_c): Module( (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2)) ) (linear): Linear(in_features=100, out_features=200, bias=True) ) ) (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested submodule ``net_b``, which itself has two submodules ``net_c`` and ``linear``. ``net_c`` then has a submodule ``conv``.) To check whether or not we have the ``linear`` submodule, we would call ``get_submodule(""net_b.linear"")``. To check whether we have the ``conv`` submodule, we would call ``get_submodule(""net_b.net_c.conv"")``."
reduce uri,Accept authority or URI and extract only the authority and path.
grid columnconfigure,"Configure column INDEX of a grid.

Valid resources are minsize (minimum size of the column),
weight (how much does additional space propagate to this column)
and pad (how much space to let additionally)."
share memory,See :meth:`torch.Tensor.share_memory_`
state dict,"Returns a dictionary containing references to the whole state of the module. Both parameters and persistent buffers (e.g. running averages) are included. Keys are corresponding parameter and buffer names. Parameters and buffers set to ``None`` are not included. .. note:: The returned object is a shallow copy. It contains references to the module's parameters and buffers. .. warning:: Currently ``state_dict()`` also accepts positional arguments for ``destination``, ``prefix`` and ``keep_vars`` in order. However, this is being deprecated and keyword arguments will be enforced in future releases. .. warning:: Please avoid the use of argument ``destination`` as it is not designed for"
 find error handler,"Return a registered error handler for an exception in this order:
blueprint handler for a specific code, app handler for a specific code,
blueprint handler for an exception class, app handler for an exception
class, or ``None`` if a suitable handler is not found."
make response,"Convert the return value from a view function to an instance of :attr:`response_class`. :param rv: the return value from the view function. The view function must return a response. Returning ``None``, or the view ending without returning, is not allowed. The following types are allowed for ``view_rv``: ``str`` A response object is created with the string encoded to UTF-8 as the body. ``bytes`` A response object is created with the bytes as the body. ``dict`` A dictionary that will be jsonify'd before being returned. ``list`` A list that will be jsonify'd before being returned. ``generator`` or ``iterator`` A generator that"
zero grad,"Sets gradients of all model parameters to zero. See similar function
under :class:`torch.optim.Optimizer` for more context.

Args:
    set_to_none (bool): instead of setting to zero, set the grads to None.
        See :meth:`torch.optim.Optimizer.zero_grad` for details."
 register state dict hook,"These hooks will be called with arguments: `self`, `state_dict`,
`prefix`, `local_metadata`, after the `state_dict` of `self` is set.
Note that only parameters and buffers of `self` or its children are
guaranteed to exist in `state_dict`. The hooks may modify `state_dict`
inplace or return a new one."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
 nametowidget,"Return the Tkinter instance of a widget identified by
its Tcl name NAME."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
to flat index,"Identity method.

This is implemented for compatibility with subclass implementations
when chaining.

Returns
-------
pd.Index
    Caller.

See Also
--------
MultiIndex.to_flat_index : Subclass implementation."
extra repr,"Set the extra representation of the module

To print customized extra information, you should re-implement
this method in your own modules. Both single-line and multi-line
strings are acceptable."
complex float,Casts this storage to complex float type
winfo screenvisual,"Return one of the strings directcolor, grayscale, pseudocolor,
staticcolor, staticgray, or truecolor for the default
colormodel of this screen."
tk focusPrev,Return previous widget in the focus order. See tk_focusNext for details.
winfo server,"Return information of the X-Server of the screen of this widget in
the form ""XmajorRminor vendor vendorVersion""."
symmetric difference,"Compute the symmetric difference of two Index objects. Parameters ---------- other : Index or array-like result_name : str sort : False or None, default None Whether to sort the resulting index. By default, the values are attempted to be sorted, but any TypeError from incomparable elements is caught by pandas. * None : Attempt to sort the result, but catch any TypeErrors from comparing incomparable elements. * False : Do not sort the result. Returns ------- symmetric_difference : Index Notes ----- ``symmetric_difference`` contains elements that appear in either ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by"
transparency get,"Return True if the pixel at x,y is transparent."
winfo pointery,Return the y coordinate of the pointer on the root window.
wm withdraw,"Withdraw this widget from the screen such that it is unmapped
and forgotten by the window manager. Re-draw it with wm_deiconify."
 getconfigure,Call Tcl configure command and return the result as a dict.
is interval,Check if the Index holds Interval objects. Returns ------- bool Whether or not the Index holds Interval objects. See Also -------- IntervalIndex : Index for Interval objects. is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_mixed : Check if the Index holds data with mixed data types.
winfo interps,Return the name of all Tcl interpreters for this display.
is numeric,Check if the Index only consists of numeric data. Returns ------- bool Whether or not the Index only consists of numeric data. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_object : Check if the Index is of the object dtype. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
set grammar,"Change the grammar used to parse texts.

:param grammar: The new grammar.
:type grammar: CFG"
remove unused categories,"Remove categories which are not used. Parameters ---------- inplace : bool, default False Whether or not to drop unused categories inplace or return a copy of this categorical with unused categories dropped. .. deprecated:: 1.2.0 Returns ------- cat : Categorical or None Categorical with unused categories dropped or None if ``inplace=True``. See Also -------- rename_categories : Rename categories. reorder_categories : Reorder categories. add_categories : Add new categories. remove_categories : Remove the specified categories. set_categories : Set the categories to the specified ones. Examples -------- >>> c = pd.Categorical(['a', 'c', 'b', 'c', 'd']) >>> c ['a', 'c', 'b', 'c', 'd'] Categories"
register state dict pre hook,"These hooks will be called with arguments: ``self``, ``prefix``,
and ``keep_vars`` before calling ``state_dict`` on ``self``. The registered
hooks can be used to perform pre-processing before the ``state_dict``
call is made."
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
 memory usage,"Memory usage of the values.

Parameters
----------
deep : bool, default False
    Introspect the data deeply, interrogate
    `object` dtypes for system-level memory consumption.

Returns
-------
bytes used

See Also
--------
numpy.ndarray.nbytes : Total bytes consumed by the elements of the
    array.

Notes
-----
Memory usage does not include memory consumed by elements that
are not components of the array if deep=False or if used on PyPy"
winfo screenheight,"Return the number of pixels of the height of the screen of this widget
in pixel."
addtag overlapping,"Add tag NEWTAG to all items which overlap the rectangle
defined by X1,Y1,X2,Y2."
add module,"Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Args:
    name (str): name of the child module. The child module can be
        accessed from this module using the given name
    module (Module): child module to be added to the module."
register forward pre hook,"Registers a forward pre-hook on the module. The hook will be called every time before :func:`forward` is invoked. If ``with_kwargs`` is false or not specified, the input contains only the positional arguments given to the module. Keyword arguments won't be passed to the hooks and only to the ``forward``. The hook can modify the input. User can either return a tuple or a single modified value in the hook. We will wrap the value into a tuple if a single value is returned (unless that value is already a tuple). The hook should have the following signature:: hook(module, args) ->"
 ne,"This just assumes that words in all caps or titles are
named entities.

:type token: str"
register backward hook,"Registers a backward hook on the module.

This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
the behavior of this function will change in future versions.

Returns:
    :class:`torch.utils.hooks.RemovableHandle`:
        a handle that can be used to remove the added hook by calling
        ``handle.remove()``"
wm geometry,"Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
current value if None is given."
select jinja autoescape,"Returns ``True`` if autoescaping should be active for the given
template name. If no template name is given, returns `True`.

.. versionchanged:: 2.2
    Autoescaping is now enabled by default for ``.svg`` files.

.. versionadded:: 0.5"
grab set global,"Set global grab for this widget.

A global grab directs all events to this and
descendant widgets on the display. Use with caution -
other applications do not get events anymore."
set closed,"Return an identical IntervalArray closed on the specified side.

Parameters
----------
closed : {'left', 'right', 'both', 'neither'}
    Whether the intervals are closed on the left-side, right-side, both
    or neither.

Returns
-------
new_index : IntervalArray

Examples
--------
>>> index = pd.arrays.IntervalArray.from_breaks(range(4))
>>> index
<IntervalArray>
[(0, 1], (1, 2], (2, 3]]
Length: 3, dtype: interval[int64, right]
>>> index.set_closed('both')
<IntervalArray>
[[0, 1], [1, 2], [2, 3]]
Length: 3, dtype: interval[int64, both]"
named children,"Returns an iterator over immediate children modules, yielding both
the name of the module as well as the module itself.

Yields:
    (str, Module): Tuple containing a name and child module

Example::

    >>> # xdoctest: +SKIP(""undefined vars"")
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)"
handle url build error,"Called by :meth:`.url_for` if a
:exc:`~werkzeug.routing.BuildError` was raised. If this returns
a value, it will be returned by ``url_for``, otherwise the error
will be re-raised.

Each function in :attr:`url_build_error_handlers` is called with
``error``, ``endpoint`` and ``values``. If a function returns
``None`` or raises a ``BuildError``, it is skipped. Otherwise,
its return value is returned by ``url_for``.

:param error: The active ``BuildError`` being handled.
:param endpoint: The endpoint being built.
:param values: The keyword arguments passed to ``url_for``."
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
unbind all,Unbind for all widgets for event SEQUENCE all functions.
drop duplicates,"Return Index with duplicate values removed. Parameters ---------- keep : {'first', 'last', ``False``}, default 'first' - 'first' : Drop duplicates except for the first occurrence. - 'last' : Drop duplicates except for the last occurrence. - ``False`` : Drop all duplicates. Returns ------- deduplicated : Index See Also -------- Series.drop_duplicates : Equivalent method on Series. DataFrame.drop_duplicates : Equivalent method on DataFrame. Index.duplicated : Related method on Index, indicating duplicate Index values. Examples -------- Generate an pandas.Index with duplicate values. >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo']) The `keep` parameter controls which duplicate values are removed. The value 'first'"
after idle,"Call FUNC once if the Tcl main loop has no event to
process.

Return an identifier to cancel the scheduling with
after_cancel."
 get engine target,"Get the ndarray or ExtensionArray that we can pass to the IndexEngine
constructor."
grid slaves,"Return a list of all slaves of this widget
in its packing order."
winfo width,Return the width of this widget.
winfo pointerx,Return the x coordinate of the pointer on the root window.
pformat latex qtree,"Returns a representation of the tree compatible with the
LaTeX qtree package. This consists of the string ``\Tree``
followed by the tree represented in bracketed notation.

For example, the following result was generated from a parse tree of
the sentence ``The announcement astounded us``::

  \Tree [.I'' [.N'' [.D The ] [.N' [.N announcement ] ] ]
      [.I' [.V'' [.V' [.V astounded ] [.N'' [.N' [.N us ] ] ] ] ] ] ]

See http://www.ling.upenn.edu/advice/latex.html for the LaTeX
style file for the qtree package.

:return: A latex qtree representation of this tree.
:rtype: str"
set value,"Fast lookup of value from 1-dimensional ndarray.

.. deprecated:: 1.0

Notes
-----
Only use this if you know what you're doing."
event info,"Return a list of all virtual events or the information
about the SEQUENCE bound to the virtual event VIRTUAL."
selection handle,"Specify a function COMMAND to call if the X
selection owned by this widget is queried by another
application.

This function must return the contents of the
selection. The function will be called with the
arguments OFFSET and LENGTH which allows the chunking
of very long selections. The following keyword
parameters can be provided:
selection - name of the selection (default PRIMARY),
type - type of the selection (e.g. STRING, FILE_NAME)."
 setup,Internal function. Sets up information about children.
grid bbox,"Return a tuple of integer coordinates for the bounding
box of this widget controlled by the geometry manager grid.

If COLUMN, ROW is given the bounding box applies from
the cell with row and column 0 to the specified
cell. If COL2 and ROW2 are given the bounding box
starts at that cell.

The returned integers specify the offset of the upper left
corner in the master widget and the width and height."
is object,Check if the Index is of the object dtype. Returns ------- bool Whether or not the Index is of the object dtype. See Also -------- is_boolean : Check if the Index only consists of booleans. is_integer : Check if the Index only consists of integers. is_floating : Check if the Index is a floating type. is_numeric : Check if the Index only consists of numeric data. is_categorical : Check if the Index holds categorical data. is_interval : Check if the Index holds Interval objects. is_mixed : Check if the Index holds data with mixed data types. Examples -------- >>> idx
 get common dtype,"Return the common dtype, if one exists. Used in `find_common_type` implementation. This is for example used to determine the resulting dtype in a concat operation. If no common dtype exists, return None (which gives the other dtypes the chance to determine a common dtype). If all dtypes in the list return None, then the common dtype will be ""object"" dtype (this means it is never needed to return ""object"" dtype from this method itself). Parameters ---------- dtypes : list of dtypes The dtypes for which to determine a common dtype. This is a list of np.dtype or ExtensionDtype instances. Returns"
register full backward pre hook,"Registers a backward pre-hook on the module. The hook will be called every time the gradients for the module are computed. The hook should have the following signature:: hook(module, grad_output) -> Tensor or None The :attr:`grad_output` is a tuple. The hook should not modify its arguments, but it can optionally return a new gradient with respect to the output that will be used in place of :attr:`grad_output` in subsequent computations. Entries in :attr:`grad_output` will be ``None`` for all non-Tensor arguments. For technical reasons, when this hook is applied to a Module, its forward function will receive a view of each"
winfo rootx,"Return x coordinate of upper left corner of this widget on the
root window."
check for ordered,assert that we are ordered
 get backward hooks,"Returns the backward hooks for use in the call function.
It returns two lists, one with the full backward hooks and one with the non-full
backward hooks."
 setparent,"Update the parent pointer of ``child`` to point to ``self``. This method is only called if the type of ``child`` is ``Tree``; i.e., it is not called when adding a leaf to a tree. This method is always called before the child is actually added to the child list of ``self``. :type child: Tree :type index: int :param index: The index of ``child`` in ``self``. :raise TypeError: If ``child`` is a tree with an impropriate type. Typically, if ``child`` is a tree, then its type needs to match the type of ``self``. This prevents mixing of different tree types (single-parented,"
do unalias,"unalias name
Delete the specified alias."
is mount,Check if this path is a POSIX mount point
winfo atom,Return integer which represents atom NAME.
set categories,"Set the categories to the specified new_categories. `new_categories` can include new categories (which will result in unused categories) or remove old categories (which results in values set to NaN). If `rename==True`, the categories will simple be renamed (less or more items than in old categories will result in values set to NaN or in unused categories respectively). This method can be used to perform more than one action of adding, removing, and reordering simultaneously and is therefore faster than performing the individual steps via the more specialised methods. On the other hand this methods does not do checks (e.g., whether"
 shallow copy,"Create a new Index with the same class as the caller, don't copy the
data, use the same object attributes with passed in attributes taking
precedence.

*this is an internal non-public method*

Parameters
----------
values : the values to create the new Index, optional
name : Label, defaults to self.name"
 register load state dict pre hook,"These hooks will be called with arguments: `state_dict`, `prefix`,
`local_metadata`, `strict`, `missing_keys`, `unexpected_keys`,
`error_msgs`, before loading `state_dict` into `self`. These arguments
are exactly the same as those of `_load_from_state_dict`.

If ``with_module`` is ``True``, then the first argument to the hook is
an instance of the module.

Arguments:
    hook (Callable): Callable hook that will be invoked before
        loading the state dict.
    with_module (bool, optional): Whether or not to pass the module
        instance to the hook as the first parameter."
grid propagate,"Set or get the status for propagation of geometry information.

A boolean argument specifies whether the geometry information
of the slaves will determine the size of this widget. If no argument
is given, the current setting will be returned."
requires grad ,"Change if autograd should record operations on parameters in this
module.

This method sets the parameters' :attr:`requires_grad` attributes
in-place.

This method is helpful for freezing part of the module for finetuning
or training parts of a model individually (e.g., GAN training).

See :ref:`locally-disable-grad-doc` for a comparison between
`.requires_grad_()` and several similar mechanisms that may be confused with it.

Args:
    requires_grad (bool): whether autograd should record operations on
                          parameters in this module. Default: ``True``.

Returns:
    Module: self"
to series,"Create a Series with both index and values equal to the index keys. Useful with map for returning an indexer based on an index. Parameters ---------- index : Index, optional Index of resulting Series. If None, defaults to original index. name : str, optional Name of resulting Series. If None, defaults to name of original index. Returns ------- Series The dtype will be based on the type of the Index values. See Also -------- Index.to_frame : Convert an Index to a DataFrame. Series.to_frame : Convert Series to DataFrame. Examples -------- >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal') By default, the"
